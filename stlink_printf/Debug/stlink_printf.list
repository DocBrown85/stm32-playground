
stlink_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f150  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f4fc  0800f4fc  0001f4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f504  0800f504  0001f504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f508  0800f508  0001f508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800f50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000010cc  20000070  0800f57c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000113c  0800f57c  0002113c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035034  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005013  00000000  00000000  000550da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cc0  00000000  00000000  0005a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002ad0  00000000  00000000  0005cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e2c9  00000000  00000000  0005f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003858c  00000000  00000000  0009db49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185e05  00000000  00000000  000d60d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025beda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000cbfc  00000000  00000000  0025bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f370 	.word	0x0800f370

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800f370 	.word	0x0800f370

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <__io_putchar+0x20>)
 80005aa:	f00c fcbb 	bl	800cf24 <HAL_UART_Transmit>
  return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000ac8 	.word	0x20000ac8

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f002 fd14 	bl	8002fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f838 	bl	8000638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005c8:	f000 f89b 	bl	8000702 <PeriphCommonClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005cc:	f000 f8e6 	bl	800079c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 ff3a 	bl	8001448 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80005d4:	f000 fa32 	bl	8000a3c <MX_GPDMA1_Init>
  MX_ADC1_Init();
 80005d8:	f000 f8e8 	bl	80007ac <MX_ADC1_Init>
  MX_ADF1_Init();
 80005dc:	f000 f92c 	bl	8000838 <MX_ADF1_Init>
  MX_MDF1_Init();
 80005e0:	f000 f994 	bl	800090c <MX_MDF1_Init>
  MX_DAC1_Init();
 80005e4:	f000 f9e2 	bl	80009ac <MX_DAC1_Init>
  MX_I2C1_Init();
 80005e8:	f000 fa70 	bl	8000acc <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ec:	f000 faae 	bl	8000b4c <MX_I2C2_Init>
  MX_I2C3_Init();
 80005f0:	f000 faec 	bl	8000bcc <MX_I2C3_Init>
  MX_ICACHE_Init();
 80005f4:	f000 fb2a 	bl	8000c4c <MX_ICACHE_Init>
  MX_RTC_Init();
 80005f8:	f000 fb3c 	bl	8000c74 <MX_RTC_Init>
  MX_SAI1_Init();
 80005fc:	f000 fb88 	bl	8000d10 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000600:	f000 fc4c 	bl	8000e9c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000604:	f000 fc6e 	bl	8000ee4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000608:	f000 fcdc 	bl	8000fc4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800060c:	f000 fd4c 	bl	80010a8 <MX_SPI3_Init>
  MX_TAMP_RTC_Init();
 8000610:	f000 fdba 	bl	8001188 <MX_TAMP_RTC_Init>
  MX_TIM3_Init();
 8000614:	f000 fdfe 	bl	8001214 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000618:	f000 fe50 	bl	80012bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800061c:	f000 fe9a 	bl	8001354 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000620:	f000 fee6 	bl	80013f0 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("Hello World!!!\n");
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <main+0x78>)
 8000626:	f00e fa15 	bl	800ea54 <puts>
	HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800062e:	f002 fd61 	bl	80030f4 <HAL_Delay>
	printf("Hello World!!!\n");
 8000632:	e7f7      	b.n	8000624 <main+0x68>
 8000634:	0800f388 	.word	0x0800f388

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b09e      	sub	sp, #120	; 0x78
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2260      	movs	r2, #96	; 0x60
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00e f98e 	bl	800e968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000660:	f005 ff0e 	bl	8006480 <HAL_PWREx_ControlVoltageScaling>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800066a:	f001 f90f 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800066e:	232b      	movs	r3, #43	; 0x2b
 8000670:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000688:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	2303      	movs	r3, #3
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80006b2:	230c      	movs	r3, #12
 80006b4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 ff9a 	bl	80065f8 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ca:	f001 f8df 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	231f      	movs	r3, #31
 80006d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	2104      	movs	r1, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fe60 	bl	80073b0 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f001 f8c9 	bl	800188c <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3778      	adds	r7, #120	; 0x78
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b0b2      	sub	sp, #200	; 0xc8
 8000706:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	22c8      	movs	r2, #200	; 0xc8
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00e f92a 	bl	800e968 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_MDF1|RCC_PERIPHCLK_ADF1
 8000714:	f44f 3260 	mov.w	r2, #229376	; 0x38000
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_ADCDAC;
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_PLL3;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_PLL3;
 8000726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800072a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  PeriphClkInit.PLL3.PLL3Source = RCC_PLLSOURCE_HSE;
 8000736:	2303      	movs	r3, #3
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.PLL3.PLL3M = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.PLL3.PLL3N = 48;
 800073e:	2330      	movs	r3, #48	; 0x30
 8000740:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.PLL3.PLL3P = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.PLL3.PLL3Q = 25;
 8000746:	2319      	movs	r3, #25
 8000748:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.PLL3.PLL3R = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.PLL3.PLL3RGE = RCC_PLLVCIRANGE_1;
 800074e:	230c      	movs	r3, #12
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLL3.PLL3FRACN = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLL3.PLL3ClockOut = RCC_PLL3_DIVQ;
 8000756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 8000764:	2330      	movs	r3, #48	; 0x30
 8000766:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 800076c:	2307      	movs	r3, #7
 800076e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 8000770:	2319      	movs	r3, #25
 8000772:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 8000774:	230c      	movs	r3, #12
 8000776:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800077c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4618      	mov	r0, r3
 8000786:	f007 f9e9 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <PeriphCommonClock_Config+0x92>
  {
    Error_Handler();
 8000790:	f001 f87c 	bl	800188c <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	37c8      	adds	r7, #200	; 0xc8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80007a0:	f005 ff0a 	bl	80065b8 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a4:	f005 ff18 	bl	80065d8 <HAL_PWREx_DisableUCPDDeadBattery>
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0x84>)
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <MX_ADC1_Init+0x88>)
 80007b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0x84>)
 80007be:	2204      	movs	r2, #4
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_ADC1_Init+0x84>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0x84>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_ADC1_Init+0x84>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC1_Init+0x84>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ADC1_Init+0x84>)
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC1_Init+0x84>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_ADC1_Init+0x84>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_ADC1_Init+0x84>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_ADC1_Init+0x84>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_ADC1_Init+0x84>)
 8000800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000804:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_ADC1_Init+0x84>)
 8000808:	2200      	movs	r2, #0
 800080a:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_MDF;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_ADC1_Init+0x84>)
 800080e:	2202      	movs	r2, #2
 8000810:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_ADC1_Init+0x84>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0x84>)
 800081c:	f002 fd8c 	bl	8003338 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000826:	f001 f831 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000008c 	.word	0x2000008c
 8000834:	42028000 	.word	0x42028000

08000838 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 800083c:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_ADF1_Init+0xc8>)
 800083e:	4a31      	ldr	r2, [pc, #196]	; (8000904 <MX_ADF1_Init+0xcc>)
 8000840:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000844:	2201      	movs	r2, #1
 8000846:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = ENABLE;
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_ADF1_Init+0xc8>)
 800084a:	2201      	movs	r2, #1
 800084c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.CommonParam.OutputClock.Pins = MDF_OUTPUT_CLOCK_0;
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000850:	2220      	movs	r2, #32
 8000852:	611a      	str	r2, [r3, #16]
  AdfHandle0.Init.CommonParam.OutputClock.Divider = 5;
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000856:	2205      	movs	r2, #5
 8000858:	615a      	str	r2, [r3, #20]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Activation = ENABLE;
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_ADF1_Init+0xc8>)
 800085c:	2201      	movs	r2, #1
 800085e:	761a      	strb	r2, [r3, #24]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  AdfHandle0.Init.CommonParam.OutputClock.Trigger.Edge = MDF_CLOCK_TRIG_FALLING_EDGE;
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086c:	621a      	str	r2, [r3, #32]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.Mode = MDF_SITF_NORMAL_SPI_MODE;
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000878:	2210      	movs	r2, #16
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800087c:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_ADF1_Init+0xc8>)
 800087e:	2200      	movs	r2, #0
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 31;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000884:	221f      	movs	r2, #31
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_ADF1_Init+0xc8>)
 800088a:	2201      	movs	r2, #1
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_ADF1_Init+0xc8>)
 8000890:	f005 fb12 	bl	8005eb8 <HAL_MDF_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADF1_Init+0x66>
  {
    Error_Handler();
 800089a:	f000 fff7 	bl	800188c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008ac:	2250      	movs	r2, #80	; 0x50
 80008ae:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 16;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008b2:	2210      	movs	r2, #16
 80008b4:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 1;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = ENABLE;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008be:	2201      	movs	r2, #1
 80008c0:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.ReshapeFilter.DecimationRatio = MDF_RSF_DECIMATION_RATIO_4;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  AdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_SYNC_CONT;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	66da      	str	r2, [r3, #108]	; 0x6c
  AdfFilterConfig0.Trigger.Source = MDF_CLOCK_TRIG_TRGO;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	671a      	str	r2, [r3, #112]	; 0x70
  AdfFilterConfig0.Trigger.Edge = MDF_FILTER_TRIG_RISING_EDGE;
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <MX_ADF1_Init+0xd0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	675a      	str	r2, [r3, #116]	; 0x74
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000118 	.word	0x20000118
 8000904:	46024080 	.word	0x46024080
 8000908:	2000015c 	.word	0x2000015c

0800090c <MX_MDF1_Init>:
  * @brief MDF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_MDF1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END MDF1_Init 1 */

  /**
    MdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  MdfHandle0.Instance = MDF1_Filter0;
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_MDF1_Init+0x94>)
 8000912:	4a24      	ldr	r2, [pc, #144]	; (80009a4 <MX_MDF1_Init+0x98>)
 8000914:	601a      	str	r2, [r3, #0]
  MdfHandle0.Init.CommonParam.InterleavedFilters = 0;
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_MDF1_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  MdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800091c:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_MDF1_Init+0x94>)
 800091e:	2201      	movs	r2, #1
 8000920:	609a      	str	r2, [r3, #8]
  MdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_MDF1_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	731a      	strb	r2, [r3, #12]
  MdfHandle0.Init.SerialInterface.Activation = DISABLE;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_MDF1_Init+0x94>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (HAL_MDF_Init(&MdfHandle0) != HAL_OK)
 8000930:	481b      	ldr	r0, [pc, #108]	; (80009a0 <MX_MDF1_Init+0x94>)
 8000932:	f005 fac1 	bl	8005eb8 <HAL_MDF_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_MDF1_Init+0x34>
  {
    Error_Handler();
 800093c:	f000 ffa6 	bl	800188c <Error_Handler>
  /**
    MdfFilterConfig0, MdfOldConfig0 and/or MdfScdConfig0 structures initialization

    WARNING : only structures are filled, no specific init function call for filter
  */
  MdfFilterConfig0.DataSource = MDF_DATA_SOURCE_ADCITF1;
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000942:	2202      	movs	r2, #2
 8000944:	601a      	str	r2, [r3, #0]
  MdfFilterConfig0.Delay = 0;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  MdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC5;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_MDF1_Init+0x9c>)
 800094e:	2250      	movs	r2, #80	; 0x50
 8000950:	609a      	str	r2, [r3, #8]
  MdfFilterConfig0.DecimationRatio = 4;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000954:	2204      	movs	r2, #4
 8000956:	60da      	str	r2, [r3, #12]
  MdfFilterConfig0.Offset = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_MDF1_Init+0x9c>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  MdfFilterConfig0.Gain = 4;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000960:	2204      	movs	r2, #4
 8000962:	615a      	str	r2, [r3, #20]
  MdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	761a      	strb	r2, [r3, #24]
  MdfFilterConfig0.HighPassFilter.Activation = ENABLE;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_MDF1_Init+0x9c>)
 800096c:	2201      	movs	r2, #1
 800096e:	f883 2020 	strb.w	r2, [r3, #32]
  MdfFilterConfig0.HighPassFilter.CutOffFrequency = MDF_HPF_CUTOFF_0_000625FPCM;
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  MdfFilterConfig0.Integrator.Activation = DISABLE;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_MDF1_Init+0x9c>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  MdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  MdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_MDF1_Init+0x9c>)
 800098a:	2200      	movs	r2, #0
 800098c:	665a      	str	r2, [r3, #100]	; 0x64
  MdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000990:	2200      	movs	r2, #0
 8000992:	669a      	str	r2, [r3, #104]	; 0x68
  MdfFilterConfig0.DiscardSamples = 0;
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <MX_MDF1_Init+0x9c>)
 8000996:	2200      	movs	r2, #0
 8000998:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN MDF1_Init 2 */

  /* USER CODE END MDF1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200001d8 	.word	0x200001d8
 80009a4:	40025080 	.word	0x40025080
 80009a8:	2000021c 	.word	0x2000021c

080009ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00d ffd4 	bl	800e968 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_DAC1_Init+0x88>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_DAC1_Init+0x8c>)
 80009c8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009ca:	481a      	ldr	r0, [pc, #104]	; (8000a34 <MX_DAC1_Init+0x88>)
 80009cc:	f003 f88d 	bl	8003aea <HAL_DAC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 80009d6:	f000 ff59 	bl	800188c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 80009f2:	2304      	movs	r3, #4
 80009f4:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_DAC1_Init+0x88>)
 8000a04:	f003 f894 	bl	8003b30 <HAL_DAC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8000a0e:	f000 ff3d 	bl	800188c <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_DAC1_Init+0x88>)
 8000a1c:	f003 fa1e 	bl	8003e5c <HAL_DACEx_SetConfigAutonomousMode>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 8000a26:	f000 ff31 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000400 	.word	0x20000400
 8000a38:	46021800 	.word	0x46021800

08000a3c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_GPDMA1_Init+0x8c>)
 8000a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a48:	4a1f      	ldr	r2, [pc, #124]	; (8000ac8 <MX_GPDMA1_Init+0x8c>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_GPDMA1_Init+0x8c>)
 8000a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	201d      	movs	r0, #29
 8000a66:	f003 f80c 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000a6a:	201d      	movs	r0, #29
 8000a6c:	f003 f823 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	201e      	movs	r0, #30
 8000a76:	f003 f804 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000a7a:	201e      	movs	r0, #30
 8000a7c:	f003 f81b 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	201f      	movs	r0, #31
 8000a86:	f002 fffc 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8000a8a:	201f      	movs	r0, #31
 8000a8c:	f003 f813 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2020      	movs	r0, #32
 8000a96:	f002 fff4 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8000a9a:	2020      	movs	r0, #32
 8000a9c:	f003 f80b 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2021      	movs	r0, #33	; 0x21
 8000aa6:	f002 ffec 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8000aaa:	2021      	movs	r0, #33	; 0x21
 8000aac:	f003 f803 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2022      	movs	r0, #34	; 0x22
 8000ab6:	f002 ffe4 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8000aba:	2022      	movs	r0, #34	; 0x22
 8000abc:	f002 fffb 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	46020c00 	.word	0x46020c00

08000acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_I2C1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_I2C1_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b06:	480e      	ldr	r0, [pc, #56]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000b08:	f005 f880 	bl	8005c0c <HAL_I2C_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b12:	f000 febb 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000b1a:	f005 f906 	bl	8005d2a <HAL_I2CEx_ConfigAnalogFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b24:	f000 feb2 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_I2C1_Init+0x74>)
 8000b2c:	f005 f948 	bl	8005dc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fea9 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000414 	.word	0x20000414
 8000b44:	40005400 	.word	0x40005400
 8000b48:	00f07bff 	.word	0x00f07bff

08000b4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_I2C2_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_I2C2_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b88:	f005 f840 	bl	8005c0c <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f000 fe7b 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000b9a:	f005 f8c6 	bl	8005d2a <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 fe72 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2C2_Init+0x74>)
 8000bac:	f005 f908 	bl	8005dc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 fe69 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000468 	.word	0x20000468
 8000bc4:	40005800 	.word	0x40005800
 8000bc8:	00f07bff 	.word	0x00f07bff

08000bcc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_I2C3_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F07BFF;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bd8:	4a1b      	ldr	r2, [pc, #108]	; (8000c48 <MX_I2C3_Init+0x7c>)
 8000bda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c06:	480e      	ldr	r0, [pc, #56]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c08:	f005 f800 	bl	8005c0c <HAL_I2C_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c12:	f000 fe3b 	bl	800188c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c1a:	f005 f886 	bl	8005d2a <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f000 fe32 	bl	800188c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_I2C3_Init+0x74>)
 8000c2c:	f005 f8c8 	bl	8005dc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fe29 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004bc 	.word	0x200004bc
 8000c44:	46002800 	.word	0x46002800
 8000c48:	00f07bff 	.word	0x00f07bff

08000c4c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f005 f901 	bl	8005e58 <HAL_ICACHE_ConfigAssociativityMode>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c5c:	f000 fe16 	bl	800188c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c60:	f005 f91a 	bl	8005e98 <HAL_ICACHE_Enable>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c6a:	f000 fe0f 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_RTC_Init+0x94>)
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <MX_RTC_Init+0x98>)
 8000c90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_RTC_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_RTC_Init+0x94>)
 8000c9a:	227f      	movs	r2, #127	; 0x7f
 8000c9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_RTC_Init+0x94>)
 8000ca0:	22ff      	movs	r2, #255	; 0xff
 8000ca2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_RTC_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cbc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cca:	480f      	ldr	r0, [pc, #60]	; (8000d08 <MX_RTC_Init+0x94>)
 8000ccc:	f009 fc50 	bl	800a570 <HAL_RTC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000cd6:	f000 fdd9 	bl	800188c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_RTC_Init+0x94>)
 8000cf0:	f009 fde0 	bl	800a8b4 <HAL_RTCEx_PrivilegeModeSet>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000cfa:	f000 fdc7 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000600 	.word	0x20000600
 8000d0c:	46007800 	.word	0x46007800

08000d10 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000d14:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d16:	4a5d      	ldr	r2, [pc, #372]	; (8000e8c <MX_SAI1_Init+0x17c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d20:	4b59      	ldr	r3, [pc, #356]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000d26:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d2c:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d32:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d38:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d3e:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d4a:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d52:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <MX_SAI1_Init+0x180>)
 8000d54:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d62:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d70:	4b45      	ldr	r3, [pc, #276]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000da4:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000dc2:	4831      	ldr	r0, [pc, #196]	; (8000e88 <MX_SAI1_Init+0x178>)
 8000dc4:	f009 fda4 	bl	800a910 <HAL_SAI_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_SAI1_Init+0xc2>
  {
    Error_Handler();
 8000dce:	f000 fd5d 	bl	800188c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000dd4:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <MX_SAI1_Init+0x188>)
 8000dd6:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dde:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000de0:	2203      	movs	r2, #3
 8000de2:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000de6:	2240      	movs	r2, #64	; 0x40
 8000de8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e14:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_SAI1_Init+0x184>)
 8000e76:	f009 fd4b 	bl	800a910 <HAL_SAI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SAI1_Init+0x174>
  {
    Error_Handler();
 8000e80:	f000 fd04 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000630 	.word	0x20000630
 8000e8c:	40015404 	.word	0x40015404
 8000e90:	0002ee00 	.word	0x0002ee00
 8000e94:	200006c8 	.word	0x200006c8
 8000e98:	40015424 	.word	0x40015424

08000e9c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <MX_SDMMC1_SD_Init+0x44>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eb8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_SDMMC1_SD_Init+0x40>)
 8000ec8:	f009 ff40 	bl	800ad4c <HAL_SD_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000ed2:	f000 fcdb 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000760 	.word	0x20000760
 8000ee0:	420c8000 	.word	0x420c8000

08000ee4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ef4:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000ef6:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <MX_SPI1_Init+0xdc>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000efc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f08:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f16:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f1e:	4b27      	ldr	r3, [pc, #156]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f34:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f42:	2207      	movs	r2, #7
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000f84:	f00a ff50 	bl	800be28 <HAL_SPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000f8e:	f000 fc7d 	bl	800188c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000f96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f9a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_SPI1_Init+0xd8>)
 8000fa6:	f00b fb30 	bl	800c60a <HAL_SPIEx_SetConfigAutonomousMode>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000fb0:	f000 fc6c 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200007dc 	.word	0x200007dc
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	; (800109c <MX_SPI2_Init+0xd8>)
 8000fd6:	4a32      	ldr	r2, [pc, #200]	; (80010a0 <MX_SPI2_Init+0xdc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <MX_SPI2_Init+0xd8>)
 8000fdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_SPI2_Init+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_SPI2_Init+0xd8>)
 8000fea:	2207      	movs	r2, #7
 8000fec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_SPI2_Init+0xd8>)
 8000ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ff6:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_SPI2_Init+0xd8>)
 8000ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <MX_SPI2_Init+0xd8>)
 8001000:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001004:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_SPI2_Init+0xd8>)
 8001008:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_SPI2_Init+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_SPI2_Init+0xd8>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_SPI2_Init+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_SPI2_Init+0xd8>)
 8001022:	2207      	movs	r2, #7
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_SPI2_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_SPI2_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_SPI2_Init+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_SPI2_Init+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_SPI2_Init+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_SPI2_Init+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI2_Init+0xd8>)
 800104c:	2200      	movs	r2, #0
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_SPI2_Init+0xd8>)
 8001052:	2200      	movs	r2, #0
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI2_Init+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI2_Init+0xd8>)
 800105e:	2200      	movs	r2, #0
 8001060:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <MX_SPI2_Init+0xd8>)
 8001064:	f00a fee0 	bl	800be28 <HAL_SPI_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_SPI2_Init+0xae>
  {
    Error_Handler();
 800106e:	f000 fc0d 	bl	800188c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_SPI2_Init+0xe0>)
 8001078:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_SPI2_Init+0xd8>)
 8001084:	f00b fac1 	bl	800c60a <HAL_SPIEx_SetConfigAutonomousMode>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 800108e:	f000 fbfd 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000086c 	.word	0x2000086c
 80010a0:	40003800 	.word	0x40003800
 80010a4:	10010000 	.word	0x10010000

080010a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <MX_SPI3_Init+0xdc>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010ce:	2207      	movs	r2, #7
 80010d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010d2:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010ec:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80010f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_SPI3_Init+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001106:	2207      	movs	r2, #7
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_SPI3_Init+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_SPI3_Init+0xd8>)
 800111e:	2200      	movs	r2, #0
 8001120:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <MX_SPI3_Init+0xd8>)
 800112a:	2200      	movs	r2, #0
 800112c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001136:	2200      	movs	r2, #0
 8001138:	659a      	str	r2, [r3, #88]	; 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI3_Init+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	; (8001180 <MX_SPI3_Init+0xd8>)
 8001148:	f00a fe6e 	bl	800be28 <HAL_SPI_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_SPI3_Init+0xae>
  {
    Error_Handler();
 8001152:	f000 fb9b 	bl	800188c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800115a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_SPI3_Init+0xd8>)
 800116a:	f00b fa4e 	bl	800c60a <HAL_SPIEx_SetConfigAutonomousMode>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_SPI3_Init+0xd0>
  {
    Error_Handler();
 8001174:	f000 fb8a 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200008fc 	.word	0x200008fc
 8001184:	46002000 	.word	0x46002000

08001188 <MX_TAMP_RTC_Init>:
  * @brief TAMP Initialization Function
  * @param None
  * @retval None
  */
static void MX_TAMP_RTC_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	; 0x40
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TAMP_Init 0 */

  /* USER CODE END TAMP_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	619a      	str	r2, [r3, #24]
  RTC_TamperTypeDef sTamper = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2224      	movs	r2, #36	; 0x24
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00d fbdd 	bl	800e968 <memset>

  /* USER CODE END TAMP_Init 1 */

  /** Enable the RTC Active Tamper
  */
  privilegeState.tampPrivilegeFull = TAMP_PRIVILEGE_FULL_YES;
 80011ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.MonotonicCounterPrivilege = TAMP_MONOTONIC_CNT_PRIVILEGE_NO;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_TAMP_RTC_Init+0x88>)
 80011c0:	f009 fb78 	bl	800a8b4 <HAL_RTCEx_PrivilegeModeSet>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TAMP_RTC_Init+0x46>
  {
    Error_Handler();
 80011ca:	f000 fb5f 	bl	800188c <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 80011ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f2:	623b      	str	r3, [r7, #32]
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_TAMP_RTC_Init+0x88>)
 80011fa:	f009 fae7 	bl	800a7cc <HAL_RTCEx_SetTamper>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TAMP_RTC_Init+0x80>
  {
    Error_Handler();
 8001204:	f000 fb42 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TAMP_Init 2 */

  /* USER CODE END TAMP_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3740      	adds	r7, #64	; 0x40
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000600 	.word	0x20000600

08001214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_TIM3_Init+0xa0>)
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <MX_TIM3_Init+0xa4>)
 8001236:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM3_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM3_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4.294967295E9;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM3_Init+0xa0>)
 8001246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800124a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM3_Init+0xa0>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_TIM3_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001258:	4816      	ldr	r0, [pc, #88]	; (80012b4 <MX_TIM3_Init+0xa0>)
 800125a:	f00b fa17 	bl	800c68c <HAL_TIM_IC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001264:	f000 fb12 	bl	800188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <MX_TIM3_Init+0xa0>)
 8001278:	f00b fd42 	bl	800cd00 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001282:	f000 fb03 	bl	800188c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_TIM3_Init+0xa0>)
 800129e:	f00b fa4c 	bl	800c73a <HAL_TIM_IC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012a8:	f000 faf0 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000a7c 	.word	0x20000a7c
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_USART2_UART_Init+0x94>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USART2_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001306:	f00b fdbd 	bl	800ce84 <HAL_UART_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001310:	f000 fabc 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_USART2_UART_Init+0x90>)
 8001318:	f00c fa96 	bl	800d848 <HAL_UARTEx_SetTxFifoThreshold>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001322:	f000 fab3 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x90>)
 800132a:	f00c facb 	bl	800d8c4 <HAL_UARTEx_SetRxFifoThreshold>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001334:	f000 faaa 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_USART2_UART_Init+0x90>)
 800133a:	f00c fa4c 	bl	800d7d6 <HAL_UARTEx_DisableFifoMode>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 faa2 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000ac8 	.word	0x20000ac8
 8001350:	40004400 	.word	0x40004400

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <MX_USART3_UART_Init+0x98>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001380:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001384:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4812      	ldr	r0, [pc, #72]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 80013a0:	f00b fd70 	bl	800ce84 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80013aa:	f000 fa6f 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 80013b2:	f00c fa49 	bl	800d848 <HAL_UARTEx_SetTxFifoThreshold>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 80013bc:	f000 fa66 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 80013c4:	f00c fa7e 	bl	800d8c4 <HAL_UARTEx_SetRxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f000 fa5d 	bl	800188c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART3_UART_Init+0x94>)
 80013d4:	f00c f9ff 	bl	800d7d6 <HAL_UARTEx_DisableFifoMode>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80013de:	f000 fa55 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000b5c 	.word	0x20000b5c
 80013ec:	40004800 	.word	0x40004800

080013f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_USB_OTG_FS_PCD_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80013fc:	2206      	movs	r2, #6
 80013fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001402:	2202      	movs	r2, #2
 8001404:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001408:	2201      	movs	r2, #1
 800140a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800142c:	f004 fee0 	bl	80061f0 <HAL_PCD_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001436:	f000 fa29 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000bf0 	.word	0x20000bf0
 8001444:	42040000 	.word	0x42040000

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145e:	4bbf      	ldr	r3, [pc, #764]	; (800175c <MX_GPIO_Init+0x314>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001464:	4abd      	ldr	r2, [pc, #756]	; (800175c <MX_GPIO_Init+0x314>)
 8001466:	f043 0310 	orr.w	r3, r3, #16
 800146a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800146e:	4bbb      	ldr	r3, [pc, #748]	; (800175c <MX_GPIO_Init+0x314>)
 8001470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	623b      	str	r3, [r7, #32]
 800147a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800147c:	4bb7      	ldr	r3, [pc, #732]	; (800175c <MX_GPIO_Init+0x314>)
 800147e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001482:	4ab6      	ldr	r2, [pc, #728]	; (800175c <MX_GPIO_Init+0x314>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800148c:	4bb3      	ldr	r3, [pc, #716]	; (800175c <MX_GPIO_Init+0x314>)
 800148e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149a:	4bb0      	ldr	r3, [pc, #704]	; (800175c <MX_GPIO_Init+0x314>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a0:	4aae      	ldr	r2, [pc, #696]	; (800175c <MX_GPIO_Init+0x314>)
 80014a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014aa:	4bac      	ldr	r3, [pc, #688]	; (800175c <MX_GPIO_Init+0x314>)
 80014ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4ba8      	ldr	r3, [pc, #672]	; (800175c <MX_GPIO_Init+0x314>)
 80014ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014be:	4aa7      	ldr	r2, [pc, #668]	; (800175c <MX_GPIO_Init+0x314>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014c8:	4ba4      	ldr	r3, [pc, #656]	; (800175c <MX_GPIO_Init+0x314>)
 80014ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4ba1      	ldr	r3, [pc, #644]	; (800175c <MX_GPIO_Init+0x314>)
 80014d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014dc:	4a9f      	ldr	r2, [pc, #636]	; (800175c <MX_GPIO_Init+0x314>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <MX_GPIO_Init+0x314>)
 80014e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f4:	4b99      	ldr	r3, [pc, #612]	; (800175c <MX_GPIO_Init+0x314>)
 80014f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014fa:	4a98      	ldr	r2, [pc, #608]	; (800175c <MX_GPIO_Init+0x314>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001504:	4b95      	ldr	r3, [pc, #596]	; (800175c <MX_GPIO_Init+0x314>)
 8001506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b92      	ldr	r3, [pc, #584]	; (800175c <MX_GPIO_Init+0x314>)
 8001514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001518:	4a90      	ldr	r2, [pc, #576]	; (800175c <MX_GPIO_Init+0x314>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001522:	4b8e      	ldr	r3, [pc, #568]	; (800175c <MX_GPIO_Init+0x314>)
 8001524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <MX_GPIO_Init+0x314>)
 8001532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001536:	4a89      	ldr	r2, [pc, #548]	; (800175c <MX_GPIO_Init+0x314>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001540:	4b86      	ldr	r3, [pc, #536]	; (800175c <MX_GPIO_Init+0x314>)
 8001542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800154e:	4b83      	ldr	r3, [pc, #524]	; (800175c <MX_GPIO_Init+0x314>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001554:	4a81      	ldr	r2, [pc, #516]	; (800175c <MX_GPIO_Init+0x314>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800155e:	4b7f      	ldr	r3, [pc, #508]	; (800175c <MX_GPIO_Init+0x314>)
 8001560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8001572:	487b      	ldr	r0, [pc, #492]	; (8001760 <MX_GPIO_Init+0x318>)
 8001574:	f004 faf6 	bl	8005b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, EX_SPI_NSS_Pin|CS_ICLX_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2181      	movs	r1, #129	; 0x81
 800157c:	4879      	ldr	r0, [pc, #484]	; (8001764 <MX_GPIO_Init+0x31c>)
 800157e:	f004 faf1 	bl	8005b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	4878      	ldr	r0, [pc, #480]	; (8001768 <MX_GPIO_Init+0x320>)
 8001588:	f004 faec 	bl	8005b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	4876      	ldr	r0, [pc, #472]	; (800176c <MX_GPIO_Init+0x324>)
 8001594:	f004 fae6 	bl	8005b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_HTS_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159c:	4b74      	ldr	r3, [pc, #464]	; (8001770 <MX_GPIO_Init+0x328>)
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT_HTS_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	486e      	ldr	r0, [pc, #440]	; (8001764 <MX_GPIO_Init+0x31c>)
 80015ac:	f004 f902 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_FLOW_Pin SD_DETECT_Pin INT_EX_Pin INT_EXG5_Pin */
  GPIO_InitStruct.Pin = WIFI_FLOW_Pin|SD_DETECT_Pin|INT_EX_Pin|INT_EXG5_Pin;
 80015b0:	f248 0362 	movw	r3, #32866	; 0x8062
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	486b      	ldr	r0, [pc, #428]	; (8001774 <MX_GPIO_Init+0x32c>)
 80015c6:	f004 f8f5 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DHCX_Pin CS_DLPC_Pin WIFI_CS_Pin */
  GPIO_InitStruct.Pin = CS_DHCX_Pin|CS_DLPC_Pin|WIFI_CS_Pin;
 80015ca:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	485f      	ldr	r0, [pc, #380]	; (8001760 <MX_GPIO_Init+0x318>)
 80015e4:	f004 f8e6 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCDC_2_EN_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = DCDC_2_EN_Pin|SPI2_MISO_p2_Pin;
 80015e8:	2324      	movs	r3, #36	; 0x24
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ec:	2303      	movs	r3, #3
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	485a      	ldr	r0, [pc, #360]	; (8001764 <MX_GPIO_Init+0x31c>)
 80015fc:	f004 f8da 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : C_EN_Pin INT_EXD15_Pin BLE_RST_Pin WIFI_BOOT_Pin */
  GPIO_InitStruct.Pin = C_EN_Pin|INT_EXD15_Pin|BLE_RST_Pin|WIFI_BOOT_Pin;
 8001600:	f24a 2301 	movw	r3, #41473	; 0xa201
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4858      	ldr	r0, [pc, #352]	; (8001778 <MX_GPIO_Init+0x330>)
 8001616:	f004 f8cd 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_SPI_NSS_Pin CS_ICLX_Pin */
  GPIO_InitStruct.Pin = EX_SPI_NSS_Pin|CS_ICLX_Pin;
 800161a:	2381      	movs	r3, #129	; 0x81
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	484c      	ldr	r0, [pc, #304]	; (8001764 <MX_GPIO_Init+0x31c>)
 8001632:	f004 f8bf 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin BOOT0_Pin LED2_Pin STSAFE_RESET_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|BOOT0_Pin|LED2_Pin|STSAFE_RESET_Pin;
 8001636:	f241 6308 	movw	r3, #5640	; 0x1608
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4845      	ldr	r0, [pc, #276]	; (8001760 <MX_GPIO_Init+0x318>)
 800164c:	f004 f8b2 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_SPI_CS_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8001650:	2302      	movs	r3, #2
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4840      	ldr	r0, [pc, #256]	; (8001768 <MX_GPIO_Init+0x320>)
 8001668:	f004 f8a4 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_BUTTON_Pin WIFI_NOTIFY_Pin */
  GPIO_InitStruct.Pin = USR_BUTTON_Pin|WIFI_NOTIFY_Pin;
 800166c:	2381      	movs	r3, #129	; 0x81
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001670:	4b3f      	ldr	r3, [pc, #252]	; (8001770 <MX_GPIO_Init+0x328>)
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	483a      	ldr	r0, [pc, #232]	; (8001768 <MX_GPIO_Init+0x320>)
 8001680:	f004 f898 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DHCX_Pin NFC_INT_Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin|NFC_INT_Pin;
 8001684:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <MX_GPIO_Init+0x328>)
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4838      	ldr	r0, [pc, #224]	; (800177c <MX_GPIO_Init+0x334>)
 800169a:	f004 f88b 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO2_EX_Pin BLE_TEST9_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = GPIO2_EX_Pin|BLE_TEST9_Pin|BLE_TEST8_Pin;
 800169e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a4:	2303      	movs	r3, #3
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <MX_GPIO_Init+0x324>)
 80016b4:	f004 f87e 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_DLPC_Pin INT2_DLPC_Pin INT_MAG_Pin INT_STT_Pin
                           INT1_ICLX_Pin INT2_DHCX_Pin BLE_INT_Pin INT2_ICLX_Pin
                           INT1_DWB_Pin */
  GPIO_InitStruct.Pin = INT1_DLPC_Pin|INT2_DLPC_Pin|INT_MAG_Pin|INT_STT_Pin
 80016b8:	f64c 233e 	movw	r3, #51774	; 0xca3e
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ICLX_Pin|INT2_DHCX_Pin|BLE_INT_Pin|INT2_ICLX_Pin
                          |INT1_DWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <MX_GPIO_Init+0x328>)
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4827      	ldr	r0, [pc, #156]	; (800176c <MX_GPIO_Init+0x324>)
 80016ce:	f004 f871 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	2303      	movs	r3, #3
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4826      	ldr	r0, [pc, #152]	; (8001780 <MX_GPIO_Init+0x338>)
 80016e8:	f004 f864 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_ADC_BATT_Pin ADC_EX_Pin */
  GPIO_InitStruct.Pin = uC_ADC_BATT_Pin|ADC_EX_Pin;
 80016ec:	230c      	movs	r3, #12
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4821      	ldr	r0, [pc, #132]	; (8001784 <MX_GPIO_Init+0x33c>)
 8001700:	f004 f858 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DWB_Pin */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	4813      	ldr	r0, [pc, #76]	; (800176c <MX_GPIO_Init+0x324>)
 800171e:	f004 f849 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_GPIO_Init+0x328>)
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4810      	ldr	r0, [pc, #64]	; (8001778 <MX_GPIO_Init+0x330>)
 8001738:	f004 f83c 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin GPIO1_EX_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|GPIO1_EX_Pin;
 800173c:	f248 0302 	movw	r3, #32770	; 0x8002
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001742:	2303      	movs	r3, #3
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <MX_GPIO_Init+0x334>)
 8001752:	f004 f82f 	bl	80057b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDO_EN_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = LDO_EN_Pin|WIFI_EN_Pin;
 8001756:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800175a:	e015      	b.n	8001788 <MX_GPIO_Init+0x340>
 800175c:	46020c00 	.word	0x46020c00
 8001760:	42021c00 	.word	0x42021c00
 8001764:	42022000 	.word	0x42022000
 8001768:	42021000 	.word	0x42021000
 800176c:	42021400 	.word	0x42021400
 8001770:	10110000 	.word	0x10110000
 8001774:	42021800 	.word	0x42021800
 8001778:	42020c00 	.word	0x42020c00
 800177c:	42020400 	.word	0x42020400
 8001780:	42020000 	.word	0x42020000
 8001784:	42020800 	.word	0x42020800
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	2303      	movs	r3, #3
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	483b      	ldr	r0, [pc, #236]	; (8001888 <MX_GPIO_Init+0x440>)
 800179a:	f004 f80b 	bl	80057b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2107      	movs	r1, #7
 80017a2:	200b      	movs	r0, #11
 80017a4:	f002 f96d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a8:	200b      	movs	r0, #11
 80017aa:	f002 f984 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2107      	movs	r1, #7
 80017b2:	200c      	movs	r0, #12
 80017b4:	f002 f965 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017b8:	200c      	movs	r0, #12
 80017ba:	f002 f97c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2107      	movs	r1, #7
 80017c2:	200d      	movs	r0, #13
 80017c4:	f002 f95d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017c8:	200d      	movs	r0, #13
 80017ca:	f002 f974 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2107      	movs	r1, #7
 80017d2:	200e      	movs	r0, #14
 80017d4:	f002 f955 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80017d8:	200e      	movs	r0, #14
 80017da:	f002 f96c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 7, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2107      	movs	r1, #7
 80017e2:	200f      	movs	r0, #15
 80017e4:	f002 f94d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017e8:	200f      	movs	r0, #15
 80017ea:	f002 f964 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI5_IRQn, 7, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2107      	movs	r1, #7
 80017f2:	2010      	movs	r0, #16
 80017f4:	f002 f945 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI5_IRQn);
 80017f8:	2010      	movs	r0, #16
 80017fa:	f002 f95c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2107      	movs	r1, #7
 8001802:	2011      	movs	r0, #17
 8001804:	f002 f93d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8001808:	2011      	movs	r0, #17
 800180a:	f002 f954 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 7, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2107      	movs	r1, #7
 8001812:	2012      	movs	r0, #18
 8001814:	f002 f935 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 8001818:	2012      	movs	r0, #18
 800181a:	f002 f94c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI8_IRQn, 7, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2107      	movs	r1, #7
 8001822:	2013      	movs	r0, #19
 8001824:	f002 f92d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 8001828:	2013      	movs	r0, #19
 800182a:	f002 f944 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_IRQn, 7, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2107      	movs	r1, #7
 8001832:	2014      	movs	r0, #20
 8001834:	f002 f925 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_IRQn);
 8001838:	2014      	movs	r0, #20
 800183a:	f002 f93c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 7, 0);
 800183e:	2200      	movs	r2, #0
 8001840:	2107      	movs	r1, #7
 8001842:	2015      	movs	r0, #21
 8001844:	f002 f91d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8001848:	2015      	movs	r0, #21
 800184a:	f002 f934 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 7, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2107      	movs	r1, #7
 8001852:	2016      	movs	r0, #22
 8001854:	f002 f915 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8001858:	2016      	movs	r0, #22
 800185a:	f002 f92c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 7, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2107      	movs	r1, #7
 8001862:	2018      	movs	r0, #24
 8001864:	f002 f90d 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001868:	2018      	movs	r0, #24
 800186a:	f002 f924 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI14_IRQn, 7, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2107      	movs	r1, #7
 8001872:	2019      	movs	r0, #25
 8001874:	f002 f905 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
 8001878:	2019      	movs	r0, #25
 800187a:	f002 f91c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	; 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	42021000 	.word	0x42021000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_MspInit+0x30>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_MspInit+0x30>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_MspInit+0x30>)
 80018b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	46020c00 	.word	0x46020c00

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_ADC_MspInit+0x80>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d129      	bne.n	8001942 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_ADC_MspInit+0x84>)
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_ADC_MspInit+0x84>)
 80018f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_ADC_MspInit+0x84>)
 8001900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_ADC_MspInit+0x84>)
 800190e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_ADC_MspInit+0x84>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_ADC_MspInit+0x84>)
 800191e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192a:	2303      	movs	r3, #3
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800192e:	2303      	movs	r3, #3
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_ADC_MspInit+0x88>)
 800193e:	f003 ff39 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	42028000 	.word	0x42028000
 8001950:	46020c00 	.word	0x46020c00
 8001954:	42020800 	.word	0x42020800

08001958 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0a6      	sub	sp, #152	; 0x98
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a57      	ldr	r2, [pc, #348]	; (8001ad4 <HAL_MDF_MspInit+0x17c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	f040 80ba 	bne.w	8001af0 <HAL_MDF_MspInit+0x198>
  {
  /* USER CODE BEGIN ADF1_MspInit 0 */

  /* USER CODE END ADF1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 8001984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800198c:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 800199c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_MDF_MspInit+0x180>)
 80019ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80019b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019dc:	4619      	mov	r1, r3
 80019de:	483f      	ldr	r0, [pc, #252]	; (8001adc <HAL_MDF_MspInit+0x184>)
 80019e0:	f003 fee8 	bl	80057b4 <HAL_GPIO_Init>

    /* ADF1 DMA Init */
    /* GPDMA1_REQUEST_ADF1_FLT0 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80019e4:	2321      	movs	r3, #33	; 0x21
 80019e6:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADF1_FLT0;
 80019e8:	2362      	movs	r3, #98	; 0x62
 80019ea:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 80019f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80019fe:	2301      	movs	r3, #1
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001a16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001a1a:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001a20:	2300      	movs	r3, #0
 8001a22:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	492b      	ldr	r1, [pc, #172]	; (8001ae0 <HAL_MDF_MspInit+0x188>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f901 	bl	8004c3c <HAL_DMAEx_List_BuildNode>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_MDF_MspInit+0xec>
    {
      Error_Handler();
 8001a40:	f7ff ff24 	bl	800188c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_MDF_MspInit+0x188>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <HAL_MDF_MspInit+0x18c>)
 8001a4a:	f003 f90d 	bl	8004c68 <HAL_DMAEx_List_InsertNode>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_MDF_MspInit+0x100>
    {
      Error_Handler();
 8001a54:	f7ff ff1a 	bl	800188c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8001a58:	4822      	ldr	r0, [pc, #136]	; (8001ae4 <HAL_MDF_MspInit+0x18c>)
 8001a5a:	f003 f9ce 	bl	8004dfa <HAL_DMAEx_List_SetCircularMode>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_MDF_MspInit+0x110>
    {
      Error_Handler();
 8001a64:	f7ff ff12 	bl	800188c <Error_Handler>
    }

    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a6a:	4a20      	ldr	r2, [pc, #128]	; (8001aec <HAL_MDF_MspInit+0x194>)
 8001a6c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a70:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a84:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a8c:	2281      	movs	r2, #129	; 0x81
 8001a8e:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001a90:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001a92:	f002 ffa5 	bl	80049e0 <HAL_DMAEx_List_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_MDF_MspInit+0x148>
    {
      Error_Handler();
 8001a9c:	f7ff fef6 	bl	800188c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 8001aa0:	4910      	ldr	r1, [pc, #64]	; (8001ae4 <HAL_MDF_MspInit+0x18c>)
 8001aa2:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001aa4:	f003 fa0a 	bl	8004ebc <HAL_DMAEx_List_LinkQ>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_MDF_MspInit+0x15a>
    {
      Error_Handler();
 8001aae:	f7ff feed 	bl	800188c <Error_Handler>
    }

    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel5);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <HAL_MDF_MspInit+0x190>)
 8001ac2:	f002 fcd0 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80d9 	beq.w	8001c80 <HAL_MDF_MspInit+0x328>
    {
      Error_Handler();
 8001ace:	f7ff fedd 	bl	800188c <Error_Handler>
  /* USER CODE BEGIN MDF1_MspInit 1 */

  /* USER CODE END MDF1_MspInit 1 */
  }

}
 8001ad2:	e0d5      	b.n	8001c80 <HAL_MDF_MspInit+0x328>
 8001ad4:	46024080 	.word	0x46024080
 8001ad8:	46020c00 	.word	0x46020c00
 8001adc:	42021000 	.word	0x42021000
 8001ae0:	20000298 	.word	0x20000298
 8001ae4:	200002bc 	.word	0x200002bc
 8001ae8:	200002d4 	.word	0x200002d4
 8001aec:	400202d0 	.word	0x400202d0
  else if(IS_MDF_INSTANCE(hmdf->Instance))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a64      	ldr	r2, [pc, #400]	; (8001c88 <HAL_MDF_MspInit+0x330>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_MDF_MspInit+0x1d6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_MDF_MspInit+0x334>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d014      	beq.n	8001b2e <HAL_MDF_MspInit+0x1d6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a61      	ldr	r2, [pc, #388]	; (8001c90 <HAL_MDF_MspInit+0x338>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00f      	beq.n	8001b2e <HAL_MDF_MspInit+0x1d6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a60      	ldr	r2, [pc, #384]	; (8001c94 <HAL_MDF_MspInit+0x33c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00a      	beq.n	8001b2e <HAL_MDF_MspInit+0x1d6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5e      	ldr	r2, [pc, #376]	; (8001c98 <HAL_MDF_MspInit+0x340>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d005      	beq.n	8001b2e <HAL_MDF_MspInit+0x1d6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_MDF_MspInit+0x344>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 80a9 	bne.w	8001c80 <HAL_MDF_MspInit+0x328>
    __HAL_RCC_MDF1_CLK_ENABLE();
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b34:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b36:	f043 0308 	orr.w	r3, r3, #8
 8001b3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b3e:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b52:	4a53      	ldr	r2, [pc, #332]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <HAL_MDF_MspInit+0x348>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO3_EX_Pin;
 8001b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001b84:	2306      	movs	r3, #6
 8001b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIO3_EX_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4844      	ldr	r0, [pc, #272]	; (8001ca4 <HAL_MDF_MspInit+0x34c>)
 8001b92:	f003 fe0f 	bl	80057b4 <HAL_GPIO_Init>
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001b96:	2321      	movs	r3, #33	; 0x21
 8001b98:	61bb      	str	r3, [r7, #24]
    NodeConfig.Init.Request = GPDMA1_REQUEST_MDF1_FLT0;
 8001b9a:	235c      	movs	r3, #92	; 0x5c
 8001b9c:	61fb      	str	r3, [r7, #28]
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001baa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
    NodeConfig.Init.SrcBurstLength = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    NodeConfig.Init.DestBurstLength = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	643b      	str	r3, [r7, #64]	; 0x40
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
    NodeConfig.Init.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001bc6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	653b      	str	r3, [r7, #80]	; 0x50
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_UNPACK;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel4) != HAL_OK)
 8001bde:	f107 0318 	add.w	r3, r7, #24
 8001be2:	4931      	ldr	r1, [pc, #196]	; (8001ca8 <HAL_MDF_MspInit+0x350>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 f829 	bl	8004c3c <HAL_DMAEx_List_BuildNode>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_MDF_MspInit+0x29c>
      Error_Handler();
 8001bf0:	f7ff fe4c 	bl	800188c <Error_Handler>
    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel4, NULL, &Node_GPDMA1_Channel4) != HAL_OK)
 8001bf4:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_MDF_MspInit+0x350>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	482c      	ldr	r0, [pc, #176]	; (8001cac <HAL_MDF_MspInit+0x354>)
 8001bfa:	f003 f835 	bl	8004c68 <HAL_DMAEx_List_InsertNode>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_MDF_MspInit+0x2b0>
      Error_Handler();
 8001c04:	f7ff fe42 	bl	800188c <Error_Handler>
    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel4) != HAL_OK)
 8001c08:	4828      	ldr	r0, [pc, #160]	; (8001cac <HAL_MDF_MspInit+0x354>)
 8001c0a:	f003 f8f6 	bl	8004dfa <HAL_DMAEx_List_SetCircularMode>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_MDF_MspInit+0x2c0>
      Error_Handler();
 8001c14:	f7ff fe3a 	bl	800188c <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_MDF_MspInit+0x35c>)
 8001c1c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c20:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel4.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel4.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel4.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel4.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c3c:	2281      	movs	r2, #129	; 0x81
 8001c3e:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 8001c40:	481b      	ldr	r0, [pc, #108]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c42:	f002 fecd 	bl	80049e0 <HAL_DMAEx_List_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_MDF_MspInit+0x2f8>
      Error_Handler();
 8001c4c:	f7ff fe1e 	bl	800188c <Error_Handler>
    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel4, &List_GPDMA1_Channel4) != HAL_OK)
 8001c50:	4916      	ldr	r1, [pc, #88]	; (8001cac <HAL_MDF_MspInit+0x354>)
 8001c52:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c54:	f003 f932 	bl	8004ebc <HAL_DMAEx_List_LinkQ>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_MDF_MspInit+0x30a>
      Error_Handler();
 8001c5e:	f7ff fe15 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(hmdf, hdma, handle_GPDMA1_Channel4);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c6e:	2110      	movs	r1, #16
 8001c70:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <HAL_MDF_MspInit+0x358>)
 8001c72:	f002 fbf8 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_MDF_MspInit+0x328>
      Error_Handler();
 8001c7c:	f7ff fe06 	bl	800188c <Error_Handler>
}
 8001c80:	bf00      	nop
 8001c82:	3798      	adds	r7, #152	; 0x98
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40025080 	.word	0x40025080
 8001c8c:	40025100 	.word	0x40025100
 8001c90:	40025180 	.word	0x40025180
 8001c94:	40025200 	.word	0x40025200
 8001c98:	40025280 	.word	0x40025280
 8001c9c:	40025300 	.word	0x40025300
 8001ca0:	46020c00 	.word	0x46020c00
 8001ca4:	42021400 	.word	0x42021400
 8001ca8:	2000034c 	.word	0x2000034c
 8001cac:	20000370 	.word	0x20000370
 8001cb0:	20000388 	.word	0x20000388
 8001cb4:	40020250 	.word	0x40020250

08001cb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0bc      	sub	sp, #240	; 0xf0
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	22c8      	movs	r2, #200	; 0xc8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f00c fe45 	bl	800e968 <memset>
  if(hdac->Instance==DAC1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <HAL_DAC_MspInit+0xbc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d140      	bne.n	8001d6a <HAL_DAC_MspInit+0xb2>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DAC1;
 8001ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8001cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 ff2b 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_DAC_MspInit+0x58>
    {
      Error_Handler();
 8001d0c:	f7ff fdbe 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d34:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_DAC_MspInit+0xc0>)
 8001d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_DAC_MspInit+0xc4>)
 8001d66:	f003 fd25 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	37f0      	adds	r7, #240	; 0xf0
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	46021800 	.word	0x46021800
 8001d78:	46020c00 	.word	0x46020c00
 8001d7c:	42020000 	.word	0x42020000

08001d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0c2      	sub	sp, #264	; 0x108
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d8e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da4:	22c8      	movs	r2, #200	; 0xc8
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f00c fddd 	bl	800e968 <memset>
  if(hi2c->Instance==I2C1)
 8001dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4aaa      	ldr	r2, [pc, #680]	; (8002064 <HAL_I2C_MspInit+0x2e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d147      	bne.n	8001e50 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dc0:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 fec0 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001de2:	f7ff fd53 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dec:	4a9e      	ldr	r2, [pc, #632]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001df6:	4b9c      	ldr	r3, [pc, #624]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001e04:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e0c:	2312      	movs	r3, #18
 8001e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4890      	ldr	r0, [pc, #576]	; (800206c <HAL_I2C_MspInit+0x2ec>)
 8001e2c:	f003 fcc2 	bl	80057b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e30:	4b8d      	ldr	r3, [pc, #564]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e36:	4a8c      	ldr	r2, [pc, #560]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001e40:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4a:	623b      	str	r3, [r7, #32]
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e4e:	e16d      	b.n	800212c <HAL_I2C_MspInit+0x3ac>
  else if(hi2c->Instance==I2C2)
 8001e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a84      	ldr	r2, [pc, #528]	; (8002070 <HAL_I2C_MspInit+0x2f0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	f040 8114 	bne.w	800208c <HAL_I2C_MspInit+0x30c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e64:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f005 fe6e 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 8001e86:	f7ff fd01 	bl	800188c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e8a:	4b77      	ldr	r3, [pc, #476]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e90:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e92:	f043 0320 	orr.w	r3, r3, #32
 8001e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ecc:	2312      	movs	r3, #18
 8001ece:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4862      	ldr	r0, [pc, #392]	; (8002074 <HAL_I2C_MspInit+0x2f4>)
 8001eec:	f003 fc62 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef6:	2312      	movs	r3, #18
 8001ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f0e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4858      	ldr	r0, [pc, #352]	; (8002078 <HAL_I2C_MspInit+0x2f8>)
 8001f16:	f003 fc4d 	bl	80057b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f20:	4a51      	ldr	r2, [pc, #324]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001f2a:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_I2C_MspInit+0x2e8>)
 8001f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697b      	ldr	r3, [r7, #20]
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f3a:	4a51      	ldr	r2, [pc, #324]	; (8002080 <HAL_I2C_MspInit+0x300>)
 8001f3c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_I2C2_TX;
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f40:	2210      	movs	r2, #16
 8001f42:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001f44:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001f52:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f54:	2208      	movs	r2, #8
 8001f56:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_FIXED;
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001f70:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001f82:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001f8e:	483b      	ldr	r0, [pc, #236]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001f90:	f001 ff94 	bl	8003ebc <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_MspInit+0x21e>
      Error_Handler();
 8001f9a:	f7ff fc77 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmatx, handle_GPDMA1_Channel3);
 8001f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
 8001fac:	4a33      	ldr	r2, [pc, #204]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fba:	2110      	movs	r1, #16
 8001fbc:	482f      	ldr	r0, [pc, #188]	; (800207c <HAL_I2C_MspInit+0x2fc>)
 8001fbe:	f002 fa52 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_MspInit+0x24c>
      Error_Handler();
 8001fc8:	f7ff fc60 	bl	800188c <Error_Handler>
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fce:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <HAL_I2C_MspInit+0x308>)
 8001fd0:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_I2C2_RX;
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001fec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ff0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002006:	2201      	movs	r2, #1
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_I2C_MspInit+0x304>)
 800200c:	2201      	movs	r2, #1
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_I2C_MspInit+0x304>)
 800201e:	2200      	movs	r2, #0
 8002020:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002022:	4818      	ldr	r0, [pc, #96]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002024:	f001 ff4a 	bl	8003ebc <HAL_DMA_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_MspInit+0x2b2>
      Error_Handler();
 800202e:	f7ff fc2d 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(hi2c, hdmarx, handle_GPDMA1_Channel2);
 8002032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_I2C_MspInit+0x304>)
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800204e:	2110      	movs	r1, #16
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <HAL_I2C_MspInit+0x304>)
 8002052:	f002 fa08 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d067      	beq.n	800212c <HAL_I2C_MspInit+0x3ac>
      Error_Handler();
 800205c:	f7ff fc16 	bl	800188c <Error_Handler>
}
 8002060:	e064      	b.n	800212c <HAL_I2C_MspInit+0x3ac>
 8002062:	bf00      	nop
 8002064:	40005400 	.word	0x40005400
 8002068:	46020c00 	.word	0x46020c00
 800206c:	42020400 	.word	0x42020400
 8002070:	40005800 	.word	0x40005800
 8002074:	42021400 	.word	0x42021400
 8002078:	42021c00 	.word	0x42021c00
 800207c:	20000510 	.word	0x20000510
 8002080:	400201d0 	.word	0x400201d0
 8002084:	20000588 	.word	0x20000588
 8002088:	40020150 	.word	0x40020150
  else if(hi2c->Instance==I2C3)
 800208c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <HAL_I2C_MspInit+0x3b8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d146      	bne.n	800212c <HAL_I2C_MspInit+0x3ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b4:	4618      	mov	r0, r3
 80020b6:	f005 fd51 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_I2C_MspInit+0x344>
      Error_Handler();
 80020c0:	f7ff fbe4 	bl	800188c <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 80020c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ca:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 80020cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 80020d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80020e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ea:	2312      	movs	r3, #18
 80020ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020fc:	2304      	movs	r3, #4
 80020fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002102:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002106:	4619      	mov	r1, r3
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <HAL_I2C_MspInit+0x3c0>)
 800210a:	f003 fb53 	bl	80057b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 8002110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002114:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 8002116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_I2C_MspInit+0x3bc>)
 8002120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	bf00      	nop
 800212e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	46002800 	.word	0x46002800
 800213c:	46020c00 	.word	0x46020c00
 8002140:	42021800 	.word	0x42021800

08002144 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0b6      	sub	sp, #216	; 0xd8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	22c8      	movs	r2, #200	; 0xc8
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f00c fc07 	bl	800e968 <memset>
  if(hrtc->Instance==RTC)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_RTC_MspInit+0x80>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d12a      	bne.n	80021ba <HAL_RTC_MspInit+0x76>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002164:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f005 fced 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002188:	f7ff fb80 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RTC_MspInit+0x84>)
 800218e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002192:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_RTC_MspInit+0x84>)
 8002194:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002198:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_RTC_MspInit+0x84>)
 800219e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_RTC_MspInit+0x84>)
 80021a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021a8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RTC_MspInit+0x84>)
 80021ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021ba:	bf00      	nop
 80021bc:	37d8      	adds	r7, #216	; 0xd8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	46007800 	.word	0x46007800
 80021c8:	46020c00 	.word	0x46020c00

080021cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0be      	sub	sp, #248	; 0xf8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021e4:	f107 0318 	add.w	r3, r7, #24
 80021e8:	22c8      	movs	r2, #200	; 0xc8
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00c fbbb 	bl	800e968 <memset>
  if(hsd->Instance==SDMMC1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3a      	ldr	r2, [pc, #232]	; (80022e0 <HAL_SD_MspInit+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d16d      	bne.n	80022d8 <HAL_SD_MspInit+0x10c>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_CLK48;
 80021fc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    PeriphClkInit.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_CLK48;
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002214:	f107 0318 	add.w	r3, r7, #24
 8002218:	4618      	mov	r0, r3
 800221a:	f005 fc9f 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_SD_MspInit+0x5c>
    {
      Error_Handler();
 8002224:	f7ff fb32 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_SD_MspInit+0x118>)
 800222a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_SD_MspInit+0x118>)
 8002230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002234:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_SD_MspInit+0x118>)
 800223a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800223e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <HAL_SD_MspInit+0x118>)
 8002248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224c:	4a25      	ldr	r2, [pc, #148]	; (80022e4 <HAL_SD_MspInit+0x118>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_SD_MspInit+0x118>)
 8002258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_SD_MspInit+0x118>)
 8002266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_SD_MspInit+0x118>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_SD_MspInit+0x118>)
 8002276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_9
 8002282:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800229c:	230c      	movs	r3, #12
 800229e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022a6:	4619      	mov	r1, r3
 80022a8:	480f      	ldr	r0, [pc, #60]	; (80022e8 <HAL_SD_MspInit+0x11c>)
 80022aa:	f003 fa83 	bl	80057b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ae:	2304      	movs	r3, #4
 80022b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022c6:	230c      	movs	r3, #12
 80022c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <HAL_SD_MspInit+0x120>)
 80022d4:	f003 fa6e 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	37f8      	adds	r7, #248	; 0xf8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	420c8000 	.word	0x420c8000
 80022e4:	46020c00 	.word	0x46020c00
 80022e8:	42020800 	.word	0x42020800
 80022ec:	42020c00 	.word	0x42020c00

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0c4      	sub	sp, #272	; 0x110
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002314:	22c8      	movs	r2, #200	; 0xc8
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f00c fb25 	bl	800e968 <memset>
  if(hspi->Instance==SPI1)
 800231e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4aaf      	ldr	r2, [pc, #700]	; (80025e8 <HAL_SPI_MspInit+0x2f8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d147      	bne.n	80023c0 <HAL_SPI_MspInit+0xd0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002330:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800233c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002348:	4618      	mov	r0, r3
 800234a:	f005 fc07 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002354:	f7ff fa9a 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002358:	4ba4      	ldr	r3, [pc, #656]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800235a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800235e:	4aa3      	ldr	r2, [pc, #652]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002364:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002368:	4ba0      	ldr	r3, [pc, #640]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800236a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800236e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002376:	4b9d      	ldr	r3, [pc, #628]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800237c:	4a9b      	ldr	r2, [pc, #620]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800237e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002382:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002386:	4b99      	ldr	r3, [pc, #612]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 8002394:	231c      	movs	r3, #28
 8002396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ac:	2305      	movs	r3, #5
 80023ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023b6:	4619      	mov	r1, r3
 80023b8:	488d      	ldr	r0, [pc, #564]	; (80025f0 <HAL_SPI_MspInit+0x300>)
 80023ba:	f003 f9fb 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023be:	e1d1      	b.n	8002764 <HAL_SPI_MspInit+0x474>
  else if(hspi->Instance==SPI2)
 80023c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a89      	ldr	r2, [pc, #548]	; (80025f4 <HAL_SPI_MspInit+0x304>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	f040 811e 	bne.w	8002610 <HAL_SPI_MspInit+0x320>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80023d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ea:	4618      	mov	r0, r3
 80023ec:	f005 fbb6 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_SPI_MspInit+0x10a>
      Error_Handler();
 80023f6:	f7ff fa49 	bl	800188c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023fa:	4b7c      	ldr	r3, [pc, #496]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 80023fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002400:	4a7a      	ldr	r2, [pc, #488]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002406:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800240a:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800240c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800241a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241e:	4a73      	ldr	r2, [pc, #460]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002424:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002428:	4b70      	ldr	r3, [pc, #448]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800242a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	623b      	str	r3, [r7, #32]
 8002434:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800243c:	4a6b      	ldr	r2, [pc, #428]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002446:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_SPI_MspInit+0x2fc>)
 8002448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002454:	230a      	movs	r3, #10
 8002456:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800246c:	2305      	movs	r3, #5
 800246e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002472:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002476:	4619      	mov	r1, r3
 8002478:	485f      	ldr	r0, [pc, #380]	; (80025f8 <HAL_SPI_MspInit+0x308>)
 800247a:	f003 f99b 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800247e:	2308      	movs	r3, #8
 8002480:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002496:	2305      	movs	r3, #5
 8002498:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80024a0:	4619      	mov	r1, r3
 80024a2:	4856      	ldr	r0, [pc, #344]	; (80025fc <HAL_SPI_MspInit+0x30c>)
 80024a4:	f003 f986 	bl	80057b4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024aa:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_SPI_MspInit+0x314>)
 80024ac:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80024ae:	4b54      	ldr	r3, [pc, #336]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024b0:	2209      	movs	r2, #9
 80024b2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ba:	4b51      	ldr	r3, [pc, #324]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80024c2:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024c4:	2208      	movs	r2, #8
 80024c6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80024c8:	4b4d      	ldr	r3, [pc, #308]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80024ce:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80024d4:	4b4a      	ldr	r3, [pc, #296]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80024e0:	4b47      	ldr	r3, [pc, #284]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80024e6:	4b46      	ldr	r3, [pc, #280]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80024ec:	4b44      	ldr	r3, [pc, #272]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80024f2:	4b43      	ldr	r3, [pc, #268]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80024f8:	4b41      	ldr	r3, [pc, #260]	; (8002600 <HAL_SPI_MspInit+0x310>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80024fe:	4840      	ldr	r0, [pc, #256]	; (8002600 <HAL_SPI_MspInit+0x310>)
 8002500:	f001 fcdc 	bl	8003ebc <HAL_DMA_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_SPI_MspInit+0x21e>
      Error_Handler();
 800250a:	f7ff f9bf 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel1);
 800250e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a39      	ldr	r2, [pc, #228]	; (8002600 <HAL_SPI_MspInit+0x310>)
 800251a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800251e:	4a38      	ldr	r2, [pc, #224]	; (8002600 <HAL_SPI_MspInit+0x310>)
 8002520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800252c:	2110      	movs	r1, #16
 800252e:	4834      	ldr	r0, [pc, #208]	; (8002600 <HAL_SPI_MspInit+0x310>)
 8002530:	f001 ff99 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_SPI_MspInit+0x24e>
      Error_Handler();
 800253a:	f7ff f9a7 	bl	800188c <Error_Handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002540:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_SPI_MspInit+0x31c>)
 8002542:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002546:	2208      	movs	r2, #8
 8002548:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_SPI_MspInit+0x318>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_SPI_MspInit+0x318>)
 800255e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002562:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_SPI_MspInit+0x318>)
 800256c:	2200      	movs	r2, #0
 800256e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002572:	2200      	movs	r2, #0
 8002574:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002578:	2201      	movs	r2, #1
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_SPI_MspInit+0x318>)
 800257e:	2201      	movs	r2, #1
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8002582:	4b21      	ldr	r3, [pc, #132]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002584:	2200      	movs	r2, #0
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002588:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <HAL_SPI_MspInit+0x318>)
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002590:	2200      	movs	r2, #0
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002594:	481c      	ldr	r0, [pc, #112]	; (8002608 <HAL_SPI_MspInit+0x318>)
 8002596:	f001 fc91 	bl	8003ebc <HAL_DMA_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_SPI_MspInit+0x2b4>
      Error_Handler();
 80025a0:	f7ff f974 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel0);
 80025a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_SPI_MspInit+0x318>)
 80025b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_SPI_MspInit+0x318>)
 80025b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80025c2:	2110      	movs	r1, #16
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <HAL_SPI_MspInit+0x318>)
 80025c6:	f001 ff4e 	bl	8004466 <HAL_DMA_ConfigChannelAttributes>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_SPI_MspInit+0x2e4>
      Error_Handler();
 80025d0:	f7ff f95c 	bl	800188c <Error_Handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	203c      	movs	r0, #60	; 0x3c
 80025da:	f001 fa52 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80025de:	203c      	movs	r0, #60	; 0x3c
 80025e0:	f001 fa69 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 80025e4:	e0be      	b.n	8002764 <HAL_SPI_MspInit+0x474>
 80025e6:	bf00      	nop
 80025e8:	40013000 	.word	0x40013000
 80025ec:	46020c00 	.word	0x46020c00
 80025f0:	42021800 	.word	0x42021800
 80025f4:	40003800 	.word	0x40003800
 80025f8:	42022000 	.word	0x42022000
 80025fc:	42020c00 	.word	0x42020c00
 8002600:	2000098c 	.word	0x2000098c
 8002604:	400200d0 	.word	0x400200d0
 8002608:	20000a04 	.word	0x20000a04
 800260c:	40020050 	.word	0x40020050
  else if(hspi->Instance==SPI3)
 8002610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_SPI_MspInit+0x480>)
 800261e:	4293      	cmp	r3, r2
 8002620:	f040 80a0 	bne.w	8002764 <HAL_SPI_MspInit+0x474>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8002630:	2310      	movs	r3, #16
 8002632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fa8e 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_SPI_MspInit+0x35a>
      Error_Handler();
 8002646:	f7ff f921 	bl	800188c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800264a:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_SPI_MspInit+0x484>)
 800264c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_SPI_MspInit+0x484>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_SPI_MspInit+0x484>)
 800265c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_SPI_MspInit+0x484>)
 800266a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266e:	4a41      	ldr	r2, [pc, #260]	; (8002774 <HAL_SPI_MspInit+0x484>)
 8002670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002674:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_SPI_MspInit+0x484>)
 800267a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_SPI_MspInit+0x484>)
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	4a39      	ldr	r2, [pc, #228]	; (8002774 <HAL_SPI_MspInit+0x484>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_SPI_MspInit+0x484>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	f003 0201 	and.w	r2, r3, #1
 80026a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026b2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_SPI_MspInit+0x484>)
 80026b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ba:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_SPI_MspInit+0x484>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_SPI_MspInit+0x484>)
 80026c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ca:	f003 0202 	and.w	r2, r3, #2
 80026ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026e0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026fc:	2306      	movs	r3, #6
 80026fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002702:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002706:	4619      	mov	r1, r3
 8002708:	481b      	ldr	r0, [pc, #108]	; (8002778 <HAL_SPI_MspInit+0x488>)
 800270a:	f003 f853 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800270e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002712:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002728:	2306      	movs	r3, #6
 800272a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002732:	4619      	mov	r1, r3
 8002734:	4811      	ldr	r0, [pc, #68]	; (800277c <HAL_SPI_MspInit+0x48c>)
 8002736:	f003 f83d 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800273a:	2330      	movs	r3, #48	; 0x30
 800273c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002752:	2306      	movs	r3, #6
 8002754:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800275c:	4619      	mov	r1, r3
 800275e:	4808      	ldr	r0, [pc, #32]	; (8002780 <HAL_SPI_MspInit+0x490>)
 8002760:	f003 f828 	bl	80057b4 <HAL_GPIO_Init>
}
 8002764:	bf00      	nop
 8002766:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	46002000 	.word	0x46002000
 8002774:	46020c00 	.word	0x46020c00
 8002778:	42021800 	.word	0x42021800
 800277c:	42020000 	.word	0x42020000
 8002780:	42020400 	.word	0x42020400

08002784 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_TIM_IC_MspInit+0x88>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12d      	bne.n	8002802 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ca:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_TIM_IC_MspInit+0x8c>)
 80027d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_PWM_Pin;
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f2:	2302      	movs	r3, #2
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM3_PWM_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4805      	ldr	r0, [pc, #20]	; (8002814 <HAL_TIM_IC_MspInit+0x90>)
 80027fe:	f002 ffd9 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40000400 	.word	0x40000400
 8002810:	46020c00 	.word	0x46020c00
 8002814:	42020800 	.word	0x42020800

08002818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0c0      	sub	sp, #256	; 0x100
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	22c8      	movs	r2, #200	; 0xc8
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f00c f895 	bl	800e968 <memset>
  if(huart->Instance==USART2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a5e      	ldr	r2, [pc, #376]	; (80029bc <HAL_UART_MspInit+0x1a4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d145      	bne.n	80028d4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002848:	f04f 0202 	mov.w	r2, #2
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002854:	2300      	movs	r3, #0
 8002856:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002858:	f107 0320 	add.w	r3, r7, #32
 800285c:	4618      	mov	r0, r3
 800285e:	f005 f97d 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002868:	f7ff f810 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800286c:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 800286e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002872:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 800287e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800289a:	4b49      	ldr	r3, [pc, #292]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5;
 80028a8:	2370      	movs	r3, #112	; 0x70
 80028aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c0:	2307      	movs	r3, #7
 80028c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028ca:	4619      	mov	r1, r3
 80028cc:	483d      	ldr	r0, [pc, #244]	; (80029c4 <HAL_UART_MspInit+0x1ac>)
 80028ce:	f002 ff71 	bl	80057b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028d2:	e06e      	b.n	80029b2 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <HAL_UART_MspInit+0x1b0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d169      	bne.n	80029b2 <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028de:	f04f 0204 	mov.w	r2, #4
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 f932 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_UART_MspInit+0xea>
      Error_Handler();
 80028fe:	f7fe ffc5 	bl	800188c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002914:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002926:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_UART_MspInit+0x1a8>)
 8002950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 800295c:	23a0      	movs	r3, #160	; 0xa0
 800295e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002974:	2307      	movs	r3, #7
 8002976:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800297e:	4619      	mov	r1, r3
 8002980:	4812      	ldr	r0, [pc, #72]	; (80029cc <HAL_UART_MspInit+0x1b4>)
 8002982:	f002 ff17 	bl	80057b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002986:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800298a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029a0:	2307      	movs	r3, #7
 80029a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <HAL_UART_MspInit+0x1ac>)
 80029ae:	f002 ff01 	bl	80057b4 <HAL_GPIO_Init>
}
 80029b2:	bf00      	nop
 80029b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40004400 	.word	0x40004400
 80029c0:	46020c00 	.word	0x46020c00
 80029c4:	42020c00 	.word	0x42020c00
 80029c8:	40004800 	.word	0x40004800
 80029cc:	42020000 	.word	0x42020000

080029d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0be      	sub	sp, #248	; 0xf8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	22c8      	movs	r2, #200	; 0xc8
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00b ffb9 	bl	800e968 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a38      	ldr	r2, [pc, #224]	; (8002adc <HAL_PCD_MspInit+0x10c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d169      	bne.n	8002ad4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a12:	f107 0318 	add.w	r3, r7, #24
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 f8a0 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002a22:	f7fe ff33 	bl	800188c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	4a2c      	ldr	r2, [pc, #176]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8002a44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002a5e:	230a      	movs	r3, #10
 8002a60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	481e      	ldr	r0, [pc, #120]	; (8002ae4 <HAL_PCD_MspInit+0x114>)
 8002a6c:	f002 fea2 	bl	80057b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a76:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d119      	bne.n	8002ad0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002aba:	f003 fd6d 	bl	8006598 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_PCD_MspInit+0x110>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ace:	e001      	b.n	8002ad4 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8002ad0:	f003 fd62 	bl	8006598 <HAL_PWREx_EnableVddUSB>
}
 8002ad4:	bf00      	nop
 8002ad6:	37f8      	adds	r7, #248	; 0xf8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	42040000 	.word	0x42040000
 8002ae0:	46020c00 	.word	0x46020c00
 8002ae4:	42020000 	.word	0x42020000

08002ae8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0bc      	sub	sp, #240	; 0xf0
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	22c8      	movs	r2, #200	; 0xc8
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00b ff35 	bl	800e968 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_SAI_MspInit+0x134>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d13f      	bne.n	8002b88 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002b08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f81c 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_SAI_MspInit+0x46>
    {
      Error_Handler();
 8002b2a:	f7fe feaf 	bl	800188c <Error_Handler>
    }

    if (SAI1_client == 0)
 8002b2e:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_SAI_MspInit+0x6c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b36:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b3c:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b42:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002b46:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002b54:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002b5c:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002b5e:	2374      	movs	r3, #116	; 0x74
 8002b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002b76:	230d      	movs	r3, #13
 8002b78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b80:	4619      	mov	r1, r3
 8002b82:	4829      	ldr	r0, [pc, #164]	; (8002c28 <HAL_SAI_MspInit+0x140>)
 8002b84:	f002 fe16 	bl	80057b4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <HAL_SAI_MspInit+0x144>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d13f      	bne.n	8002c12 <HAL_SAI_MspInit+0x12a>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL1;
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f004 ffd7 	bl	8007b5c <HAL_RCCEx_PeriphCLKConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_SAI_MspInit+0xd0>
    {
      Error_Handler();
 8002bb4:	f7fe fe6a 	bl	800188c <Error_Handler>
    }

      if (SAI1_client == 0)
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10e      	bne.n	8002bde <HAL_SAI_MspInit+0xf6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002bc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bcc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_SAI_MspInit+0x13c>)
 8002bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_SAI_MspInit+0x138>)
 8002be6:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002be8:	2308      	movs	r3, #8
 8002bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002c00:	230d      	movs	r3, #13
 8002c02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4806      	ldr	r0, [pc, #24]	; (8002c28 <HAL_SAI_MspInit+0x140>)
 8002c0e:	f002 fdd1 	bl	80057b4 <HAL_GPIO_Init>

    }
}
 8002c12:	bf00      	nop
 8002c14:	37f0      	adds	r7, #240	; 0xf0
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40015404 	.word	0x40015404
 8002c20:	200010fc 	.word	0x200010fc
 8002c24:	46020c00 	.word	0x46020c00
 8002c28:	42021000 	.word	0x42021000
 8002c2c:	40015424 	.word	0x40015424

08002c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <NMI_Handler+0x4>

08002c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <HardFault_Handler+0x4>

08002c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c40:	e7fe      	b.n	8002c40 <MemManage_Handler+0x4>

08002c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c46:	e7fe      	b.n	8002c46 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7c:	f000 fa1a 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BUTTON_Pin);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f002 ff83 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DLPC_Pin);
 8002c96:	2002      	movs	r0, #2
 8002c98:	f002 ff7c 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DLPC_Pin);
 8002ca4:	2004      	movs	r0, #4
 8002ca6:	f002 ff75 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ICLX_Pin);
 8002cb2:	2008      	movs	r0, #8
 8002cb4:	f002 ff6e 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI Line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_DHCX_Pin);
 8002cc0:	2010      	movs	r0, #16
 8002cc2:	f002 ff67 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <EXTI5_IRQHandler>:

/**
  * @brief This function handles EXTI Line5 interrupt.
  */
void EXTI5_IRQHandler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI5_IRQn 0 */

  /* USER CODE END EXTI5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_STT_Pin);
 8002cce:	2020      	movs	r0, #32
 8002cd0:	f002 ff60 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI5_IRQn 1 */

  /* USER CODE END EXTI5_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 8002cdc:	2040      	movs	r0, #64	; 0x40
 8002cde:	f002 ff59 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WIFI_NOTIFY_Pin);
 8002cea:	2080      	movs	r0, #128	; 0x80
 8002cec:	f002 ff52 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_DHCX_Pin);
 8002cf8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cfc:	f002 ff4a 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8002d08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d0c:	f002 ff42 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PWR_Pin);
 8002d18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d1c:	f002 ff3a 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_ICLX_Pin);
 8002d28:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d2c:	f002 ff32 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 8002d38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d3c:	f002 ff2a 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <EXTI14_IRQHandler>:

/**
  * @brief This function handles EXTI Line14 interrupt.
  */
void EXTI14_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI14_IRQn 0 */

  /* USER CODE END EXTI14_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8002d48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d4c:	f002 ff22 	bl	8005b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI14_IRQn 1 */

  /* USER CODE END EXTI14_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <GPDMA1_Channel0_IRQHandler+0x10>)
 8002d5a:	f001 fa0a 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000a04 	.word	0x20000a04

08002d68 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002d6e:	f001 fa00 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000098c 	.word	0x2000098c

08002d7c <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <GPDMA1_Channel2_IRQHandler+0x10>)
 8002d82:	f001 f9f6 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000588 	.word	0x20000588

08002d90 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <GPDMA1_Channel3_IRQHandler+0x10>)
 8002d96:	f001 f9ec 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000510 	.word	0x20000510

08002da4 <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <GPDMA1_Channel4_IRQHandler+0x10>)
 8002daa:	f001 f9e2 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000388 	.word	0x20000388

08002db8 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <GPDMA1_Channel5_IRQHandler+0x10>)
 8002dbe:	f001 f9d8 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200002d4 	.word	0x200002d4

08002dcc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <SPI2_IRQHandler+0x10>)
 8002dd2:	f009 f93f 	bl	800c054 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	2000086c 	.word	0x2000086c

08002de0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002df2:	e000      	b.n	8002df6 <_read+0x16>
 8002df4:	bf00      	nop
 8002df6:	4601      	mov	r1, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	60ba      	str	r2, [r7, #8]
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dbf0      	blt.n	8002df2 <_read+0x12>
  }

  return len;
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e009      	b.n	8002e40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	60ba      	str	r2, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fbaf 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbf1      	blt.n	8002e2c <_write+0x12>
  }
  return len;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_close>:

int _close(int file)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_isatty>:

int _isatty(int file)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <_sbrk+0x5c>)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <_sbrk+0x60>)
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x64>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <_sbrk+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eec:	f00b fd12 	bl	800e914 <__errno>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efa:	e009      	b.n	8002f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_sbrk+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200c0000 	.word	0x200c0000
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	20001100 	.word	0x20001100
 8002f24:	20001140 	.word	0x20001140

08002f28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <SystemInit+0x68>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <SystemInit+0x68>)
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <SystemInit+0x6c>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <SystemInit+0x6c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <SystemInit+0x6c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <SystemInit+0x6c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <SystemInit+0x6c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <SystemInit+0x6c>)
 8002f5a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f5e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f62:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <SystemInit+0x6c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <SystemInit+0x6c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <SystemInit+0x6c>)
 8002f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <SystemInit+0x6c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <SystemInit+0x68>)
 8002f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f82:	609a      	str	r2, [r3, #8]
  #endif
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000ed00 	.word	0xe000ed00
 8002f94:	46020c00 	.word	0x46020c00

08002f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f9c:	f7ff ffc4 	bl	8002f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fa2:	e003      	b.n	8002fac <LoopCopyDataInit>

08002fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002faa:	3104      	adds	r1, #4

08002fac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fac:	480a      	ldr	r0, [pc, #40]	; (8002fd8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fb4:	d3f6      	bcc.n	8002fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fb8:	e002      	b.n	8002fc0 <LoopFillZerobss>

08002fba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fbc:	f842 3b04 	str.w	r3, [r2], #4

08002fc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <LoopForever+0x16>)
	cmp	r2, r3
 8002fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fc4:	d3f9      	bcc.n	8002fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fc6:	f00b fcab 	bl	800e920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fca:	f7fd faf7 	bl	80005bc <main>

08002fce <LoopForever>:

LoopForever:
    b LoopForever
 8002fce:	e7fe      	b.n	8002fce <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002fd0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002fd4:	0800f50c 	.word	0x0800f50c
	ldr	r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fdc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002fe0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002fe4:	2000113c 	.word	0x2000113c

08002fe8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fe8:	e7fe      	b.n	8002fe8 <ADC1_IRQHandler>
	...

08002fec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_Init+0x4c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a10      	ldr	r2, [pc, #64]	; (8003038 <HAL_Init+0x4c>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	f000 fd35 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003002:	f004 fbc7 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_Init+0x50>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	490b      	ldr	r1, [pc, #44]	; (8003040 <HAL_Init+0x54>)
 8003012:	5ccb      	ldrb	r3, [r1, r3]
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x58>)
 800301a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800301c:	200f      	movs	r0, #15
 800301e:	f000 f813 	bl	8003048 <HAL_InitTick>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e002      	b.n	8003032 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800302c:	f7fe fc34 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40022000 	.word	0x40022000
 800303c:	46020c00 	.word	0x46020c00
 8003040:	0800f398 	.word	0x0800f398
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_InitTick+0x60>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e021      	b.n	80030a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_InitTick+0x64>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_InitTick+0x60>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306a:	fbb3 f3f1 	udiv	r3, r3, r1
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fd2d 	bl	8003ad2 <HAL_SYSTICK_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d80a      	bhi.n	800309e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003090:	f000 fcf7 	bl	8003a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <HAL_InitTick+0x68>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000008 	.word	0x20000008
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000004 	.word	0x20000004

080030b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_IncTick+0x24>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_IncTick+0x24>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000008 	.word	0x20000008
 80030d8:	20001104 	.word	0x20001104

080030dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return uwTick;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_GetTick+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20001104 	.word	0x20001104

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff ffee 	bl	80030dc <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffde 	bl	80030dc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000008 	.word	0x20000008

0800313c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <LL_ADC_SetResolution+0x3c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d104      	bne.n	8003184 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3b01      	subs	r3, #1
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f023 020c 	bic.w	r2, r3, #12
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	60da      	str	r2, [r3, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	46021000 	.word	0x46021000

080031a4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d002      	beq.n	80031d6 <LL_ADC_SetGainCompensation+0x32>
 80031d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031d4:	e000      	b.n	80031d8 <LL_ADC_SetGainCompensation+0x34>
 80031d6:	2200      	movs	r2, #0
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b085      	sub	sp, #20
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2107      	movs	r1, #7
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6093      	str	r3, [r2, #8]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003260:	d101      	bne.n	8003266 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032b0:	d101      	bne.n	80032b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <LL_ADC_IsEnabled+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_ADC_IsEnabled+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d101      	bne.n	8003302 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b08      	cmp	r3, #8
 8003322:	d101      	bne.n	8003328 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e2b3      	b.n	80038c0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a8b      	ldr	r2, [pc, #556]	; (8003594 <HAL_ADC_Init+0x25c>)
 8003366:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fe faab 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5f 	bl	800324c <LL_ADC_IsDeepPowerDownEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff45 	bl	8003228 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff7a 	bl	800329c <LL_ADC_IsInternalRegulatorEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff5e 	bl	8003274 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033b8:	4b77      	ldr	r3, [pc, #476]	; (8003598 <HAL_ADC_Init+0x260>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	4a77      	ldr	r2, [pc, #476]	; (800359c <HAL_ADC_Init+0x264>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033cc:	e002      	b.n	80033d4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f9      	bne.n	80033ce <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff5c 	bl	800329c <LL_ADC_IsInternalRegulatorEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ee:	f043 0210 	orr.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff6c 	bl	80032ea <LL_ADC_REG_IsConversionOngoing>
 8003412:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8244 	bne.w	80038aa <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f040 8240 	bne.w	80038aa <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003432:	f043 0202 	orr.w	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ff40 	bl	80032c4 <LL_ADC_IsEnabled>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d140      	bne.n	80034cc <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a51      	ldr	r2, [pc, #324]	; (8003594 <HAL_ADC_Init+0x25c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d028      	beq.n	80034a6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_ADC_Init+0x268>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d109      	bne.n	8003472 <HAL_ADC_Init+0x13a>
 800345e:	4850      	ldr	r0, [pc, #320]	; (80035a0 <HAL_ADC_Init+0x268>)
 8003460:	f7ff ff30 	bl	80032c4 <LL_ADC_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	e008      	b.n	8003484 <HAL_ADC_Init+0x14c>
 8003472:	4848      	ldr	r0, [pc, #288]	; (8003594 <HAL_ADC_Init+0x25c>)
 8003474:	f7ff ff26 	bl	80032c4 <LL_ADC_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d021      	beq.n	80034cc <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a44      	ldr	r2, [pc, #272]	; (80035a0 <HAL_ADC_Init+0x268>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_ADC_Init+0x15e>
 8003492:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <HAL_ADC_Init+0x26c>)
 8003494:	e000      	b.n	8003498 <HAL_ADC_Init+0x160>
 8003496:	4a44      	ldr	r2, [pc, #272]	; (80035a8 <HAL_ADC_Init+0x270>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f7ff fe4c 	bl	800313c <LL_ADC_SetCommonClock>
 80034a4:	e012      	b.n	80034cc <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f7ff fe57 	bl	8003164 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80034b6:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <HAL_ADC_Init+0x270>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80034c6:	4938      	ldr	r1, [pc, #224]	; (80035a8 <HAL_ADC_Init+0x270>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_ADC_Init+0x25c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d010      	beq.n	80034f8 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034dc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80034e2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80034e8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034f0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80034f2:	4313      	orrs	r3, r2
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	e030      	b.n	800355a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7f1b      	ldrb	r3, [r3, #28]
 80034fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003504:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003506:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800350c:	2a00      	cmp	r2, #0
 800350e:	d002      	beq.n	8003516 <HAL_ADC_Init+0x1de>
 8003510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003514:	e000      	b.n	8003518 <HAL_ADC_Init+0x1e0>
 8003516:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003518:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800351e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da04      	bge.n	8003532 <HAL_ADC_Init+0x1fa>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003530:	e001      	b.n	8003536 <HAL_ADC_Init+0x1fe>
 8003532:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8003536:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4918      	ldr	r1, [pc, #96]	; (80035a0 <HAL_ADC_Init+0x268>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d103      	bne.n	800354a <HAL_ADC_Init+0x212>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003548:	e003      	b.n	8003552 <HAL_ADC_Init+0x21a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003550:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003552:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	4313      	orrs	r3, r2
 8003558:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d12f      	bne.n	80035c4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <HAL_ADC_Init+0x25c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	3b01      	subs	r3, #1
 8003574:	045b      	lsls	r3, r3, #17
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	4313      	orrs	r3, r2
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	e022      	b.n	80035c4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	e018      	b.n	80035c4 <HAL_ADC_Init+0x28c>
 8003592:	bf00      	nop
 8003594:	46021000 	.word	0x46021000
 8003598:	20000000 	.word	0x20000000
 800359c:	053e2d63 	.word	0x053e2d63
 80035a0:	42028000 	.word	0x42028000
 80035a4:	42028308 	.word	0x42028308
 80035a8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a92      	ldr	r2, [pc, #584]	; (8003814 <HAL_ADC_Init+0x4dc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4313      	orrs	r3, r2
 80035e4:	6a3a      	ldr	r2, [r7, #32]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	4b89      	ldr	r3, [pc, #548]	; (8003818 <HAL_ADC_Init+0x4e0>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	6a39      	ldr	r1, [r7, #32]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	60d3      	str	r3, [r2, #12]
 80035fe:	e031      	b.n	8003664 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	4313      	orrs	r3, r2
 8003616:	6a3a      	ldr	r2, [r7, #32]
 8003618:	4313      	orrs	r3, r2
 800361a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b7e      	ldr	r3, [pc, #504]	; (800381c <HAL_ADC_Init+0x4e4>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	6a39      	ldr	r1, [r7, #32]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <HAL_ADC_Init+0x4dc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f000 8093 	beq.w	8003796 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe38 	bl	80032ea <LL_ADC_REG_IsConversionOngoing>
 800367a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fe45 	bl	8003310 <LL_ADC_INJ_IsConversionOngoing>
 8003686:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d161      	bne.n	8003752 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d15e      	bne.n	8003752 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7f1b      	ldrb	r3, [r3, #28]
 8003698:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4960      	ldr	r1, [pc, #384]	; (8003820 <HAL_ADC_Init+0x4e8>)
 80036a0:	428b      	cmp	r3, r1
 80036a2:	d102      	bne.n	80036aa <HAL_ADC_Init+0x372>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	e002      	b.n	80036b0 <HAL_ADC_Init+0x378>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036b0:	4313      	orrs	r3, r2
 80036b2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	6a39      	ldr	r1, [r7, #32]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7ff fd60 	bl	80031a4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11e      	bne.n	800372c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_ADC_Init+0x4ec>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003702:	0411      	lsls	r1, r2, #16
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003708:	4311      	orrs	r1, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003714:	4311      	orrs	r1, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800371a:	0892      	lsrs	r2, r2, #2
 800371c:	430a      	orrs	r2, r1
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	611a      	str	r2, [r3, #16]
 800372a:	e007      	b.n	800373c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10c      	bne.n	8003774 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	f023 010f 	bic.w	r1, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
 8003772:	e007      	b.n	8003784 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 020f 	bic.w	r2, r2, #15
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003788:	f023 0303 	bic.w	r3, r3, #3
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003794:	e092      	b.n	80038bc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800379c:	2b01      	cmp	r3, #1
 800379e:	d111      	bne.n	80037c4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 80037ae:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 80037b4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_ADC_Init+0x4f0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e0:	461a      	mov	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f7ff fd01 	bl	80031ea <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	461a      	mov	r2, r3
 80037f2:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80037f6:	f7ff fcf8 	bl	80031ea <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f062 020f 	orn	r2, r2, #15
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
 8003812:	e024      	b.n	800385e <HAL_ADC_Init+0x526>
 8003814:	46021000 	.word	0x46021000
 8003818:	fff0c013 	.word	0xfff0c013
 800381c:	ffde800d 	.word	0xffde800d
 8003820:	42028000 	.word	0x42028000
 8003824:	fc00f81e 	.word	0xfc00f81e
 8003828:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003834:	d113      	bne.n	800385e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	f003 031c 	and.w	r3, r3, #28
 8003848:	f06f 020f 	mvn.w	r2, #15
 800384c:	fa02 f103 	lsl.w	r1, r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <HAL_ADC_Init+0x590>)
 8003866:	4013      	ands	r3, r2
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	429a      	cmp	r2, r3
 800386c:	d10b      	bne.n	8003886 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003878:	f023 0303 	bic.w	r3, r3, #3
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003884:	e01a      	b.n	80038bc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388a:	f023 0312 	bic.w	r3, r3, #18
 800388e:	f043 0210 	orr.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80038a8:	e008      	b.n	80038bc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 80038bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	833ffff3 	.word	0x833ffff3

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff40 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff90 	bl	80039c0 <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5f 	bl	800396c <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff33 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa4 	bl	8003a28 <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e014      	b.n	8003b26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	791b      	ldrb	r3, [r3, #4]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fe f8d3 	bl	8001cb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	795b      	ldrb	r3, [r3, #5]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_DAC_ConfigChannel+0x1c>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e17e      	b.n	8003e4a <HAL_DAC_ConfigChannel+0x31a>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d17a      	bne.n	8003c56 <HAL_DAC_ConfigChannel+0x126>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b60:	f7ff fabc 	bl	80030dc <HAL_GetTick>
 8003b64:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d13d      	bne.n	8003be8 <HAL_DAC_ConfigChannel+0xb8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b6c:	e018      	b.n	8003ba0 <HAL_DAC_ConfigChannel+0x70>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b6e:	f7ff fab5 	bl	80030dc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d911      	bls.n	8003ba0 <HAL_DAC_ConfigChannel+0x70>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_DAC_ConfigChannel+0x70>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f043 0208 	orr.w	r2, r3, #8
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e154      	b.n	8003e4a <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1df      	bne.n	8003b6e <HAL_DAC_ConfigChannel+0x3e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003bb8:	e020      	b.n	8003bfc <HAL_DAC_ConfigChannel+0xcc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bba:	f7ff fa8f 	bl	80030dc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d90f      	bls.n	8003be8 <HAL_DAC_ConfigChannel+0xb8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da0a      	bge.n	8003be8 <HAL_DAC_ConfigChannel+0xb8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f043 0208 	orr.w	r2, r3, #8
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2203      	movs	r2, #3
 8003be2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e130      	b.n	8003e4a <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	dbe3      	blt.n	8003bba <HAL_DAC_ConfigChannel+0x8a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	ea02 0103 	and.w	r1, r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	21ff      	movs	r1, #255	; 0xff
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	ea02 0103 	and.w	r1, r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f003 0310 	and.w	r3, r3, #16
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11d      	bne.n	8003cb0 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	221f      	movs	r2, #31
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4013      	ands	r3, r2
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d102      	bne.n	8003cda <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e00f      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d102      	bne.n	8003ce8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	623b      	str	r3, [r7, #32]
 8003ce6:	e008      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	e001      	b.n	8003cfa <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	7a1b      	ldrb	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d102      	bne.n	8003d2e <HAL_DAC_ConfigChannel+0x1fe>
 8003d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d2c:	e000      	b.n	8003d30 <HAL_DAC_ConfigChannel+0x200>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	4013      	ands	r3, r2
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	7a5b      	ldrb	r3, [r3, #9]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_DAC_ConfigChannel+0x22a>
 8003d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d58:	e000      	b.n	8003d5c <HAL_DAC_ConfigChannel+0x22c>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d114      	bne.n	8003d9c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d72:	f003 fe17 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8003d76:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4a36      	ldr	r2, [pc, #216]	; (8003e54 <HAL_DAC_ConfigChannel+0x324>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d904      	bls.n	8003d8a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
 8003d88:	e00f      	b.n	8003daa <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4a32      	ldr	r2, [pc, #200]	; (8003e58 <HAL_DAC_ConfigChannel+0x328>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d90a      	bls.n	8003da8 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	e006      	b.n	8003daa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	4313      	orrs	r3, r2
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
 8003da6:	e000      	b.n	8003daa <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003da8:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	4313      	orrs	r3, r2
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	400a      	ands	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e14:	4313      	orrs	r3, r2
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	22c0      	movs	r2, #192	; 0xc0
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	400a      	ands	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3728      	adds	r7, #40	; 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	09896800 	.word	0x09896800
 8003e58:	04c4b400 	.word	0x04c4b400

08003e5c <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	791b      	ldrb	r3, [r3, #4]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d11e      	bne.n	8003eae <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	795b      	ldrb	r3, [r3, #5]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_DACEx_SetConfigAutonomousMode+0x20>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e019      	b.n	8003eb0 <HAL_DACEx_SetConfigAutonomousMode+0x54>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2202      	movs	r2, #2
 8003e86:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff f90a 	bl	80030dc <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0e0      	b.n	8004096 <HAL_DMA_Init+0x1da>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6f      	ldr	r2, [pc, #444]	; (80040a0 <HAL_DMA_Init+0x1e4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f000 809f 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6d      	ldr	r2, [pc, #436]	; (80040a4 <HAL_DMA_Init+0x1e8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	f000 8099 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6b      	ldr	r2, [pc, #428]	; (80040a8 <HAL_DMA_Init+0x1ec>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	f000 8093 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a69      	ldr	r2, [pc, #420]	; (80040ac <HAL_DMA_Init+0x1f0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	f000 808d 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <HAL_DMA_Init+0x1f4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f000 8087 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_DMA_Init+0x1f8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	f000 8081 	beq.w	8004026 <HAL_DMA_Init+0x16a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a63      	ldr	r2, [pc, #396]	; (80040b8 <HAL_DMA_Init+0x1fc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d07b      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a62      	ldr	r2, [pc, #392]	; (80040bc <HAL_DMA_Init+0x200>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d076      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a60      	ldr	r2, [pc, #384]	; (80040c0 <HAL_DMA_Init+0x204>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d071      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5f      	ldr	r2, [pc, #380]	; (80040c4 <HAL_DMA_Init+0x208>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d06c      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_DMA_Init+0x20c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d067      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_DMA_Init+0x210>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d062      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5a      	ldr	r2, [pc, #360]	; (80040d0 <HAL_DMA_Init+0x214>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d05d      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a59      	ldr	r2, [pc, #356]	; (80040d4 <HAL_DMA_Init+0x218>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d058      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a57      	ldr	r2, [pc, #348]	; (80040d8 <HAL_DMA_Init+0x21c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d053      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_DMA_Init+0x220>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d04e      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a54      	ldr	r2, [pc, #336]	; (80040e0 <HAL_DMA_Init+0x224>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d049      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a53      	ldr	r2, [pc, #332]	; (80040e4 <HAL_DMA_Init+0x228>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d044      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a51      	ldr	r2, [pc, #324]	; (80040e8 <HAL_DMA_Init+0x22c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d03f      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_DMA_Init+0x230>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d03a      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a4e      	ldr	r2, [pc, #312]	; (80040f0 <HAL_DMA_Init+0x234>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d035      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <HAL_DMA_Init+0x238>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d030      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4b      	ldr	r2, [pc, #300]	; (80040f8 <HAL_DMA_Init+0x23c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d02b      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_DMA_Init+0x240>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d026      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_DMA_Init+0x244>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d021      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a47      	ldr	r2, [pc, #284]	; (8004104 <HAL_DMA_Init+0x248>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01c      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a45      	ldr	r2, [pc, #276]	; (8004108 <HAL_DMA_Init+0x24c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d017      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a44      	ldr	r2, [pc, #272]	; (800410c <HAL_DMA_Init+0x250>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_DMA_Init+0x254>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a41      	ldr	r2, [pc, #260]	; (8004114 <HAL_DMA_Init+0x258>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d008      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <HAL_DMA_Init+0x25c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <HAL_DMA_Init+0x16a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3e      	ldr	r2, [pc, #248]	; (800411c <HAL_DMA_Init+0x260>)
 8004024:	4293      	cmp	r3, r2
 8004026:	bf00      	nop
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0206 	orr.w	r2, r2, #6
 8004046:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004048:	e00f      	b.n	800406a <HAL_DMA_Init+0x1ae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800404a:	f7ff f847 	bl	80030dc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b05      	cmp	r3, #5
 8004056:	d908      	bls.n	800406a <HAL_DMA_Init+0x1ae>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2210      	movs	r2, #16
 800405c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e015      	b.n	8004096 <HAL_DMA_Init+0x1da>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e8      	bne.n	800404a <HAL_DMA_Init+0x18e>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa31 	bl	80044e0 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40020050 	.word	0x40020050
 80040a4:	50020050 	.word	0x50020050
 80040a8:	400200d0 	.word	0x400200d0
 80040ac:	500200d0 	.word	0x500200d0
 80040b0:	40020150 	.word	0x40020150
 80040b4:	50020150 	.word	0x50020150
 80040b8:	400201d0 	.word	0x400201d0
 80040bc:	500201d0 	.word	0x500201d0
 80040c0:	40020250 	.word	0x40020250
 80040c4:	50020250 	.word	0x50020250
 80040c8:	400202d0 	.word	0x400202d0
 80040cc:	500202d0 	.word	0x500202d0
 80040d0:	40020350 	.word	0x40020350
 80040d4:	50020350 	.word	0x50020350
 80040d8:	400203d0 	.word	0x400203d0
 80040dc:	500203d0 	.word	0x500203d0
 80040e0:	40020450 	.word	0x40020450
 80040e4:	50020450 	.word	0x50020450
 80040e8:	400204d0 	.word	0x400204d0
 80040ec:	500204d0 	.word	0x500204d0
 80040f0:	40020550 	.word	0x40020550
 80040f4:	50020550 	.word	0x50020550
 80040f8:	400205d0 	.word	0x400205d0
 80040fc:	500205d0 	.word	0x500205d0
 8004100:	40020650 	.word	0x40020650
 8004104:	50020650 	.word	0x50020650
 8004108:	400206d0 	.word	0x400206d0
 800410c:	500206d0 	.word	0x500206d0
 8004110:	40020750 	.word	0x40020750
 8004114:	50020750 	.word	0x50020750
 8004118:	400207d0 	.word	0x400207d0
 800411c:	500207d0 	.word	0x500207d0

08004120 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e019      	b.n	8004166 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d004      	beq.n	8004148 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e00e      	b.n	8004166 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2204      	movs	r2, #4
 800414c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800415e:	f043 0304 	orr.w	r3, r3, #4
 8004162:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004182:	f023 030f 	bic.w	r3, r3, #15
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	3b50      	subs	r3, #80	; 0x50
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2201      	movs	r2, #1
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8154 	beq.w	800445a <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d011      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004208:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f043 0202 	orr.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d011      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800426c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	f043 0208 	orr.w	r2, r3, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004284:	2b00      	cmp	r3, #0
 8004286:	d013      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d059      	beq.n	8004372 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d052      	beq.n	8004372 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042d4:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d13b      	bne.n	800435a <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f0:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0202 	orr.w	r2, r2, #2
 8004300:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004318:	e003      	b.n	8004322 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	2201      	movs	r2, #1
 8004334:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2200      	movs	r2, #0
 800433c:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8087 	beq.w	800445e <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
        }

        return;
 8004358:	e081      	b.n	800445e <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2205      	movs	r2, #5
 800435e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d039      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d032      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ba:	2201      	movs	r2, #1
 80043bc:	731a      	strb	r2, [r3, #12]
 80043be:	e008      	b.n	80043d2 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80043da:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d031      	beq.n	8004460 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0202 	orr.w	r2, r2, #2
 800440a:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004422:	e003      	b.n	800442c <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	2201      	movs	r2, #1
 800443e:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
 8004458:	e002      	b.n	8004460 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <HAL_DMA_IRQHandler+0x2ee>
        return;
 800445e:	bf00      	nop
    }
  }
}
 8004460:	3718      	adds	r7, #24
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e02b      	b.n	80044d2 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004482:	f023 030f 	bic.w	r3, r3, #15
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	3b50      	subs	r3, #80	; 0x50
 8004492:	09db      	lsrs	r3, r3, #7
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2201      	movs	r2, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d012      	beq.n	80044d0 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f003 0311 	and.w	r3, r3, #17
 80044b0:	2b11      	cmp	r3, #17
 80044b2:	d106      	bne.n	80044c2 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
 80044c0:	e006      	b.n	80044d0 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	401a      	ands	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a53      	ldr	r2, [pc, #332]	; (800466c <DMA_Init+0x18c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	f000 80a0 	beq.w	8004666 <DMA_Init+0x186>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a51      	ldr	r2, [pc, #324]	; (8004670 <DMA_Init+0x190>)
 800452c:	4293      	cmp	r3, r2
 800452e:	f000 809a 	beq.w	8004666 <DMA_Init+0x186>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a4f      	ldr	r2, [pc, #316]	; (8004674 <DMA_Init+0x194>)
 8004538:	4293      	cmp	r3, r2
 800453a:	f000 8094 	beq.w	8004666 <DMA_Init+0x186>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4d      	ldr	r2, [pc, #308]	; (8004678 <DMA_Init+0x198>)
 8004544:	4293      	cmp	r3, r2
 8004546:	f000 808e 	beq.w	8004666 <DMA_Init+0x186>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4b      	ldr	r2, [pc, #300]	; (800467c <DMA_Init+0x19c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	f000 8088 	beq.w	8004666 <DMA_Init+0x186>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a49      	ldr	r2, [pc, #292]	; (8004680 <DMA_Init+0x1a0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f000 8082 	beq.w	8004666 <DMA_Init+0x186>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a47      	ldr	r2, [pc, #284]	; (8004684 <DMA_Init+0x1a4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d07c      	beq.n	8004666 <DMA_Init+0x186>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a45      	ldr	r2, [pc, #276]	; (8004688 <DMA_Init+0x1a8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d077      	beq.n	8004666 <DMA_Init+0x186>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a44      	ldr	r2, [pc, #272]	; (800468c <DMA_Init+0x1ac>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d072      	beq.n	8004666 <DMA_Init+0x186>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a42      	ldr	r2, [pc, #264]	; (8004690 <DMA_Init+0x1b0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d06d      	beq.n	8004666 <DMA_Init+0x186>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a41      	ldr	r2, [pc, #260]	; (8004694 <DMA_Init+0x1b4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d068      	beq.n	8004666 <DMA_Init+0x186>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <DMA_Init+0x1b8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d063      	beq.n	8004666 <DMA_Init+0x186>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a3e      	ldr	r2, [pc, #248]	; (800469c <DMA_Init+0x1bc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d05e      	beq.n	8004666 <DMA_Init+0x186>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <DMA_Init+0x1c0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d059      	beq.n	8004666 <DMA_Init+0x186>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <DMA_Init+0x1c4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d054      	beq.n	8004666 <DMA_Init+0x186>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <DMA_Init+0x1c8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04f      	beq.n	8004666 <DMA_Init+0x186>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a38      	ldr	r2, [pc, #224]	; (80046ac <DMA_Init+0x1cc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d04a      	beq.n	8004666 <DMA_Init+0x186>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a36      	ldr	r2, [pc, #216]	; (80046b0 <DMA_Init+0x1d0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d045      	beq.n	8004666 <DMA_Init+0x186>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <DMA_Init+0x1d4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d040      	beq.n	8004666 <DMA_Init+0x186>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a33      	ldr	r2, [pc, #204]	; (80046b8 <DMA_Init+0x1d8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d03b      	beq.n	8004666 <DMA_Init+0x186>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a32      	ldr	r2, [pc, #200]	; (80046bc <DMA_Init+0x1dc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d036      	beq.n	8004666 <DMA_Init+0x186>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a30      	ldr	r2, [pc, #192]	; (80046c0 <DMA_Init+0x1e0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d031      	beq.n	8004666 <DMA_Init+0x186>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <DMA_Init+0x1e4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d02c      	beq.n	8004666 <DMA_Init+0x186>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <DMA_Init+0x1e8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d027      	beq.n	8004666 <DMA_Init+0x186>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <DMA_Init+0x1ec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d022      	beq.n	8004666 <DMA_Init+0x186>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <DMA_Init+0x1f0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01d      	beq.n	8004666 <DMA_Init+0x186>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <DMA_Init+0x1f4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <DMA_Init+0x186>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <DMA_Init+0x1f8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <DMA_Init+0x186>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a26      	ldr	r2, [pc, #152]	; (80046dc <DMA_Init+0x1fc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <DMA_Init+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a24      	ldr	r2, [pc, #144]	; (80046e0 <DMA_Init+0x200>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <DMA_Init+0x186>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <DMA_Init+0x204>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <DMA_Init+0x186>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <DMA_Init+0x208>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d142      	bne.n	80046ec <DMA_Init+0x20c>
 8004666:	2301      	movs	r3, #1
 8004668:	e041      	b.n	80046ee <DMA_Init+0x20e>
 800466a:	bf00      	nop
 800466c:	40020050 	.word	0x40020050
 8004670:	50020050 	.word	0x50020050
 8004674:	400200d0 	.word	0x400200d0
 8004678:	500200d0 	.word	0x500200d0
 800467c:	40020150 	.word	0x40020150
 8004680:	50020150 	.word	0x50020150
 8004684:	400201d0 	.word	0x400201d0
 8004688:	500201d0 	.word	0x500201d0
 800468c:	40020250 	.word	0x40020250
 8004690:	50020250 	.word	0x50020250
 8004694:	400202d0 	.word	0x400202d0
 8004698:	500202d0 	.word	0x500202d0
 800469c:	40020350 	.word	0x40020350
 80046a0:	50020350 	.word	0x50020350
 80046a4:	400203d0 	.word	0x400203d0
 80046a8:	500203d0 	.word	0x500203d0
 80046ac:	40020450 	.word	0x40020450
 80046b0:	50020450 	.word	0x50020450
 80046b4:	400204d0 	.word	0x400204d0
 80046b8:	500204d0 	.word	0x500204d0
 80046bc:	40020550 	.word	0x40020550
 80046c0:	50020550 	.word	0x50020550
 80046c4:	400205d0 	.word	0x400205d0
 80046c8:	500205d0 	.word	0x500205d0
 80046cc:	40020650 	.word	0x40020650
 80046d0:	50020650 	.word	0x50020650
 80046d4:	400206d0 	.word	0x400206d0
 80046d8:	500206d0 	.word	0x500206d0
 80046dc:	40020750 	.word	0x40020750
 80046e0:	50020750 	.word	0x50020750
 80046e4:	400207d0 	.word	0x400207d0
 80046e8:	500207d0 	.word	0x500207d0
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	3b01      	subs	r3, #1
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004702:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	3b01      	subs	r3, #1
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004710:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	430a      	orrs	r2, r1
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	f040 80b0 	bne.w	80048ae <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a82      	ldr	r2, [pc, #520]	; (800495c <DMA_Init+0x47c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	f000 80a0 	beq.w	800489a <DMA_Init+0x3ba>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a80      	ldr	r2, [pc, #512]	; (8004960 <DMA_Init+0x480>)
 8004760:	4293      	cmp	r3, r2
 8004762:	f000 809a 	beq.w	800489a <DMA_Init+0x3ba>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7e      	ldr	r2, [pc, #504]	; (8004964 <DMA_Init+0x484>)
 800476c:	4293      	cmp	r3, r2
 800476e:	f000 8094 	beq.w	800489a <DMA_Init+0x3ba>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <DMA_Init+0x488>)
 8004778:	4293      	cmp	r3, r2
 800477a:	f000 808e 	beq.w	800489a <DMA_Init+0x3ba>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7a      	ldr	r2, [pc, #488]	; (800496c <DMA_Init+0x48c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	f000 8088 	beq.w	800489a <DMA_Init+0x3ba>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a78      	ldr	r2, [pc, #480]	; (8004970 <DMA_Init+0x490>)
 8004790:	4293      	cmp	r3, r2
 8004792:	f000 8082 	beq.w	800489a <DMA_Init+0x3ba>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a76      	ldr	r2, [pc, #472]	; (8004974 <DMA_Init+0x494>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d07c      	beq.n	800489a <DMA_Init+0x3ba>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a74      	ldr	r2, [pc, #464]	; (8004978 <DMA_Init+0x498>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d077      	beq.n	800489a <DMA_Init+0x3ba>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a73      	ldr	r2, [pc, #460]	; (800497c <DMA_Init+0x49c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d072      	beq.n	800489a <DMA_Init+0x3ba>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a71      	ldr	r2, [pc, #452]	; (8004980 <DMA_Init+0x4a0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d06d      	beq.n	800489a <DMA_Init+0x3ba>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a70      	ldr	r2, [pc, #448]	; (8004984 <DMA_Init+0x4a4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d068      	beq.n	800489a <DMA_Init+0x3ba>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <DMA_Init+0x4a8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d063      	beq.n	800489a <DMA_Init+0x3ba>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6d      	ldr	r2, [pc, #436]	; (800498c <DMA_Init+0x4ac>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d05e      	beq.n	800489a <DMA_Init+0x3ba>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a6b      	ldr	r2, [pc, #428]	; (8004990 <DMA_Init+0x4b0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d059      	beq.n	800489a <DMA_Init+0x3ba>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <DMA_Init+0x4b4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d054      	beq.n	800489a <DMA_Init+0x3ba>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <DMA_Init+0x4b8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04f      	beq.n	800489a <DMA_Init+0x3ba>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a67      	ldr	r2, [pc, #412]	; (800499c <DMA_Init+0x4bc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d04a      	beq.n	800489a <DMA_Init+0x3ba>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <DMA_Init+0x4c0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d045      	beq.n	800489a <DMA_Init+0x3ba>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a64      	ldr	r2, [pc, #400]	; (80049a4 <DMA_Init+0x4c4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d040      	beq.n	800489a <DMA_Init+0x3ba>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a62      	ldr	r2, [pc, #392]	; (80049a8 <DMA_Init+0x4c8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d03b      	beq.n	800489a <DMA_Init+0x3ba>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a61      	ldr	r2, [pc, #388]	; (80049ac <DMA_Init+0x4cc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d036      	beq.n	800489a <DMA_Init+0x3ba>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5f      	ldr	r2, [pc, #380]	; (80049b0 <DMA_Init+0x4d0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d031      	beq.n	800489a <DMA_Init+0x3ba>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a5e      	ldr	r2, [pc, #376]	; (80049b4 <DMA_Init+0x4d4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d02c      	beq.n	800489a <DMA_Init+0x3ba>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a5c      	ldr	r2, [pc, #368]	; (80049b8 <DMA_Init+0x4d8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d027      	beq.n	800489a <DMA_Init+0x3ba>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <DMA_Init+0x4dc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <DMA_Init+0x3ba>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a59      	ldr	r2, [pc, #356]	; (80049c0 <DMA_Init+0x4e0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01d      	beq.n	800489a <DMA_Init+0x3ba>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <DMA_Init+0x4e4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <DMA_Init+0x3ba>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a56      	ldr	r2, [pc, #344]	; (80049c8 <DMA_Init+0x4e8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <DMA_Init+0x3ba>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a55      	ldr	r2, [pc, #340]	; (80049cc <DMA_Init+0x4ec>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <DMA_Init+0x3ba>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <DMA_Init+0x4f0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <DMA_Init+0x3ba>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <DMA_Init+0x4f4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <DMA_Init+0x3ba>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a50      	ldr	r2, [pc, #320]	; (80049d8 <DMA_Init+0x4f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <DMA_Init+0x3be>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <DMA_Init+0x3c0>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e008      	b.n	80048c0 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b6:	d103      	bne.n	80048c0 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048be:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c6:	4b45      	ldr	r3, [pc, #276]	; (80049dc <DMA_Init+0x4fc>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a36      	ldr	r2, [pc, #216]	; (80049bc <DMA_Init+0x4dc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <DMA_Init+0x44c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a35      	ldr	r2, [pc, #212]	; (80049c0 <DMA_Init+0x4e0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <DMA_Init+0x44c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a33      	ldr	r2, [pc, #204]	; (80049c4 <DMA_Init+0x4e4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <DMA_Init+0x44c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <DMA_Init+0x4e8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <DMA_Init+0x44c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a30      	ldr	r2, [pc, #192]	; (80049cc <DMA_Init+0x4ec>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <DMA_Init+0x44c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <DMA_Init+0x4f0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <DMA_Init+0x44c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <DMA_Init+0x4f4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <DMA_Init+0x44c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <DMA_Init+0x4f8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <DMA_Init+0x450>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <DMA_Init+0x452>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40020050 	.word	0x40020050
 8004960:	50020050 	.word	0x50020050
 8004964:	400200d0 	.word	0x400200d0
 8004968:	500200d0 	.word	0x500200d0
 800496c:	40020150 	.word	0x40020150
 8004970:	50020150 	.word	0x50020150
 8004974:	400201d0 	.word	0x400201d0
 8004978:	500201d0 	.word	0x500201d0
 800497c:	40020250 	.word	0x40020250
 8004980:	50020250 	.word	0x50020250
 8004984:	400202d0 	.word	0x400202d0
 8004988:	500202d0 	.word	0x500202d0
 800498c:	40020350 	.word	0x40020350
 8004990:	50020350 	.word	0x50020350
 8004994:	400203d0 	.word	0x400203d0
 8004998:	500203d0 	.word	0x500203d0
 800499c:	40020450 	.word	0x40020450
 80049a0:	50020450 	.word	0x50020450
 80049a4:	400204d0 	.word	0x400204d0
 80049a8:	500204d0 	.word	0x500204d0
 80049ac:	40020550 	.word	0x40020550
 80049b0:	50020550 	.word	0x50020550
 80049b4:	400205d0 	.word	0x400205d0
 80049b8:	500205d0 	.word	0x500205d0
 80049bc:	40020650 	.word	0x40020650
 80049c0:	50020650 	.word	0x50020650
 80049c4:	400206d0 	.word	0x400206d0
 80049c8:	500206d0 	.word	0x500206d0
 80049cc:	40020750 	.word	0x40020750
 80049d0:	50020750 	.word	0x50020750
 80049d4:	400207d0 	.word	0x400207d0
 80049d8:	500207d0 	.word	0x500207d0
 80049dc:	3cc03180 	.word	0x3cc03180

080049e0 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7fe fb78 	bl	80030dc <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0dc      	b.n	8004bb2 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6f      	ldr	r2, [pc, #444]	; (8004bbc <HAL_DMAEx_List_Init+0x1dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f000 809f 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6d      	ldr	r2, [pc, #436]	; (8004bc0 <HAL_DMAEx_List_Init+0x1e0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	f000 8099 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a6b      	ldr	r2, [pc, #428]	; (8004bc4 <HAL_DMAEx_List_Init+0x1e4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f000 8093 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_DMAEx_List_Init+0x1e8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	f000 808d 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a67      	ldr	r2, [pc, #412]	; (8004bcc <HAL_DMAEx_List_Init+0x1ec>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	f000 8087 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	; (8004bd0 <HAL_DMAEx_List_Init+0x1f0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f000 8081 	beq.w	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a63      	ldr	r2, [pc, #396]	; (8004bd4 <HAL_DMAEx_List_Init+0x1f4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d07b      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a62      	ldr	r2, [pc, #392]	; (8004bd8 <HAL_DMAEx_List_Init+0x1f8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d076      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a60      	ldr	r2, [pc, #384]	; (8004bdc <HAL_DMAEx_List_Init+0x1fc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d071      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5f      	ldr	r2, [pc, #380]	; (8004be0 <HAL_DMAEx_List_Init+0x200>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d06c      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	; (8004be4 <HAL_DMAEx_List_Init+0x204>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d067      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a5c      	ldr	r2, [pc, #368]	; (8004be8 <HAL_DMAEx_List_Init+0x208>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d062      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5a      	ldr	r2, [pc, #360]	; (8004bec <HAL_DMAEx_List_Init+0x20c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d05d      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a59      	ldr	r2, [pc, #356]	; (8004bf0 <HAL_DMAEx_List_Init+0x210>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d058      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_DMAEx_List_Init+0x214>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d053      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a56      	ldr	r2, [pc, #344]	; (8004bf8 <HAL_DMAEx_List_Init+0x218>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d04e      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a54      	ldr	r2, [pc, #336]	; (8004bfc <HAL_DMAEx_List_Init+0x21c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d049      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a53      	ldr	r2, [pc, #332]	; (8004c00 <HAL_DMAEx_List_Init+0x220>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d044      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a51      	ldr	r2, [pc, #324]	; (8004c04 <HAL_DMAEx_List_Init+0x224>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d03f      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a50      	ldr	r2, [pc, #320]	; (8004c08 <HAL_DMAEx_List_Init+0x228>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d03a      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a4e      	ldr	r2, [pc, #312]	; (8004c0c <HAL_DMAEx_List_Init+0x22c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d035      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4d      	ldr	r2, [pc, #308]	; (8004c10 <HAL_DMAEx_List_Init+0x230>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d030      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a4b      	ldr	r2, [pc, #300]	; (8004c14 <HAL_DMAEx_List_Init+0x234>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02b      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a4a      	ldr	r2, [pc, #296]	; (8004c18 <HAL_DMAEx_List_Init+0x238>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d026      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a48      	ldr	r2, [pc, #288]	; (8004c1c <HAL_DMAEx_List_Init+0x23c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d021      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a47      	ldr	r2, [pc, #284]	; (8004c20 <HAL_DMAEx_List_Init+0x240>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01c      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a45      	ldr	r2, [pc, #276]	; (8004c24 <HAL_DMAEx_List_Init+0x244>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d017      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a44      	ldr	r2, [pc, #272]	; (8004c28 <HAL_DMAEx_List_Init+0x248>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d012      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a42      	ldr	r2, [pc, #264]	; (8004c2c <HAL_DMAEx_List_Init+0x24c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00d      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a41      	ldr	r2, [pc, #260]	; (8004c30 <HAL_DMAEx_List_Init+0x250>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d008      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a3f      	ldr	r2, [pc, #252]	; (8004c34 <HAL_DMAEx_List_Init+0x254>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <HAL_DMAEx_List_Init+0x162>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a3e      	ldr	r2, [pc, #248]	; (8004c38 <HAL_DMAEx_List_Init+0x258>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0206 	orr.w	r2, r2, #6
 8004b62:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004b64:	e00f      	b.n	8004b86 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004b66:	f7fe fab9 	bl	80030dc <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b05      	cmp	r3, #5
 8004b72:	d908      	bls.n	8004b86 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2210      	movs	r2, #16
 8004b78:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e015      	b.n	8004bb2 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e8      	bne.n	8004b66 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fa27 	bl	8004fe8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40020050 	.word	0x40020050
 8004bc0:	50020050 	.word	0x50020050
 8004bc4:	400200d0 	.word	0x400200d0
 8004bc8:	500200d0 	.word	0x500200d0
 8004bcc:	40020150 	.word	0x40020150
 8004bd0:	50020150 	.word	0x50020150
 8004bd4:	400201d0 	.word	0x400201d0
 8004bd8:	500201d0 	.word	0x500201d0
 8004bdc:	40020250 	.word	0x40020250
 8004be0:	50020250 	.word	0x50020250
 8004be4:	400202d0 	.word	0x400202d0
 8004be8:	500202d0 	.word	0x500202d0
 8004bec:	40020350 	.word	0x40020350
 8004bf0:	50020350 	.word	0x50020350
 8004bf4:	400203d0 	.word	0x400203d0
 8004bf8:	500203d0 	.word	0x500203d0
 8004bfc:	40020450 	.word	0x40020450
 8004c00:	50020450 	.word	0x50020450
 8004c04:	400204d0 	.word	0x400204d0
 8004c08:	500204d0 	.word	0x500204d0
 8004c0c:	40020550 	.word	0x40020550
 8004c10:	50020550 	.word	0x50020550
 8004c14:	400205d0 	.word	0x400205d0
 8004c18:	500205d0 	.word	0x500205d0
 8004c1c:	40020650 	.word	0x40020650
 8004c20:	50020650 	.word	0x50020650
 8004c24:	400206d0 	.word	0x400206d0
 8004c28:	500206d0 	.word	0x500206d0
 8004c2c:	40020750 	.word	0x40020750
 8004c30:	50020750 	.word	0x50020750
 8004c34:	400207d0 	.word	0x400207d0
 8004c38:	500207d0 	.word	0x500207d0

08004c3c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_DMAEx_List_BuildNode+0x16>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e004      	b.n	8004c60 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb1d 	bl	8005298 <DMA_List_BuildNode>

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	; 0x30
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_DMAEx_List_InsertNode+0x18>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0b6      	b.n	8004df2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d104      	bne.n	8004c96 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2204      	movs	r2, #4
 8004c90:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0ad      	b.n	8004df2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fc4c 	bl	800553c <DMA_List_CheckNodesBaseAddresses>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2205      	movs	r2, #5
 8004cae:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e09e      	b.n	8004df2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68b9      	ldr	r1, [r7, #8]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fc6d 	bl	800559c <DMA_List_CheckNodesTypes>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e08f      	b.n	8004df2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004cde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fc93 	bl	8005614 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11a      	bne.n	8004d2c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	e06c      	b.n	8004de4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004d16:	4013      	ands	r3, r2
 8004d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d1c:	4319      	orrs	r1, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2202      	movs	r2, #2
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	e05b      	b.n	8004de4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d42:	4319      	orrs	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e043      	b.n	8004dda <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004d56:	f107 0314 	add.w	r3, r7, #20
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fc88 	bl	8005674 <DMA_List_FindNode>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d132      	bne.n	8004dd0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d11a      	bne.n	8004daa <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00b      	beq.n	8004d94 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	461a      	mov	r2, r3
 8004d82:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004d86:	4013      	ands	r3, r2
 8004d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d8c:	4319      	orrs	r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da0:	4319      	orrs	r1, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004da8:	e017      	b.n	8004dda <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc6:	4319      	orrs	r1, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dce:	e004      	b.n	8004dda <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2206      	movs	r2, #6
 8004dd4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00b      	b.n	8004df2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3730      	adds	r7, #48	; 0x30
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08a      	sub	sp, #40	; 0x28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e052      	b.n	8004eb2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e049      	b.n	8004eb2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d101      	bne.n	8004e36 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	e03d      	b.n	8004eb2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e038      	b.n	8004eb2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d104      	bne.n	8004e52 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e02f      	b.n	8004eb2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f107 0220 	add.w	r2, r7, #32
 8004e66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fbd2 	bl	8005614 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fbf9 	bl	8005674 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4610      	mov	r0, r2
 8004e94:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004e96:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004e98:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3728      	adds	r7, #40	; 0x28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_DMAEx_List_LinkQ+0x16>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e072      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004edc:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d002      	beq.n	8004ef0 <HAL_DMAEx_List_LinkQ+0x34>
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d108      	bne.n	8004f02 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2240      	movs	r2, #64	; 0x40
 8004ef4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e05c      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	7b1b      	ldrb	r3, [r3, #12]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d104      	bne.n	8004f16 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e052      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_DMAEx_List_LinkQ+0x110>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_DMAEx_List_LinkQ+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <HAL_DMAEx_List_LinkQ+0x118>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a25      	ldr	r2, [pc, #148]	; (8004fd8 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <HAL_DMAEx_List_LinkQ+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <HAL_DMAEx_List_LinkQ+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_DMAEx_List_LinkQ+0xaa>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <HAL_DMAEx_List_LinkQ+0x128>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_DMAEx_List_LinkQ+0xae>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <HAL_DMAEx_List_LinkQ+0xb0>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2203      	movs	r2, #3
 8004f82:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e019      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	2b81      	cmp	r3, #129	; 0x81
 8004f8e:	d108      	bne.n	8004fa2 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e00c      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d004      	beq.n	8004fb4 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2204      	movs	r2, #4
 8004fae:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e003      	b.n	8004fbc <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40020650 	.word	0x40020650
 8004fcc:	50020650 	.word	0x50020650
 8004fd0:	400206d0 	.word	0x400206d0
 8004fd4:	500206d0 	.word	0x500206d0
 8004fd8:	40020750 	.word	0x40020750
 8004fdc:	50020750 	.word	0x50020750
 8004fe0:	400207d0 	.word	0x400207d0
 8004fe4:	500207d0 	.word	0x500207d0

08004fe8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a85      	ldr	r2, [pc, #532]	; (8005218 <DMA_List_Init+0x230>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f000 80a0 	beq.w	8005148 <DMA_List_Init+0x160>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a83      	ldr	r2, [pc, #524]	; (800521c <DMA_List_Init+0x234>)
 800500e:	4293      	cmp	r3, r2
 8005010:	f000 809a 	beq.w	8005148 <DMA_List_Init+0x160>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a81      	ldr	r2, [pc, #516]	; (8005220 <DMA_List_Init+0x238>)
 800501a:	4293      	cmp	r3, r2
 800501c:	f000 8094 	beq.w	8005148 <DMA_List_Init+0x160>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a7f      	ldr	r2, [pc, #508]	; (8005224 <DMA_List_Init+0x23c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	f000 808e 	beq.w	8005148 <DMA_List_Init+0x160>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7d      	ldr	r2, [pc, #500]	; (8005228 <DMA_List_Init+0x240>)
 8005032:	4293      	cmp	r3, r2
 8005034:	f000 8088 	beq.w	8005148 <DMA_List_Init+0x160>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7b      	ldr	r2, [pc, #492]	; (800522c <DMA_List_Init+0x244>)
 800503e:	4293      	cmp	r3, r2
 8005040:	f000 8082 	beq.w	8005148 <DMA_List_Init+0x160>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a79      	ldr	r2, [pc, #484]	; (8005230 <DMA_List_Init+0x248>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d07c      	beq.n	8005148 <DMA_List_Init+0x160>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a78      	ldr	r2, [pc, #480]	; (8005234 <DMA_List_Init+0x24c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d077      	beq.n	8005148 <DMA_List_Init+0x160>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a76      	ldr	r2, [pc, #472]	; (8005238 <DMA_List_Init+0x250>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d072      	beq.n	8005148 <DMA_List_Init+0x160>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a75      	ldr	r2, [pc, #468]	; (800523c <DMA_List_Init+0x254>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d06d      	beq.n	8005148 <DMA_List_Init+0x160>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a73      	ldr	r2, [pc, #460]	; (8005240 <DMA_List_Init+0x258>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d068      	beq.n	8005148 <DMA_List_Init+0x160>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a72      	ldr	r2, [pc, #456]	; (8005244 <DMA_List_Init+0x25c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d063      	beq.n	8005148 <DMA_List_Init+0x160>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a70      	ldr	r2, [pc, #448]	; (8005248 <DMA_List_Init+0x260>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d05e      	beq.n	8005148 <DMA_List_Init+0x160>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6f      	ldr	r2, [pc, #444]	; (800524c <DMA_List_Init+0x264>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d059      	beq.n	8005148 <DMA_List_Init+0x160>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a6d      	ldr	r2, [pc, #436]	; (8005250 <DMA_List_Init+0x268>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d054      	beq.n	8005148 <DMA_List_Init+0x160>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6c      	ldr	r2, [pc, #432]	; (8005254 <DMA_List_Init+0x26c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d04f      	beq.n	8005148 <DMA_List_Init+0x160>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <DMA_List_Init+0x270>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d04a      	beq.n	8005148 <DMA_List_Init+0x160>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a69      	ldr	r2, [pc, #420]	; (800525c <DMA_List_Init+0x274>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d045      	beq.n	8005148 <DMA_List_Init+0x160>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a67      	ldr	r2, [pc, #412]	; (8005260 <DMA_List_Init+0x278>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d040      	beq.n	8005148 <DMA_List_Init+0x160>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a66      	ldr	r2, [pc, #408]	; (8005264 <DMA_List_Init+0x27c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d03b      	beq.n	8005148 <DMA_List_Init+0x160>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a64      	ldr	r2, [pc, #400]	; (8005268 <DMA_List_Init+0x280>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d036      	beq.n	8005148 <DMA_List_Init+0x160>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a63      	ldr	r2, [pc, #396]	; (800526c <DMA_List_Init+0x284>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d031      	beq.n	8005148 <DMA_List_Init+0x160>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a61      	ldr	r2, [pc, #388]	; (8005270 <DMA_List_Init+0x288>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d02c      	beq.n	8005148 <DMA_List_Init+0x160>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a60      	ldr	r2, [pc, #384]	; (8005274 <DMA_List_Init+0x28c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d027      	beq.n	8005148 <DMA_List_Init+0x160>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a5e      	ldr	r2, [pc, #376]	; (8005278 <DMA_List_Init+0x290>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <DMA_List_Init+0x160>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a5d      	ldr	r2, [pc, #372]	; (800527c <DMA_List_Init+0x294>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01d      	beq.n	8005148 <DMA_List_Init+0x160>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5b      	ldr	r2, [pc, #364]	; (8005280 <DMA_List_Init+0x298>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <DMA_List_Init+0x160>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a5a      	ldr	r2, [pc, #360]	; (8005284 <DMA_List_Init+0x29c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <DMA_List_Init+0x160>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a58      	ldr	r2, [pc, #352]	; (8005288 <DMA_List_Init+0x2a0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <DMA_List_Init+0x160>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a57      	ldr	r2, [pc, #348]	; (800528c <DMA_List_Init+0x2a4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <DMA_List_Init+0x160>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a55      	ldr	r2, [pc, #340]	; (8005290 <DMA_List_Init+0x2a8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <DMA_List_Init+0x160>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a54      	ldr	r2, [pc, #336]	; (8005294 <DMA_List_Init+0x2ac>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <DMA_List_Init+0x164>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <DMA_List_Init+0x166>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	430a      	orrs	r2, r1
 800516e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005180:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a36      	ldr	r2, [pc, #216]	; (8005278 <DMA_List_Init+0x290>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <DMA_List_Init+0x202>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a34      	ldr	r2, [pc, #208]	; (800527c <DMA_List_Init+0x294>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <DMA_List_Init+0x202>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a33      	ldr	r2, [pc, #204]	; (8005280 <DMA_List_Init+0x298>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <DMA_List_Init+0x202>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a31      	ldr	r2, [pc, #196]	; (8005284 <DMA_List_Init+0x29c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <DMA_List_Init+0x202>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a30      	ldr	r2, [pc, #192]	; (8005288 <DMA_List_Init+0x2a0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <DMA_List_Init+0x202>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2e      	ldr	r2, [pc, #184]	; (800528c <DMA_List_Init+0x2a4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <DMA_List_Init+0x202>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2d      	ldr	r2, [pc, #180]	; (8005290 <DMA_List_Init+0x2a8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <DMA_List_Init+0x202>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2b      	ldr	r2, [pc, #172]	; (8005294 <DMA_List_Init+0x2ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <DMA_List_Init+0x206>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <DMA_List_Init+0x208>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2200      	movs	r2, #0
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2200      	movs	r2, #0
 8005202:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2200      	movs	r2, #0
 800520a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40020050 	.word	0x40020050
 800521c:	50020050 	.word	0x50020050
 8005220:	400200d0 	.word	0x400200d0
 8005224:	500200d0 	.word	0x500200d0
 8005228:	40020150 	.word	0x40020150
 800522c:	50020150 	.word	0x50020150
 8005230:	400201d0 	.word	0x400201d0
 8005234:	500201d0 	.word	0x500201d0
 8005238:	40020250 	.word	0x40020250
 800523c:	50020250 	.word	0x50020250
 8005240:	400202d0 	.word	0x400202d0
 8005244:	500202d0 	.word	0x500202d0
 8005248:	40020350 	.word	0x40020350
 800524c:	50020350 	.word	0x50020350
 8005250:	400203d0 	.word	0x400203d0
 8005254:	500203d0 	.word	0x500203d0
 8005258:	40020450 	.word	0x40020450
 800525c:	50020450 	.word	0x50020450
 8005260:	400204d0 	.word	0x400204d0
 8005264:	500204d0 	.word	0x500204d0
 8005268:	40020550 	.word	0x40020550
 800526c:	50020550 	.word	0x50020550
 8005270:	400205d0 	.word	0x400205d0
 8005274:	500205d0 	.word	0x500205d0
 8005278:	40020650 	.word	0x40020650
 800527c:	50020650 	.word	0x50020650
 8005280:	400206d0 	.word	0x400206d0
 8005284:	500206d0 	.word	0x500206d0
 8005288:	40020750 	.word	0x40020750
 800528c:	50020750 	.word	0x50020750
 8005290:	400207d0 	.word	0x400207d0
 8005294:	500207d0 	.word	0x500207d0

08005298 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80052aa:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80052b0:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80052b6:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 80052bc:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d017      	beq.n	80052fe <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	051b      	lsls	r3, r3, #20
 80052e4:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80052e8:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	3b01      	subs	r3, #1
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80052f6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80052f8:	431a      	orrs	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	f240 237f 	movw	r3, #639	; 0x27f
 800530a:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800530c:	431a      	orrs	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531a:	d10c      	bne.n	8005336 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	e00a      	b.n	800534c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800533e:	d105      	bne.n	800534c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00f      	beq.n	8005374 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800536c:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800536e:	431a      	orrs	r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005378:	b29a      	uxth	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d04e      	beq.n	8005428 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005392:	3b01      	subs	r3, #1
 8005394:	0419      	lsls	r1, r3, #16
 8005396:	4b67      	ldr	r3, [pc, #412]	; (8005534 <DMA_List_BuildNode+0x29c>)
 8005398:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 800539a:	431a      	orrs	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da06      	bge.n	80053b6 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	e005      	b.n	80053c2 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da06      	bge.n	80053d8 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	e005      	b.n	80053e4 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da06      	bge.n	80053fa <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	e005      	b.n	8005406 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	2b00      	cmp	r3, #0
 800540c:	da06      	bge.n	800541c <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	e005      	b.n	8005428 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d059      	beq.n	80054f8 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005448:	2b00      	cmp	r3, #0
 800544a:	da09      	bge.n	8005460 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	425b      	negs	r3, r3
 8005452:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	615a      	str	r2, [r3, #20]
 800545e:	e005      	b.n	800546c <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	2b00      	cmp	r3, #0
 8005472:	da0d      	bge.n	8005490 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	425b      	negs	r3, r3
 800547a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	0419      	lsls	r1, r3, #16
 8005484:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <DMA_List_BuildNode+0x2a0>)
 8005486:	400b      	ands	r3, r1
 8005488:	431a      	orrs	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	615a      	str	r2, [r3, #20]
 800548e:	e009      	b.n	80054a4 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005498:	0419      	lsls	r1, r3, #16
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <DMA_List_BuildNode+0x2a0>)
 800549c:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800549e:	431a      	orrs	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da08      	bge.n	80054be <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	425b      	negs	r3, r3
 80054b2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	619a      	str	r2, [r3, #24]
 80054bc:	e004      	b.n	80054c8 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da0b      	bge.n	80054e8 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	425b      	negs	r3, r3
 80054d6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054e0:	431a      	orrs	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	619a      	str	r2, [r3, #24]
 80054e6:	e007      	b.n	80054f8 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80054f2:	431a      	orrs	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d006      	beq.n	800551a <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005518:	e005      	b.n	8005526 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	07ff0000 	.word	0x07ff0000
 8005538:	1fff0000 	.word	0x1fff0000

0800553c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e00a      	b.n	800557e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e004      	b.n	800557e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	041b      	lsls	r3, r3, #16
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e00e      	b.n	80055da <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e006      	b.n	80055da <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80055ec:	2302      	movs	r3, #2
 80055ee:	e00b      	b.n	8005608 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d001      	beq.n	8005606 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005602:	2303      	movs	r3, #3
 8005604:	e000      	b.n	8005608 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a0d      	ldr	r2, [pc, #52]	; (800566c <DMA_List_GetCLLRNodeInfo+0x58>)
 8005636:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00f      	beq.n	800565e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005644:	e00b      	b.n	800565e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005650:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2205      	movs	r2, #5
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	bf00      	nop
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	fe010000 	.word	0xfe010000
 8005670:	f8010000 	.word	0xf8010000

08005674 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	; 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d142      	bne.n	800571e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8005698:	e01d      	b.n	80056d6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d107      	bne.n	80056b0 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	e00f      	b.n	80056d0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4413      	add	r3, r2
 80056c0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80056c8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3301      	adds	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d3dc      	bcc.n	800569a <DMA_List_FindNode+0x26>
 80056e0:	e029      	b.n	8005736 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e00f      	b.n	8005718 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0c1b      	lsrs	r3, r3, #16
 8005702:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4413      	add	r3, r2
 8005708:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005710:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3301      	adds	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	429a      	cmp	r2, r3
 8005726:	d206      	bcs.n	8005736 <DMA_List_FindNode+0xc2>
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800572e:	4013      	ands	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d1d5      	bne.n	80056e2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005742:	4013      	ands	r3, r2
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	429a      	cmp	r2, r3
 8005748:	d001      	beq.n	800574e <DMA_List_FindNode+0xda>
    {
      return 1U;
 800574a:	2301      	movs	r3, #1
 800574c:	e02b      	b.n	80057a6 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	0c1b      	lsrs	r3, r3, #16
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	461a      	mov	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	461a      	mov	r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005790:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005794:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3724      	adds	r7, #36	; 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	; 0x24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80057c6:	e1ba      	b.n	8005b3e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	2101      	movs	r1, #1
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	4013      	ands	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 81aa 	beq.w	8005b38 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a55      	ldr	r2, [pc, #340]	; (800593c <HAL_GPIO_Init+0x188>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d15d      	bne.n	80058a8 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80057f2:	2201      	movs	r2, #1
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	4013      	ands	r3, r2
 8005800:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0201 	and.w	r2, r3, #1
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	4313      	orrs	r3, r2
 8005814:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800581c:	4a48      	ldr	r2, [pc, #288]	; (8005940 <HAL_GPIO_Init+0x18c>)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005824:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005826:	4a46      	ldr	r2, [pc, #280]	; (8005940 <HAL_GPIO_Init+0x18c>)
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	08da      	lsrs	r2, r3, #3
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3208      	adds	r2, #8
 800583a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	220f      	movs	r2, #15
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43db      	mvns	r3, r3
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	4013      	ands	r3, r2
 8005854:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	220b      	movs	r2, #11
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	4313      	orrs	r3, r2
 8005868:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	08da      	lsrs	r2, r3, #3
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	3208      	adds	r2, #8
 8005872:	69f9      	ldr	r1, [r7, #28]
 8005874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	2203      	movs	r2, #3
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	4013      	ands	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	2202      	movs	r2, #2
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e067      	b.n	8005978 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x104>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b12      	cmp	r3, #18
 80058b6:	d145      	bne.n	8005944 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	08da      	lsrs	r2, r3, #3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3208      	adds	r2, #8
 80058c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	220f      	movs	r2, #15
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	4013      	ands	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 020f 	and.w	r2, r3, #15
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	08da      	lsrs	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3208      	adds	r2, #8
 80058fe:	69f9      	ldr	r1, [r7, #28]
 8005900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	2203      	movs	r2, #3
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	4013      	ands	r3, r2
 800591a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f003 0203 	and.w	r2, r3, #3
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e01e      	b.n	8005978 <HAL_GPIO_Init+0x1c4>
 800593a:	bf00      	nop
 800593c:	46020000 	.word	0x46020000
 8005940:	0800f3f0 	.word	0x0800f3f0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	2203      	movs	r2, #3
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	4013      	ands	r3, r2
 800595a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 0203 	and.w	r2, r3, #3
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	4313      	orrs	r3, r2
 8005970:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d00b      	beq.n	8005998 <HAL_GPIO_Init+0x1e4>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d007      	beq.n	8005998 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800598c:	2b11      	cmp	r3, #17
 800598e:	d003      	beq.n	8005998 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b12      	cmp	r3, #18
 8005996:	d130      	bne.n	80059fa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	2203      	movs	r2, #3
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80059ce:	2201      	movs	r2, #1
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69fa      	ldr	r2, [r7, #28]
 80059da:	4013      	ands	r3, r2
 80059dc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	f003 0201 	and.w	r2, r3, #1
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d017      	beq.n	8005a32 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	4013      	ands	r3, r2
 8005a18:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07c      	beq.n	8005b38 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005a3e:	4a47      	ldr	r2, [pc, #284]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	3318      	adds	r3, #24
 8005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	220f      	movs	r2, #15
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0a9a      	lsrs	r2, r3, #10
 8005a66:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <HAL_GPIO_Init+0x3ac>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f002 0203 	and.w	r2, r2, #3
 8005a70:	00d2      	lsls	r2, r2, #3
 8005a72:	4093      	lsls	r3, r2
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005a7a:	4938      	ldr	r1, [pc, #224]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	3318      	adds	r3, #24
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005aac:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005ab2:	4b2a      	ldr	r3, [pc, #168]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005adc:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69fa      	ldr	r2, [r7, #28]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005b02:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005b30:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <HAL_GPIO_Init+0x3a8>)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f ae3d 	bne.w	80057c8 <HAL_GPIO_Init+0x14>
  }
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	3724      	adds	r7, #36	; 0x24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	46022000 	.word	0x46022000
 8005b60:	002f7f7f 	.word	0x002f7f7f

08005b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
 8005b70:	4613      	mov	r3, r2
 8005b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b74:	787b      	ldrb	r3, [r7, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005b80:	e002      	b.n	8005b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005baa:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f814 	bl	8005be0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005bb8:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d006      	beq.n	8005bd2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005bc4:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f812 	bl	8005bf6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	46022000 	.word	0x46022000

08005be0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e081      	b.n	8005d22 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fc f8a4 	bl	8001d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2224      	movs	r2, #36	; 0x24
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	e006      	b.n	8005c94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d104      	bne.n	8005ca6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69d9      	ldr	r1, [r3, #28]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d138      	bne.n	8005db2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e032      	b.n	8005db4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2224      	movs	r2, #36	; 0x24
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0201 	orr.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e000      	b.n	8005db4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d139      	bne.n	8005e4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e033      	b.n	8005e4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	; 0x24
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005e12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	e007      	b.n	8005e86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 0204 	bic.w	r2, r3, #4
 8005e7e:	4905      	ldr	r1, [pc, #20]	; (8005e94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40030400 	.word	0x40030400

08005e98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_ICACHE_Enable+0x1c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <HAL_ICACHE_Enable+0x1c>)
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40030400 	.word	0x40030400

08005eb8 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	e141      	b.n	8006154 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f947 	bl	8006168 <MDF_GetHandleNumberFromInstance>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4a86      	ldr	r2, [pc, #536]	; (80060f8 <HAL_MDF_Init+0x240>)
 8005ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
 8005eea:	e133      	b.n	8006154 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fb fd33 	bl	8001958 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005ef2:	4b82      	ldr	r3, [pc, #520]	; (80060fc <HAL_MDF_Init+0x244>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11d      	bne.n	8005f36 <HAL_MDF_Init+0x7e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a80      	ldr	r2, [pc, #512]	; (8006100 <HAL_MDF_Init+0x248>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d023      	beq.n	8005f4c <HAL_MDF_Init+0x94>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a7e      	ldr	r2, [pc, #504]	; (8006104 <HAL_MDF_Init+0x24c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01e      	beq.n	8005f4c <HAL_MDF_Init+0x94>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a7d      	ldr	r2, [pc, #500]	; (8006108 <HAL_MDF_Init+0x250>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d019      	beq.n	8005f4c <HAL_MDF_Init+0x94>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7b      	ldr	r2, [pc, #492]	; (800610c <HAL_MDF_Init+0x254>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d014      	beq.n	8005f4c <HAL_MDF_Init+0x94>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a7a      	ldr	r2, [pc, #488]	; (8006110 <HAL_MDF_Init+0x258>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <HAL_MDF_Init+0x94>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a78      	ldr	r2, [pc, #480]	; (8006114 <HAL_MDF_Init+0x25c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00a      	beq.n	8005f4c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005f36:	4b78      	ldr	r3, [pc, #480]	; (8006118 <HAL_MDF_Init+0x260>)
 8005f38:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f040 8090 	bne.w	8006060 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a75      	ldr	r2, [pc, #468]	; (800611c <HAL_MDF_Init+0x264>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f040 808a 	bne.w	8006060 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a72      	ldr	r2, [pc, #456]	; (800611c <HAL_MDF_Init+0x264>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <HAL_MDF_Init+0xa2>
 8005f56:	4b72      	ldr	r3, [pc, #456]	; (8006120 <HAL_MDF_Init+0x268>)
 8005f58:	e000      	b.n	8005f5c <HAL_MDF_Init+0xa4>
 8005f5a:	4b72      	ldr	r3, [pc, #456]	; (8006124 <HAL_MDF_Init+0x26c>)
 8005f5c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da02      	bge.n	8005f6c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
 8005f6a:	e079      	b.n	8006060 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a63      	ldr	r2, [pc, #396]	; (8006100 <HAL_MDF_Init+0x248>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_MDF_Init+0xf0>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a62      	ldr	r2, [pc, #392]	; (8006104 <HAL_MDF_Init+0x24c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_MDF_Init+0xf0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a60      	ldr	r2, [pc, #384]	; (8006108 <HAL_MDF_Init+0x250>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_MDF_Init+0xf0>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_MDF_Init+0x254>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_MDF_Init+0xf0>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a5d      	ldr	r2, [pc, #372]	; (8006110 <HAL_MDF_Init+0x258>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_MDF_Init+0xf0>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a5c      	ldr	r2, [pc, #368]	; (8006114 <HAL_MDF_Init+0x25c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10d      	bne.n	8005fc4 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7b1b      	ldrb	r3, [r3, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d137      	bne.n	8006054 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	3b01      	subs	r3, #1
 8005fee:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005ff4:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8005ffc:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8005ffe:	431a      	orrs	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	7e1b      	ldrb	r3, [r3, #24]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d123      	bne.n	8006054 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3b      	ldr	r2, [pc, #236]	; (8006100 <HAL_MDF_Init+0x248>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d012      	beq.n	800603c <HAL_MDF_Init+0x184>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3a      	ldr	r2, [pc, #232]	; (8006104 <HAL_MDF_Init+0x24c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00d      	beq.n	800603c <HAL_MDF_Init+0x184>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a38      	ldr	r2, [pc, #224]	; (8006108 <HAL_MDF_Init+0x250>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d008      	beq.n	800603c <HAL_MDF_Init+0x184>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a37      	ldr	r2, [pc, #220]	; (800610c <HAL_MDF_Init+0x254>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <HAL_MDF_Init+0x184>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a35      	ldr	r2, [pc, #212]	; (8006110 <HAL_MDF_Init+0x258>)
 800603a:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8006048:	430b      	orrs	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	f043 0210 	orr.w	r2, r3, #16
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d128      	bne.n	80060b8 <HAL_MDF_Init+0x200>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800606c:	2b01      	cmp	r3, #1
 800606e:	d123      	bne.n	80060b8 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	da02      	bge.n	8006080 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
 800607e:	e01b      	b.n	80060b8 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6819      	ldr	r1, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8006098:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d14a      	bne.n	8006154 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 021f 	bic.w	r2, r2, #31
 80060cc:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <HAL_MDF_Init+0x264>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d11e      	bne.n	8006128 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <HAL_MDF_Init+0x260>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	4a09      	ldr	r2, [pc, #36]	; (8006118 <HAL_MDF_Init+0x260>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	e01d      	b.n	8006132 <HAL_MDF_Init+0x27a>
 80060f6:	bf00      	nop
 80060f8:	20001110 	.word	0x20001110
 80060fc:	20001108 	.word	0x20001108
 8006100:	40025080 	.word	0x40025080
 8006104:	40025100 	.word	0x40025100
 8006108:	40025180 	.word	0x40025180
 800610c:	40025200 	.word	0x40025200
 8006110:	40025280 	.word	0x40025280
 8006114:	40025300 	.word	0x40025300
 8006118:	2000110c 	.word	0x2000110c
 800611c:	46024080 	.word	0x46024080
 8006120:	46024000 	.word	0x46024000
 8006124:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <HAL_MDF_Init+0x2a8>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <HAL_MDF_Init+0x2a8>)
 8006130:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f816 	bl	8006168 <MDF_GetHandleNumberFromInstance>
 800613c:	4602      	mov	r2, r0
 800613e:	4909      	ldr	r1, [pc, #36]	; (8006164 <HAL_MDF_Init+0x2ac>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20001108 	.word	0x20001108
 8006164:	20001110 	.word	0x20001110

08006168 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <MDF_GetHandleNumberFromInstance+0x70>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d102      	bne.n	800617e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e024      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a16      	ldr	r2, [pc, #88]	; (80061dc <MDF_GetHandleNumberFromInstance+0x74>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d102      	bne.n	800618c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8006186:	2301      	movs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e01d      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <MDF_GetHandleNumberFromInstance+0x78>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d102      	bne.n	800619a <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8006194:	2302      	movs	r3, #2
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e016      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <MDF_GetHandleNumberFromInstance+0x7c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d102      	bne.n	80061a8 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80061a2:	2303      	movs	r3, #3
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e00f      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0f      	ldr	r2, [pc, #60]	; (80061e8 <MDF_GetHandleNumberFromInstance+0x80>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d102      	bne.n	80061b6 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80061b0:	2304      	movs	r3, #4
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e008      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a0c      	ldr	r2, [pc, #48]	; (80061ec <MDF_GetHandleNumberFromInstance+0x84>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d102      	bne.n	80061c4 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80061be:	2305      	movs	r3, #5
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e001      	b.n	80061c8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80061c4:	2306      	movs	r3, #6
 80061c6:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 80061c8:	68fb      	ldr	r3, [r7, #12]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40025080 	.word	0x40025080
 80061dc:	40025100 	.word	0x40025100
 80061e0:	40025180 	.word	0x40025180
 80061e4:	40025200 	.word	0x40025200
 80061e8:	40025280 	.word	0x40025280
 80061ec:	40025300 	.word	0x40025300

080061f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	b08f      	sub	sp, #60	; 0x3c
 80061f4:	af0a      	add	r7, sp, #40	; 0x28
 80061f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e116      	b.n	8006430 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fc fbd7 	bl	80029d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2203      	movs	r2, #3
 8006226:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f008 f8e5 	bl	800e410 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	687e      	ldr	r6, [r7, #4]
 800624e:	466d      	mov	r5, sp
 8006250:	f106 0410 	add.w	r4, r6, #16
 8006254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800625a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006260:	e885 0003 	stmia.w	r5, {r0, r1}
 8006264:	1d33      	adds	r3, r6, #4
 8006266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f008 f8a5 	bl	800e3b8 <USB_CoreInit>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e0d7      	b.n	8006430 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f008 f8d3 	bl	800e432 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800628c:	2300      	movs	r3, #0
 800628e:	73fb      	strb	r3, [r7, #15]
 8006290:	e04a      	b.n	8006328 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006292:	7bfa      	ldrb	r2, [r7, #15]
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	333d      	adds	r3, #61	; 0x3d
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062a6:	7bfa      	ldrb	r2, [r7, #15]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	333c      	adds	r3, #60	; 0x3c
 80062b6:	7bfa      	ldrb	r2, [r7, #15]
 80062b8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	b298      	uxth	r0, r3
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3356      	adds	r3, #86	; 0x56
 80062ce:	4602      	mov	r2, r0
 80062d0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3340      	adds	r3, #64	; 0x40
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	3344      	adds	r3, #68	; 0x44
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062fa:	7bfa      	ldrb	r2, [r7, #15]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3348      	adds	r3, #72	; 0x48
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	334c      	adds	r3, #76	; 0x4c
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	3301      	adds	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]
 8006328:	7bfa      	ldrb	r2, [r7, #15]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	429a      	cmp	r2, r3
 8006330:	d3af      	bcc.n	8006292 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	e044      	b.n	80063c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006338:	7bfa      	ldrb	r2, [r7, #15]
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	440b      	add	r3, r1
 800635c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006360:	7bfa      	ldrb	r2, [r7, #15]
 8006362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006364:	7bfa      	ldrb	r2, [r7, #15]
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	3301      	adds	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d3b5      	bcc.n	8006338 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	687e      	ldr	r6, [r7, #4]
 80063d4:	466d      	mov	r5, sp
 80063d6:	f106 0410 	add.w	r4, r6, #16
 80063da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80063ea:	1d33      	adds	r3, r6, #4
 80063ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063ee:	6838      	ldr	r0, [r7, #0]
 80063f0:	f008 f86c 	bl	800e4cc <USB_DevInit>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e014      	b.n	8006430 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b01      	cmp	r3, #1
 800641c:	d102      	bne.n	8006424 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f80a 	bl	8006438 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f008 fa10 	bl	800e84e <USB_DevDisconnect>

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006438 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800646a:	f043 0303 	orr.w	r3, r3, #3
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006488:	4b39      	ldr	r3, [pc, #228]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006490:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d10b      	bne.n	80064b2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d905      	bls.n	80064ae <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80064a2:	4b33      	ldr	r3, [pc, #204]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	4a32      	ldr	r2, [pc, #200]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064ac:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e057      	b.n	8006562 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b8:	d90a      	bls.n	80064d0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80064ba:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064cc:	60d3      	str	r3, [r2, #12]
 80064ce:	e007      	b.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064d8:	4925      	ldr	r1, [pc, #148]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80064e0:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a24      	ldr	r2, [pc, #144]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	099b      	lsrs	r3, r3, #6
 80064ec:	2232      	movs	r2, #50	; 0x32
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80064f4:	fba2 2303 	umull	r2, r3, r2, r3
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80064fe:	e002      	b.n	8006506 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006506:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f3      	bne.n	8006500 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01b      	beq.n	8006556 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006524:	fba2 2303 	umull	r2, r3, r2, r3
 8006528:	099b      	lsrs	r3, r3, #6
 800652a:	2232      	movs	r2, #50	; 0x32
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	4a11      	ldr	r2, [pc, #68]	; (8006578 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	099b      	lsrs	r3, r3, #6
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800653c:	e002      	b.n	8006544 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3b01      	subs	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f3      	bne.n	800653e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e000      	b.n	8006562 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	46020800 	.word	0x46020800
 8006574:	20000000 	.word	0x20000000
 8006578:	10624dd3 	.word	0x10624dd3

0800657c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <HAL_PWREx_GetVoltageRange+0x18>)
 8006582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006588:	4618      	mov	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	46020800 	.word	0x46020800

08006598 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	4a04      	ldr	r2, [pc, #16]	; (80065b4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6113      	str	r3, [r2, #16]
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	46020800 	.word	0x46020800

080065b8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80065c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065c6:	6113      	str	r3, [r2, #16]
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	46020800 	.word	0x46020800

080065d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80065dc:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80065e8:	bf00      	nop
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	46020800 	.word	0x46020800

080065f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08e      	sub	sp, #56	; 0x38
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8006600:	2300      	movs	r3, #0
 8006602:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d102      	bne.n	8006612 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f000 bec8 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006612:	4b99      	ldr	r3, [pc, #612]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 030c 	and.w	r3, r3, #12
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800661c:	4b96      	ldr	r3, [pc, #600]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 816c 	beq.w	800690c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	2b00      	cmp	r3, #0
 8006638:	d007      	beq.n	800664a <HAL_RCC_OscConfig+0x52>
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b0c      	cmp	r3, #12
 800663e:	f040 80de 	bne.w	80067fe <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 80da 	bne.w	80067fe <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	f000 bea5 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800665c:	4b86      	ldr	r3, [pc, #536]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <HAL_RCC_OscConfig+0x7a>
 8006668:	4b83      	ldr	r3, [pc, #524]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006670:	e005      	b.n	800667e <HAL_RCC_OscConfig+0x86>
 8006672:	4b81      	ldr	r3, [pc, #516]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800667e:	4293      	cmp	r3, r2
 8006680:	d255      	bcs.n	800672e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f9df 	bl	8007a50 <RCC_SetFlashLatencyFromMSIRange>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	f000 be82 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800669e:	4b76      	ldr	r3, [pc, #472]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4a75      	ldr	r2, [pc, #468]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	4b73      	ldr	r3, [pc, #460]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	4970      	ldr	r1, [pc, #448]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80066c4:	d309      	bcc.n	80066da <HAL_RCC_OscConfig+0xe2>
 80066c6:	4b6c      	ldr	r3, [pc, #432]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f023 021f 	bic.w	r2, r3, #31
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	4969      	ldr	r1, [pc, #420]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60cb      	str	r3, [r1, #12]
 80066d8:	e07e      	b.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0a      	bge.n	80066f8 <HAL_RCC_OscConfig+0x100>
 80066e2:	4b65      	ldr	r3, [pc, #404]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	015b      	lsls	r3, r3, #5
 80066f0:	4961      	ldr	r1, [pc, #388]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60cb      	str	r3, [r1, #12]
 80066f6:	e06f      	b.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d30a      	bcc.n	8006718 <HAL_RCC_OscConfig+0x120>
 8006702:	4b5d      	ldr	r3, [pc, #372]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	029b      	lsls	r3, r3, #10
 8006710:	4959      	ldr	r1, [pc, #356]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006712:	4313      	orrs	r3, r2
 8006714:	60cb      	str	r3, [r1, #12]
 8006716:	e05f      	b.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
 8006718:	4b57      	ldr	r3, [pc, #348]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	03db      	lsls	r3, r3, #15
 8006726:	4954      	ldr	r1, [pc, #336]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006728:	4313      	orrs	r3, r2
 800672a:	60cb      	str	r3, [r1, #12]
 800672c:	e054      	b.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800672e:	4b52      	ldr	r3, [pc, #328]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4a51      	ldr	r2, [pc, #324]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006734:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006738:	6093      	str	r3, [r2, #8]
 800673a:	4b4f      	ldr	r3, [pc, #316]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	494c      	ldr	r1, [pc, #304]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006748:	4313      	orrs	r3, r2
 800674a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006754:	d309      	bcc.n	800676a <HAL_RCC_OscConfig+0x172>
 8006756:	4b48      	ldr	r3, [pc, #288]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f023 021f 	bic.w	r2, r3, #31
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	4945      	ldr	r1, [pc, #276]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006764:	4313      	orrs	r3, r2
 8006766:	60cb      	str	r3, [r1, #12]
 8006768:	e028      	b.n	80067bc <HAL_RCC_OscConfig+0x1c4>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	da0a      	bge.n	8006788 <HAL_RCC_OscConfig+0x190>
 8006772:	4b41      	ldr	r3, [pc, #260]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	015b      	lsls	r3, r3, #5
 8006780:	493d      	ldr	r1, [pc, #244]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006782:	4313      	orrs	r3, r2
 8006784:	60cb      	str	r3, [r1, #12]
 8006786:	e019      	b.n	80067bc <HAL_RCC_OscConfig+0x1c4>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006790:	d30a      	bcc.n	80067a8 <HAL_RCC_OscConfig+0x1b0>
 8006792:	4b39      	ldr	r3, [pc, #228]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	4935      	ldr	r1, [pc, #212]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60cb      	str	r3, [r1, #12]
 80067a6:	e009      	b.n	80067bc <HAL_RCC_OscConfig+0x1c4>
 80067a8:	4b33      	ldr	r3, [pc, #204]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	03db      	lsls	r3, r3, #15
 80067b6:	4930      	ldr	r1, [pc, #192]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	4618      	mov	r0, r3
 80067c8:	f001 f942 	bl	8007a50 <RCC_SetFlashLatencyFromMSIRange>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f000 bde5 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80067d8:	f001 f8e4 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067dc:	4b27      	ldr	r3, [pc, #156]	; (800687c <HAL_RCC_OscConfig+0x284>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fc fc31 	bl	8003048 <HAL_InitTick>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80067ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 808a 	beq.w	800690a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80067f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067fa:	f000 bdd2 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d066      	beq.n	80068d4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006806:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006812:	f7fc fc63 	bl	80030dc <HAL_GetTick>
 8006816:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006818:	e009      	b.n	800682e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800681a:	f7fc fc5f 	bl	80030dc <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d902      	bls.n	800682e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	f000 bdba 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800682e:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0ef      	beq.n	800681a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006844:	6093      	str	r3, [r2, #8]
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	4909      	ldr	r1, [pc, #36]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006854:	4313      	orrs	r3, r2
 8006856:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006860:	d30e      	bcc.n	8006880 <HAL_RCC_OscConfig+0x288>
 8006862:	4b05      	ldr	r3, [pc, #20]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f023 021f 	bic.w	r2, r3, #31
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	4902      	ldr	r1, [pc, #8]	; (8006878 <HAL_RCC_OscConfig+0x280>)
 8006870:	4313      	orrs	r3, r2
 8006872:	60cb      	str	r3, [r1, #12]
 8006874:	e04a      	b.n	800690c <HAL_RCC_OscConfig+0x314>
 8006876:	bf00      	nop
 8006878:	46020c00 	.word	0x46020c00
 800687c:	20000004 	.word	0x20000004
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	da0a      	bge.n	800689e <HAL_RCC_OscConfig+0x2a6>
 8006888:	4b98      	ldr	r3, [pc, #608]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	015b      	lsls	r3, r3, #5
 8006896:	4995      	ldr	r1, [pc, #596]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006898:	4313      	orrs	r3, r2
 800689a:	60cb      	str	r3, [r1, #12]
 800689c:	e036      	b.n	800690c <HAL_RCC_OscConfig+0x314>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a6:	d30a      	bcc.n	80068be <HAL_RCC_OscConfig+0x2c6>
 80068a8:	4b90      	ldr	r3, [pc, #576]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	498d      	ldr	r1, [pc, #564]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60cb      	str	r3, [r1, #12]
 80068bc:	e026      	b.n	800690c <HAL_RCC_OscConfig+0x314>
 80068be:	4b8b      	ldr	r3, [pc, #556]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	03db      	lsls	r3, r3, #15
 80068cc:	4987      	ldr	r1, [pc, #540]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60cb      	str	r3, [r1, #12]
 80068d2:	e01b      	b.n	800690c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80068d4:	4b85      	ldr	r3, [pc, #532]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a84      	ldr	r2, [pc, #528]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80068e0:	f7fc fbfc 	bl	80030dc <HAL_GetTick>
 80068e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80068e6:	e009      	b.n	80068fc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068e8:	f7fc fbf8 	bl	80030dc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d902      	bls.n	80068fc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	f000 bd53 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80068fc:	4b7b      	ldr	r3, [pc, #492]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1ef      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
 8006908:	e000      	b.n	800690c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800690a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 808b 	beq.w	8006a30 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	2b08      	cmp	r3, #8
 800691e:	d005      	beq.n	800692c <HAL_RCC_OscConfig+0x334>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	2b0c      	cmp	r3, #12
 8006924:	d109      	bne.n	800693a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b03      	cmp	r3, #3
 800692a:	d106      	bne.n	800693a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d17d      	bne.n	8006a30 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	f000 bd34 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006942:	d106      	bne.n	8006952 <HAL_RCC_OscConfig+0x35a>
 8006944:	4b69      	ldr	r3, [pc, #420]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a68      	ldr	r2, [pc, #416]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e041      	b.n	80069d6 <HAL_RCC_OscConfig+0x3de>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695a:	d112      	bne.n	8006982 <HAL_RCC_OscConfig+0x38a>
 800695c:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a62      	ldr	r2, [pc, #392]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	4b60      	ldr	r3, [pc, #384]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5f      	ldr	r2, [pc, #380]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800696e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4b5d      	ldr	r3, [pc, #372]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a5c      	ldr	r2, [pc, #368]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800697a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e029      	b.n	80069d6 <HAL_RCC_OscConfig+0x3de>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800698a:	d112      	bne.n	80069b2 <HAL_RCC_OscConfig+0x3ba>
 800698c:	4b57      	ldr	r3, [pc, #348]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a56      	ldr	r2, [pc, #344]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b54      	ldr	r3, [pc, #336]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a53      	ldr	r2, [pc, #332]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 800699e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b51      	ldr	r3, [pc, #324]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a50      	ldr	r2, [pc, #320]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e011      	b.n	80069d6 <HAL_RCC_OscConfig+0x3de>
 80069b2:	4b4e      	ldr	r3, [pc, #312]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4d      	ldr	r2, [pc, #308]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b4b      	ldr	r3, [pc, #300]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4a      	ldr	r2, [pc, #296]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b48      	ldr	r3, [pc, #288]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a47      	ldr	r2, [pc, #284]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d014      	beq.n	8006a08 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80069de:	f7fc fb7d 	bl	80030dc <HAL_GetTick>
 80069e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069e4:	e009      	b.n	80069fa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e6:	f7fc fb79 	bl	80030dc <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b64      	cmp	r3, #100	; 0x64
 80069f2:	d902      	bls.n	80069fa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	f000 bcd4 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069fa:	4b3c      	ldr	r3, [pc, #240]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0ef      	beq.n	80069e6 <HAL_RCC_OscConfig+0x3ee>
 8006a06:	e013      	b.n	8006a30 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006a08:	f7fc fb68 	bl	80030dc <HAL_GetTick>
 8006a0c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a0e:	e009      	b.n	8006a24 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a10:	f7fc fb64 	bl	80030dc <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b64      	cmp	r3, #100	; 0x64
 8006a1c:	d902      	bls.n	8006a24 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	f000 bcbf 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a24:	4b31      	ldr	r3, [pc, #196]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ef      	bne.n	8006a10 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d05f      	beq.n	8006afc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	d005      	beq.n	8006a4e <HAL_RCC_OscConfig+0x456>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d114      	bne.n	8006a72 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d111      	bne.n	8006a72 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f000 bca3 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b23      	ldr	r3, [pc, #140]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	4920      	ldr	r1, [pc, #128]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a70:	e044      	b.n	8006afc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d024      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1b      	ldr	r2, [pc, #108]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006a86:	f7fc fb29 	bl	80030dc <HAL_GetTick>
 8006a8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8c:	e009      	b.n	8006aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a8e:	f7fc fb25 	bl	80030dc <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d902      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	f000 bc80 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0ef      	beq.n	8006a8e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	490b      	ldr	r1, [pc, #44]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	610b      	str	r3, [r1, #16]
 8006ac2:	e01b      	b.n	8006afc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <HAL_RCC_OscConfig+0x4f4>)
 8006aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ace:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ad0:	f7fc fb04 	bl	80030dc <HAL_GetTick>
 8006ad4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ad6:	e00b      	b.n	8006af0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ad8:	f7fc fb00 	bl	80030dc <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d904      	bls.n	8006af0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	f000 bc5b 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
 8006aec:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006af0:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ed      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80c8 	beq.w	8006c9a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b10:	4ba7      	ldr	r3, [pc, #668]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b16:	f003 0304 	and.w	r3, r3, #4
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d111      	bne.n	8006b42 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b1e:	4ba4      	ldr	r3, [pc, #656]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b24:	4aa2      	ldr	r2, [pc, #648]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006b26:	f043 0304 	orr.w	r3, r3, #4
 8006b2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b2e:	4ba0      	ldr	r3, [pc, #640]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b42:	4b9c      	ldr	r3, [pc, #624]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b4e:	4b99      	ldr	r3, [pc, #612]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	4a98      	ldr	r2, [pc, #608]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b5a:	f7fc fabf 	bl	80030dc <HAL_GetTick>
 8006b5e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b60:	e009      	b.n	8006b76 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b62:	f7fc fabb 	bl	80030dc <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d902      	bls.n	8006b76 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	f000 bc16 	b.w	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b76:	4b8f      	ldr	r3, [pc, #572]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ef      	beq.n	8006b62 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d05f      	beq.n	8006c4a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006b8a:	4b89      	ldr	r3, [pc, #548]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b90:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d037      	beq.n	8006c10 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d006      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e3f4      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01b      	beq.n	8006bfa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006bc2:	4b7b      	ldr	r3, [pc, #492]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc8:	4a79      	ldr	r2, [pc, #484]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006bca:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8006bd2:	f7fc fa83 	bl	80030dc <HAL_GetTick>
 8006bd6:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bda:	f7fc fa7f 	bl	80030dc <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e3da      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006bec:	4b70      	ldr	r3, [pc, #448]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1ef      	bne.n	8006bda <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006bfa:	4b6d      	ldr	r3, [pc, #436]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	4969      	ldr	r1, [pc, #420]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006c10:	4b67      	ldr	r3, [pc, #412]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c16:	4a66      	ldr	r2, [pc, #408]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006c20:	f7fc fa5c 	bl	80030dc <HAL_GetTick>
 8006c24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c28:	f7fc fa58 	bl	80030dc <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e3b3      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c3a:	4b5d      	ldr	r3, [pc, #372]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ef      	beq.n	8006c28 <HAL_RCC_OscConfig+0x630>
 8006c48:	e01b      	b.n	8006c82 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006c4a:	4b59      	ldr	r3, [pc, #356]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c50:	4a57      	ldr	r2, [pc, #348]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c52:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006c5a:	f7fc fa3f 	bl	80030dc <HAL_GetTick>
 8006c5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c60:	e008      	b.n	8006c74 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c62:	f7fc fa3b 	bl	80030dc <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e396      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c74:	4b4e      	ldr	r3, [pc, #312]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1ef      	bne.n	8006c62 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d107      	bne.n	8006c9a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8a:	4b49      	ldr	r3, [pc, #292]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c90:	4a47      	ldr	r2, [pc, #284]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006c92:	f023 0304 	bic.w	r3, r3, #4
 8006c96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8111 	beq.w	8006eca <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cae:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d111      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cbc:	4b3c      	ldr	r3, [pc, #240]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cc2:	4a3b      	ldr	r2, [pc, #236]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006ccc:	4b38      	ldr	r3, [pc, #224]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006ce0:	4b34      	ldr	r3, [pc, #208]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d118      	bne.n	8006d1e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006cec:	4b31      	ldr	r3, [pc, #196]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	4a30      	ldr	r2, [pc, #192]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf8:	f7fc f9f0 	bl	80030dc <HAL_GetTick>
 8006cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d00:	f7fc f9ec 	bl	80030dc <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e347      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d12:	4b28      	ldr	r3, [pc, #160]	; (8006db4 <HAL_RCC_OscConfig+0x7bc>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01f      	beq.n	8006d6a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d36:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d3e:	f043 0304 	orr.w	r3, r3, #4
 8006d42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d46:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d4c:	4a18      	ldr	r2, [pc, #96]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d56:	e018      	b.n	8006d8a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d5e:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d68:	e00f      	b.n	8006d8a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d6a:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d72:	f023 0301 	bic.w	r3, r3, #1
 8006d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d80:	4a0b      	ldr	r2, [pc, #44]	; (8006db0 <HAL_RCC_OscConfig+0x7b8>)
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d057      	beq.n	8006e42 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006d92:	f7fc f9a3 	bl	80030dc <HAL_GetTick>
 8006d96:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d98:	e00e      	b.n	8006db8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d9a:	f7fc f99f 	bl	80030dc <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d905      	bls.n	8006db8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e2f8      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
 8006db0:	46020c00 	.word	0x46020c00
 8006db4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db8:	4b9c      	ldr	r3, [pc, #624]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0e9      	beq.n	8006d9a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dd2:	4b96      	ldr	r3, [pc, #600]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd8:	4a94      	ldr	r2, [pc, #592]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006de2:	e00a      	b.n	8006dfa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fc f97a 	bl	80030dc <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e2d3      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006dfa:	4b8c      	ldr	r3, [pc, #560]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ed      	beq.n	8006de4 <HAL_RCC_OscConfig+0x7ec>
 8006e08:	e053      	b.n	8006eb2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e0a:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e10:	4a86      	ldr	r2, [pc, #536]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fc f95e 	bl	80030dc <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e2b7      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e32:	4b7e      	ldr	r3, [pc, #504]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1ed      	bne.n	8006e1c <HAL_RCC_OscConfig+0x824>
 8006e40:	e037      	b.n	8006eb2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006e42:	f7fc f94b 	bl	80030dc <HAL_GetTick>
 8006e46:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fc f947 	bl	80030dc <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e2a0      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e60:	4b72      	ldr	r3, [pc, #456]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ed      	bne.n	8006e4a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006e6e:	4b6f      	ldr	r3, [pc, #444]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01a      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e7c:	4b6b      	ldr	r3, [pc, #428]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e82:	4a6a      	ldr	r2, [pc, #424]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e8c:	e00a      	b.n	8006ea4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e8e:	f7fc f925 	bl	80030dc <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e27e      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ea4:	4b61      	ldr	r3, [pc, #388]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1ed      	bne.n	8006e8e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d107      	bne.n	8006eca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eba:	4b5c      	ldr	r3, [pc, #368]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec0:	4a5a      	ldr	r2, [pc, #360]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d036      	beq.n	8006f44 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d019      	beq.n	8006f12 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006ede:	4b53      	ldr	r3, [pc, #332]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a52      	ldr	r2, [pc, #328]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ee8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006eea:	f7fc f8f7 	bl	80030dc <HAL_GetTick>
 8006eee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006ef0:	e008      	b.n	8006f04 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ef2:	f7fc f8f3 	bl	80030dc <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e24e      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f04:	4b49      	ldr	r3, [pc, #292]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f0      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x8fa>
 8006f10:	e018      	b.n	8006f44 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006f12:	4b46      	ldr	r3, [pc, #280]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a45      	ldr	r2, [pc, #276]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f1c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f1e:	f7fc f8dd 	bl	80030dc <HAL_GetTick>
 8006f22:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f24:	e008      	b.n	8006f38 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f26:	f7fc f8d9 	bl	80030dc <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d901      	bls.n	8006f38 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e234      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f38:	4b3c      	ldr	r3, [pc, #240]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f0      	bne.n	8006f26 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d036      	beq.n	8006fbe <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d019      	beq.n	8006f8c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006f58:	4b34      	ldr	r3, [pc, #208]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a33      	ldr	r2, [pc, #204]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f64:	f7fc f8ba 	bl	80030dc <HAL_GetTick>
 8006f68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006f6c:	f7fc f8b6 	bl	80030dc <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e211      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x974>
 8006f8a:	e018      	b.n	8006fbe <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006f8c:	4b27      	ldr	r3, [pc, #156]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a26      	ldr	r2, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006f92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f98:	f7fc f8a0 	bl	80030dc <HAL_GetTick>
 8006f9c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006fa0:	f7fc f89c 	bl	80030dc <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e1f7      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006fb2:	4b1e      	ldr	r3, [pc, #120]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d07f      	beq.n	80070ca <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d062      	beq.n	8007098 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006fd2:	4b16      	ldr	r3, [pc, #88]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fdc:	6093      	str	r3, [r2, #8]
 8006fde:	4b13      	ldr	r3, [pc, #76]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	4910      	ldr	r1, [pc, #64]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006ff8:	d309      	bcc.n	800700e <HAL_RCC_OscConfig+0xa16>
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f023 021f 	bic.w	r2, r3, #31
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	4909      	ldr	r1, [pc, #36]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8007008:	4313      	orrs	r3, r2
 800700a:	60cb      	str	r3, [r1, #12]
 800700c:	e02a      	b.n	8007064 <HAL_RCC_OscConfig+0xa6c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	da0c      	bge.n	8007030 <HAL_RCC_OscConfig+0xa38>
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	015b      	lsls	r3, r3, #5
 8007024:	4901      	ldr	r1, [pc, #4]	; (800702c <HAL_RCC_OscConfig+0xa34>)
 8007026:	4313      	orrs	r3, r2
 8007028:	60cb      	str	r3, [r1, #12]
 800702a:	e01b      	b.n	8007064 <HAL_RCC_OscConfig+0xa6c>
 800702c:	46020c00 	.word	0x46020c00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007038:	d30a      	bcc.n	8007050 <HAL_RCC_OscConfig+0xa58>
 800703a:	4ba1      	ldr	r3, [pc, #644]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	029b      	lsls	r3, r3, #10
 8007048:	499d      	ldr	r1, [pc, #628]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800704a:	4313      	orrs	r3, r2
 800704c:	60cb      	str	r3, [r1, #12]
 800704e:	e009      	b.n	8007064 <HAL_RCC_OscConfig+0xa6c>
 8007050:	4b9b      	ldr	r3, [pc, #620]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	03db      	lsls	r3, r3, #15
 800705e:	4998      	ldr	r1, [pc, #608]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007060:	4313      	orrs	r3, r2
 8007062:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007064:	4b96      	ldr	r3, [pc, #600]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a95      	ldr	r2, [pc, #596]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800706a:	f043 0310 	orr.w	r3, r3, #16
 800706e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007070:	f7fc f834 	bl	80030dc <HAL_GetTick>
 8007074:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007078:	f7fc f830 	bl	80030dc <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e18b      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800708a:	4b8d      	ldr	r3, [pc, #564]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0xa80>
 8007096:	e018      	b.n	80070ca <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007098:	4b89      	ldr	r3, [pc, #548]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a88      	ldr	r2, [pc, #544]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800709e:	f023 0310 	bic.w	r3, r3, #16
 80070a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070a4:	f7fc f81a 	bl	80030dc <HAL_GetTick>
 80070a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80070ac:	f7fc f816 	bl	80030dc <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e171      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80070be:	4b80      	ldr	r3, [pc, #512]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f0      	bne.n	80070ac <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8166 	beq.w	80073a0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070da:	4b79      	ldr	r3, [pc, #484]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f003 030c 	and.w	r3, r3, #12
 80070e2:	2b0c      	cmp	r3, #12
 80070e4:	f000 80f2 	beq.w	80072cc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f040 80c5 	bne.w	800727c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80070f2:	4b73      	ldr	r3, [pc, #460]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a72      	ldr	r2, [pc, #456]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80070f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80070fe:	f7fb ffed 	bl	80030dc <HAL_GetTick>
 8007102:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007106:	f7fb ffe9 	bl	80030dc <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e144      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007118:	4b69      	ldr	r3, [pc, #420]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1f0      	bne.n	8007106 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007124:	4b66      	ldr	r3, [pc, #408]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d111      	bne.n	8007156 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007132:	4b63      	ldr	r3, [pc, #396]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007138:	4a61      	ldr	r2, [pc, #388]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800713a:	f043 0304 	orr.w	r3, r3, #4
 800713e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007142:	4b5f      	ldr	r3, [pc, #380]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007156:	4b5b      	ldr	r3, [pc, #364]	; (80072c4 <HAL_RCC_OscConfig+0xccc>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800715e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007162:	d102      	bne.n	800716a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007164:	2301      	movs	r3, #1
 8007166:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800716a:	4b56      	ldr	r3, [pc, #344]	; (80072c4 <HAL_RCC_OscConfig+0xccc>)
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4a55      	ldr	r2, [pc, #340]	; (80072c4 <HAL_RCC_OscConfig+0xccc>)
 8007170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007174:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007176:	4b52      	ldr	r3, [pc, #328]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800718a:	3a01      	subs	r2, #1
 800718c:	0212      	lsls	r2, r2, #8
 800718e:	4311      	orrs	r1, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007194:	430a      	orrs	r2, r1
 8007196:	494a      	ldr	r1, [pc, #296]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007198:	4313      	orrs	r3, r2
 800719a:	628b      	str	r3, [r1, #40]	; 0x28
 800719c:	4b48      	ldr	r3, [pc, #288]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800719e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a0:	4b49      	ldr	r3, [pc, #292]	; (80072c8 <HAL_RCC_OscConfig+0xcd0>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071a8:	3a01      	subs	r2, #1
 80071aa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071b2:	3a01      	subs	r2, #1
 80071b4:	0252      	lsls	r2, r2, #9
 80071b6:	b292      	uxth	r2, r2
 80071b8:	4311      	orrs	r1, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80071be:	3a01      	subs	r2, #1
 80071c0:	0412      	lsls	r2, r2, #16
 80071c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80071c6:	4311      	orrs	r1, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80071cc:	3a01      	subs	r2, #1
 80071ce:	0612      	lsls	r2, r2, #24
 80071d0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80071d4:	430a      	orrs	r2, r1
 80071d6:	493a      	ldr	r1, [pc, #232]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80071dc:	4b38      	ldr	r3, [pc, #224]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	4a37      	ldr	r2, [pc, #220]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071e2:	f023 0310 	bic.w	r3, r3, #16
 80071e6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ec:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80071f2:	4b33      	ldr	r3, [pc, #204]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	4a32      	ldr	r2, [pc, #200]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80071f8:	f043 0310 	orr.w	r3, r3, #16
 80071fc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80071fe:	4b30      	ldr	r3, [pc, #192]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	f023 020c 	bic.w	r2, r3, #12
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	492d      	ldr	r1, [pc, #180]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8007210:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007218:	4b2a      	ldr	r3, [pc, #168]	; (80072c4 <HAL_RCC_OscConfig+0xccc>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	4a29      	ldr	r2, [pc, #164]	; (80072c4 <HAL_RCC_OscConfig+0xccc>)
 800721e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007222:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007224:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800722c:	4b24      	ldr	r3, [pc, #144]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800722e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007232:	4a23      	ldr	r2, [pc, #140]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007234:	f023 0304 	bic.w	r3, r3, #4
 8007238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007246:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007248:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800724e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007252:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007254:	f7fb ff42 	bl	80030dc <HAL_GetTick>
 8007258:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fb ff3e 	bl	80030dc <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e099      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCC_OscConfig+0xc64>
 800727a:	e091      	b.n	80073a0 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800727c:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0f      	ldr	r2, [pc, #60]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 8007282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007286:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007288:	f7fb ff28 	bl	80030dc <HAL_GetTick>
 800728c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007290:	f7fb ff24 	bl	80030dc <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e07f      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80072a2:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1f0      	bne.n	8007290 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	4a03      	ldr	r2, [pc, #12]	; (80072c0 <HAL_RCC_OscConfig+0xcc8>)
 80072b4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80072b8:	f023 0303 	bic.w	r3, r3, #3
 80072bc:	6293      	str	r3, [r2, #40]	; 0x28
 80072be:	e06f      	b.n	80073a0 <HAL_RCC_OscConfig+0xda8>
 80072c0:	46020c00 	.word	0x46020c00
 80072c4:	46020800 	.word	0x46020800
 80072c8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80072cc:	4b37      	ldr	r3, [pc, #220]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072d2:	4b36      	ldr	r3, [pc, #216]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 80072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d039      	beq.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f003 0203 	and.w	r2, r3, #3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d132      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	0a1b      	lsrs	r3, r3, #8
 80072f2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d129      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800730a:	429a      	cmp	r2, r3
 800730c:	d122      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007318:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800731a:	429a      	cmp	r2, r3
 800731c:	d11a      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	0a5b      	lsrs	r3, r3, #9
 8007322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800732c:	429a      	cmp	r2, r3
 800732e:	d111      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d108      	bne.n	8007354 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007350:	429a      	cmp	r2, r3
 8007352:	d001      	beq.n	8007358 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e024      	b.n	80073a2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007358:	4b14      	ldr	r3, [pc, #80]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	08db      	lsrs	r3, r3, #3
 800735e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007366:	429a      	cmp	r2, r3
 8007368:	d01a      	beq.n	80073a0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	4a0f      	ldr	r2, [pc, #60]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 8007370:	f023 0310 	bic.w	r3, r3, #16
 8007374:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007376:	f7fb feb1 	bl	80030dc <HAL_GetTick>
 800737a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800737c:	bf00      	nop
 800737e:	f7fb fead 	bl	80030dc <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	4293      	cmp	r3, r2
 8007388:	d0f9      	beq.n	800737e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738e:	4a07      	ldr	r2, [pc, #28]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	4a04      	ldr	r2, [pc, #16]	; (80073ac <HAL_RCC_OscConfig+0xdb4>)
 800739a:	f043 0310 	orr.w	r3, r3, #16
 800739e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3738      	adds	r7, #56	; 0x38
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	46020c00 	.word	0x46020c00

080073b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e1d9      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073c4:	4b9b      	ldr	r3, [pc, #620]	; (8007634 <HAL_RCC_ClockConfig+0x284>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d910      	bls.n	80073f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d2:	4b98      	ldr	r3, [pc, #608]	; (8007634 <HAL_RCC_ClockConfig+0x284>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 020f 	bic.w	r2, r3, #15
 80073da:	4996      	ldr	r1, [pc, #600]	; (8007634 <HAL_RCC_ClockConfig+0x284>)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b94      	ldr	r3, [pc, #592]	; (8007634 <HAL_RCC_ClockConfig+0x284>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e1c1      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d010      	beq.n	8007422 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695a      	ldr	r2, [r3, #20]
 8007404:	4b8c      	ldr	r3, [pc, #560]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800740c:	429a      	cmp	r2, r3
 800740e:	d908      	bls.n	8007422 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007410:	4b89      	ldr	r3, [pc, #548]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	4986      	ldr	r1, [pc, #536]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 800741e:	4313      	orrs	r3, r2
 8007420:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d012      	beq.n	8007454 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	4b81      	ldr	r3, [pc, #516]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800743c:	429a      	cmp	r2, r3
 800743e:	d909      	bls.n	8007454 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007440:	4b7d      	ldr	r3, [pc, #500]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	497a      	ldr	r1, [pc, #488]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007450:	4313      	orrs	r3, r2
 8007452:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d010      	beq.n	8007482 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	4b74      	ldr	r3, [pc, #464]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800746c:	429a      	cmp	r2, r3
 800746e:	d908      	bls.n	8007482 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007470:	4b71      	ldr	r3, [pc, #452]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	496e      	ldr	r1, [pc, #440]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 800747e:	4313      	orrs	r3, r2
 8007480:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d010      	beq.n	80074b0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	4b69      	ldr	r3, [pc, #420]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	429a      	cmp	r2, r3
 800749c:	d908      	bls.n	80074b0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800749e:	4b66      	ldr	r3, [pc, #408]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	f023 020f 	bic.w	r2, r3, #15
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	4963      	ldr	r1, [pc, #396]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 80d2 	beq.w	8007662 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80074be:	2300      	movs	r3, #0
 80074c0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d143      	bne.n	8007552 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ca:	4b5b      	ldr	r3, [pc, #364]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d110      	bne.n	80074fa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80074d8:	4b57      	ldr	r3, [pc, #348]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074de:	4a56      	ldr	r2, [pc, #344]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074e0:	f043 0304 	orr.w	r3, r3, #4
 80074e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80074e8:	4b53      	ldr	r3, [pc, #332]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80074ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	60bb      	str	r3, [r7, #8]
 80074f4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80074fa:	f7fb fdef 	bl	80030dc <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007500:	4b4e      	ldr	r3, [pc, #312]	; (800763c <HAL_RCC_ClockConfig+0x28c>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00f      	beq.n	800752c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800750c:	e008      	b.n	8007520 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800750e:	f7fb fde5 	bl	80030dc <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d901      	bls.n	8007520 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e12b      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007520:	4b46      	ldr	r3, [pc, #280]	; (800763c <HAL_RCC_ClockConfig+0x28c>)
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0f0      	beq.n	800750e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d107      	bne.n	8007542 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007532:	4b41      	ldr	r3, [pc, #260]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007538:	4a3f      	ldr	r2, [pc, #252]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 800753a:	f023 0304 	bic.w	r3, r3, #4
 800753e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007542:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d121      	bne.n	8007592 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e112      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d107      	bne.n	800756a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800755a:	4b37      	ldr	r3, [pc, #220]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d115      	bne.n	8007592 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e106      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007572:	4b31      	ldr	r3, [pc, #196]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e0fa      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007582:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e0f2      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007592:	4b29      	ldr	r3, [pc, #164]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f023 0203 	bic.w	r2, r3, #3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4926      	ldr	r1, [pc, #152]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80075a4:	f7fb fd9a 	bl	80030dc <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d112      	bne.n	80075d8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075b2:	e00a      	b.n	80075ca <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b4:	f7fb fd92 	bl	80030dc <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e0d6      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075ca:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d1ee      	bne.n	80075b4 <HAL_RCC_ClockConfig+0x204>
 80075d6:	e044      	b.n	8007662 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d112      	bne.n	8007606 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80075e0:	e00a      	b.n	80075f8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e2:	f7fb fd7b 	bl	80030dc <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e0bf      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f003 030c 	and.w	r3, r3, #12
 8007600:	2b08      	cmp	r3, #8
 8007602:	d1ee      	bne.n	80075e2 <HAL_RCC_ClockConfig+0x232>
 8007604:	e02d      	b.n	8007662 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d123      	bne.n	8007656 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800760e:	e00a      	b.n	8007626 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007610:	f7fb fd64 	bl	80030dc <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	f241 3288 	movw	r2, #5000	; 0x1388
 800761e:	4293      	cmp	r3, r2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e0a8      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <HAL_RCC_ClockConfig+0x288>)
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1ee      	bne.n	8007610 <HAL_RCC_ClockConfig+0x260>
 8007632:	e016      	b.n	8007662 <HAL_RCC_ClockConfig+0x2b2>
 8007634:	40022000 	.word	0x40022000
 8007638:	46020c00 	.word	0x46020c00
 800763c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007640:	f7fb fd4c 	bl	80030dc <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f241 3288 	movw	r2, #5000	; 0x1388
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e090      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007656:	4b4a      	ldr	r3, [pc, #296]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b04      	cmp	r3, #4
 8007660:	d1ee      	bne.n	8007640 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	4b43      	ldr	r3, [pc, #268]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	429a      	cmp	r2, r3
 800767c:	d208      	bcs.n	8007690 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800767e:	4b40      	ldr	r3, [pc, #256]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 020f 	bic.w	r2, r3, #15
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	493d      	ldr	r1, [pc, #244]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 800768c:	4313      	orrs	r3, r2
 800768e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007690:	4b3c      	ldr	r3, [pc, #240]	; (8007784 <HAL_RCC_ClockConfig+0x3d4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d210      	bcs.n	80076c0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769e:	4b39      	ldr	r3, [pc, #228]	; (8007784 <HAL_RCC_ClockConfig+0x3d4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f023 020f 	bic.w	r2, r3, #15
 80076a6:	4937      	ldr	r1, [pc, #220]	; (8007784 <HAL_RCC_ClockConfig+0x3d4>)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ae:	4b35      	ldr	r3, [pc, #212]	; (8007784 <HAL_RCC_ClockConfig+0x3d4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d001      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e05b      	b.n	8007778 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d010      	beq.n	80076ee <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68da      	ldr	r2, [r3, #12]
 80076d0:	4b2b      	ldr	r3, [pc, #172]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 80076d2:	6a1b      	ldr	r3, [r3, #32]
 80076d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d8:	429a      	cmp	r2, r3
 80076da:	d208      	bcs.n	80076ee <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b28      	ldr	r3, [pc, #160]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4925      	ldr	r1, [pc, #148]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d012      	beq.n	8007720 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691a      	ldr	r2, [r3, #16]
 80076fe:	4b20      	ldr	r3, [pc, #128]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	091b      	lsrs	r3, r3, #4
 8007704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007708:	429a      	cmp	r2, r3
 800770a:	d209      	bcs.n	8007720 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800770c:	4b1c      	ldr	r3, [pc, #112]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	4919      	ldr	r1, [pc, #100]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 800771c:	4313      	orrs	r3, r2
 800771e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0310 	and.w	r3, r3, #16
 8007728:	2b00      	cmp	r3, #0
 800772a:	d010      	beq.n	800774e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	4b13      	ldr	r3, [pc, #76]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007738:	429a      	cmp	r2, r3
 800773a:	d208      	bcs.n	800774e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	490d      	ldr	r1, [pc, #52]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 800774a:	4313      	orrs	r3, r2
 800774c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800774e:	f000 f821 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8007752:	4602      	mov	r2, r0
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_RCC_ClockConfig+0x3d0>)
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	490a      	ldr	r1, [pc, #40]	; (8007788 <HAL_RCC_ClockConfig+0x3d8>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	fa22 f303 	lsr.w	r3, r2, r3
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <HAL_RCC_ClockConfig+0x3dc>)
 8007766:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007768:	4b09      	ldr	r3, [pc, #36]	; (8007790 <HAL_RCC_ClockConfig+0x3e0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f7fb fc6b 	bl	8003048 <HAL_InitTick>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]

  return status;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	46020c00 	.word	0x46020c00
 8007784:	40022000 	.word	0x40022000
 8007788:	0800f398 	.word	0x0800f398
 800778c:	20000000 	.word	0x20000000
 8007790:	20000004 	.word	0x20000004

08007794 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007794:	b480      	push	{r7}
 8007796:	b08b      	sub	sp, #44	; 0x2c
 8007798:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077a2:	4b7b      	ldr	r3, [pc, #492]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f003 030c 	and.w	r3, r3, #12
 80077aa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077ac:	4b78      	ldr	r3, [pc, #480]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x34>
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	2b0c      	cmp	r3, #12
 80077c0:	d121      	bne.n	8007806 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d11e      	bne.n	8007806 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80077c8:	4b71      	ldr	r3, [pc, #452]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80077d4:	4b6e      	ldr	r3, [pc, #440]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077da:	0b1b      	lsrs	r3, r3, #12
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
 80077e2:	e005      	b.n	80077f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80077e4:	4b6a      	ldr	r3, [pc, #424]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	0f1b      	lsrs	r3, r3, #28
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80077f0:	4a68      	ldr	r2, [pc, #416]	; (8007994 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d110      	bne.n	8007822 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007804:	e00d      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007806:	4b62      	ldr	r3, [pc, #392]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b04      	cmp	r3, #4
 8007810:	d102      	bne.n	8007818 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007812:	4b61      	ldr	r3, [pc, #388]	; (8007998 <HAL_RCC_GetSysClockFreq+0x204>)
 8007814:	623b      	str	r3, [r7, #32]
 8007816:	e004      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	2b08      	cmp	r3, #8
 800781c:	d101      	bne.n	8007822 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800781e:	4b5e      	ldr	r3, [pc, #376]	; (8007998 <HAL_RCC_GetSysClockFreq+0x204>)
 8007820:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b0c      	cmp	r3, #12
 8007826:	f040 80ac 	bne.w	8007982 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800782a:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007834:	4b56      	ldr	r3, [pc, #344]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007842:	4b53      	ldr	r3, [pc, #332]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	091b      	lsrs	r3, r3, #4
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800784e:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	08db      	lsrs	r3, r3, #3
 8007854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 8086 	beq.w	800797e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d003      	beq.n	8007880 <HAL_RCC_GetSysClockFreq+0xec>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b03      	cmp	r3, #3
 800787c:	d022      	beq.n	80078c4 <HAL_RCC_GetSysClockFreq+0x130>
 800787e:	e043      	b.n	8007908 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	ee07 3a90 	vmov	s15, r3
 8007886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800799c <HAL_RCC_GetSysClockFreq+0x208>
 800788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007892:	4b3f      	ldr	r3, [pc, #252]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078a2:	ed97 6a01 	vldr	s12, [r7, #4]
 80078a6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x20c>
 80078aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078be:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80078c2:	e046      	b.n	8007952 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	eddf 6a33 	vldr	s13, [pc, #204]	; 800799c <HAL_RCC_GetSysClockFreq+0x208>
 80078d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80078ea:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x20c>
 80078ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007902:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007906:	e024      	b.n	8007952 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007928:	ee07 3a90 	vmov	s15, r3
 800792c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007930:	ed97 6a01 	vldr	s12, [r7, #4]
 8007934:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80079a0 <HAL_RCC_GetSysClockFreq+0x20c>
 8007938:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800793c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007944:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007950:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007952:	4b0f      	ldr	r3, [pc, #60]	; (8007990 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007956:	0e1b      	lsrs	r3, r3, #24
 8007958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795c:	3301      	adds	r3, #1
 800795e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800796a:	edd7 6a07 	vldr	s13, [r7, #28]
 800796e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007976:	ee17 3a90 	vmov	r3, s15
 800797a:	623b      	str	r3, [r7, #32]
 800797c:	e001      	b.n	8007982 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8007982:	6a3b      	ldr	r3, [r7, #32]
}
 8007984:	4618      	mov	r0, r3
 8007986:	372c      	adds	r7, #44	; 0x2c
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	46020c00 	.word	0x46020c00
 8007994:	0800f3b0 	.word	0x0800f3b0
 8007998:	00f42400 	.word	0x00f42400
 800799c:	4b742400 	.word	0x4b742400
 80079a0:	46000000 	.word	0x46000000

080079a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80079a8:	f7ff fef4 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <HAL_RCC_GetHCLKFreq+0x28>)
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	4906      	ldr	r1, [pc, #24]	; (80079d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80079b8:	5ccb      	ldrb	r3, [r1, r3]
 80079ba:	fa22 f303 	lsr.w	r3, r2, r3
 80079be:	4a05      	ldr	r2, [pc, #20]	; (80079d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80079c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80079c2:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80079c4:	681b      	ldr	r3, [r3, #0]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	46020c00 	.word	0x46020c00
 80079d0:	0800f398 	.word	0x0800f398
 80079d4:	20000000 	.word	0x20000000

080079d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80079dc:	f7ff ffe2 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 80079e0:	4602      	mov	r2, r0
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	4903      	ldr	r1, [pc, #12]	; (80079fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ee:	5ccb      	ldrb	r3, [r1, r3]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	46020c00 	.word	0x46020c00
 80079fc:	0800f3a8 	.word	0x0800f3a8

08007a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007a04:	f7ff ffce 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	4903      	ldr	r1, [pc, #12]	; (8007a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a16:	5ccb      	ldrb	r3, [r1, r3]
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	46020c00 	.word	0x46020c00
 8007a24:	0800f3a8 	.word	0x0800f3a8

08007a28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007a2c:	f7ff ffba 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8007a30:	4602      	mov	r2, r0
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	091b      	lsrs	r3, r3, #4
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	4903      	ldr	r1, [pc, #12]	; (8007a4c <HAL_RCC_GetPCLK3Freq+0x24>)
 8007a3e:	5ccb      	ldrb	r3, [r1, r3]
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	46020c00 	.word	0x46020c00
 8007a4c:	0800f3a8 	.word	0x0800f3a8

08007a50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007a58:	4b3e      	ldr	r3, [pc, #248]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007a66:	f7fe fd89 	bl	800657c <HAL_PWREx_GetVoltageRange>
 8007a6a:	6178      	str	r0, [r7, #20]
 8007a6c:	e019      	b.n	8007aa2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a6e:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a74:	4a37      	ldr	r2, [pc, #220]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a76:	f043 0304 	orr.w	r3, r3, #4
 8007a7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007a7e:	4b35      	ldr	r3, [pc, #212]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007a8c:	f7fe fd76 	bl	800657c <HAL_PWREx_GetVoltageRange>
 8007a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007a92:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a98:	4a2e      	ldr	r2, [pc, #184]	; (8007b54 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007a9a:	f023 0304 	bic.w	r3, r3, #4
 8007a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007aa8:	d003      	beq.n	8007ab2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab0:	d109      	bne.n	8007ac6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab8:	d202      	bcs.n	8007ac0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007aba:	2301      	movs	r3, #1
 8007abc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007abe:	e033      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007ac4:	e030      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007acc:	d208      	bcs.n	8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad4:	d102      	bne.n	8007adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	613b      	str	r3, [r7, #16]
 8007ada:	e025      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e035      	b.n	8007b4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae6:	d90f      	bls.n	8007b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007af4:	d902      	bls.n	8007afc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	e015      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007afc:	2301      	movs	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	e012      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e00f      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b0e:	d109      	bne.n	8007b24 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b16:	d102      	bne.n	8007b1e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007b18:	2301      	movs	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	e004      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007b1e:	2302      	movs	r3, #2
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e001      	b.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007b24:	2301      	movs	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f023 020f 	bic.w	r2, r3, #15
 8007b30:	4909      	ldr	r1, [pc, #36]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007b38:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d001      	beq.n	8007b4a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	46020c00 	.word	0x46020c00
 8007b58:	40022000 	.word	0x40022000

08007b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b60:	b0ba      	sub	sp, #232	; 0xe8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f002 0401 	and.w	r4, r2, #1
 8007b80:	2500      	movs	r5, #0
 8007b82:	ea54 0305 	orrs.w	r3, r4, r5
 8007b86:	d00b      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007b88:	4bcb      	ldr	r3, [pc, #812]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b8e:	f023 0103 	bic.w	r1, r3, #3
 8007b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	4ac7      	ldr	r2, [pc, #796]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	f002 0802 	and.w	r8, r2, #2
 8007bac:	f04f 0900 	mov.w	r9, #0
 8007bb0:	ea58 0309 	orrs.w	r3, r8, r9
 8007bb4:	d00b      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007bb6:	4bc0      	ldr	r3, [pc, #768]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bbc:	f023 010c 	bic.w	r1, r3, #12
 8007bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	4abc      	ldr	r2, [pc, #752]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f002 0a04 	and.w	sl, r2, #4
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	ea5a 030b 	orrs.w	r3, sl, fp
 8007be2:	d00b      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007be4:	4bb4      	ldr	r3, [pc, #720]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bea:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	4ab0      	ldr	r2, [pc, #704]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f002 0308 	and.w	r3, r2, #8
 8007c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007c16:	460b      	mov	r3, r1
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	d00b      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007c1c:	4ba6      	ldr	r3, [pc, #664]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c2c:	4aa2      	ldr	r2, [pc, #648]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f002 0310 	and.w	r3, r2, #16
 8007c40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c4a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d00b      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007c54:	4b98      	ldr	r3, [pc, #608]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c64:	4a94      	ldr	r2, [pc, #592]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c66:	430b      	orrs	r3, r1
 8007c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f002 0320 	and.w	r3, r2, #32
 8007c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007c86:	460b      	mov	r3, r1
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	d00b      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007c8c:	4b8a      	ldr	r3, [pc, #552]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c92:	f023 0107 	bic.w	r1, r3, #7
 8007c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9c:	4a86      	ldr	r2, [pc, #536]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ca4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	d00b      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007cc4:	4b7c      	ldr	r3, [pc, #496]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cca:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd4:	4a78      	ldr	r2, [pc, #480]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cec:	2300      	movs	r3, #0
 8007cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cf2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007cfc:	4b6e      	ldr	r3, [pc, #440]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d0c:	4a6a      	ldr	r2, [pc, #424]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007d20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d24:	2300      	movs	r3, #0
 8007d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d2a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4313      	orrs	r3, r2
 8007d32:	d00b      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007d34:	4b60      	ldr	r3, [pc, #384]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	4a5c      	ldr	r2, [pc, #368]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d46:	430b      	orrs	r3, r1
 8007d48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007d6c:	4b52      	ldr	r3, [pc, #328]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d72:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8007d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7c:	4a4e      	ldr	r2, [pc, #312]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007d84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8007d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007da4:	4b44      	ldr	r3, [pc, #272]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007daa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db4:	4a40      	ldr	r2, [pc, #256]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007db6:	430b      	orrs	r3, r1
 8007db8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d00b      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007ddc:	4b36      	ldr	r3, [pc, #216]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8007de6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dec:	4a32      	ldr	r2, [pc, #200]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dee:	430b      	orrs	r3, r1
 8007df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e04:	2300      	movs	r3, #0
 8007e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d00c      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007e14:	4b28      	ldr	r3, [pc, #160]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e26:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007e3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007e44:	460b      	mov	r3, r1
 8007e46:	4313      	orrs	r3, r2
 8007e48:	d04f      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d02d      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007e56:	2b80      	cmp	r3, #128	; 0x80
 8007e58:	d827      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e5a:	2b60      	cmp	r3, #96	; 0x60
 8007e5c:	d02e      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e5e:	2b60      	cmp	r3, #96	; 0x60
 8007e60:	d823      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d006      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007e66:	2b40      	cmp	r3, #64	; 0x40
 8007e68:	d81f      	bhi.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d011      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007e72:	e01a      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e74:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	4a0f      	ldr	r2, [pc, #60]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007e80:	e01d      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e86:	3308      	adds	r3, #8
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f002 fa41 	bl	800a310 <RCCEx_PLL2_Config>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007e94:	e013      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e9a:	332c      	adds	r3, #44	; 0x2c
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f002 facf 	bl	800a440 <RCCEx_PLL3_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ea8:	e009      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007eb0:	e005      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007eb2:	bf00      	nop
 8007eb4:	e003      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007eb6:	bf00      	nop
 8007eb8:	46020c00 	.word	0x46020c00
        break;
 8007ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ebe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10d      	bne.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007ec6:	4bb6      	ldr	r3, [pc, #728]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ec8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ecc:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8007ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed8:	4ab1      	ldr	r2, [pc, #708]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007eda:	430b      	orrs	r3, r1
 8007edc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007ee0:	e003      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007ee6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef8:	2300      	movs	r3, #0
 8007efa:	677b      	str	r3, [r7, #116]	; 0x74
 8007efc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007f00:	460b      	mov	r3, r1
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d053      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f12:	d033      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f18:	d82c      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1e:	d02f      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f24:	d826      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	d820      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3a:	d011      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007f3c:	e01a      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f3e:	4b98      	ldr	r3, [pc, #608]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	4a97      	ldr	r2, [pc, #604]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f48:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f4a:	e01a      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f50:	3308      	adds	r3, #8
 8007f52:	4618      	mov	r0, r3
 8007f54:	f002 f9dc 	bl	800a310 <RCCEx_PLL2_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f5e:	e010      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f64:	332c      	adds	r3, #44	; 0x2c
 8007f66:	4618      	mov	r0, r3
 8007f68:	f002 fa6a 	bl	800a440 <RCCEx_PLL3_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007f72:	e006      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f7a:	e002      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f82:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10d      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007f8a:	4b85      	ldr	r3, [pc, #532]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f90:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f9c:	4a80      	ldr	r2, [pc, #512]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007fa4:	e003      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007faa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	d046      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007fd2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007fd6:	d028      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007fd8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007fdc:	d821      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe2:	d022      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe8:	d81b      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007fea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007fee:	d01c      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ff0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ff4:	d815      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ffa:	d008      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008000:	d80f      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d011      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	d00e      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800800c:	e009      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800800e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008012:	3308      	adds	r3, #8
 8008014:	4618      	mov	r0, r3
 8008016:	f002 f97b 	bl	800a310 <RCCEx_PLL2_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008020:	e004      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008028:	e000      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800802a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10d      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008034:	4b5a      	ldr	r3, [pc, #360]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800803a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800803e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008046:	4a56      	ldr	r2, [pc, #344]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008048:	430b      	orrs	r3, r1
 800804a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800804e:	e003      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008050:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008054:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008064:	663b      	str	r3, [r7, #96]	; 0x60
 8008066:	2300      	movs	r3, #0
 8008068:	667b      	str	r3, [r7, #100]	; 0x64
 800806a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800806e:	460b      	mov	r3, r1
 8008070:	4313      	orrs	r3, r2
 8008072:	d03f      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807c:	2b04      	cmp	r3, #4
 800807e:	d81e      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x562>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080c7 	.word	0x080080c7
 800808c:	0800809d 	.word	0x0800809d
 8008090:	080080ab 	.word	0x080080ab
 8008094:	080080c7 	.word	0x080080c7
 8008098:	080080c7 	.word	0x080080c7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800809c:	4b40      	ldr	r3, [pc, #256]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	4a3f      	ldr	r2, [pc, #252]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80080a8:	e00e      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ae:	332c      	adds	r3, #44	; 0x2c
 80080b0:	4618      	mov	r0, r3
 80080b2:	f002 f9c5 	bl	800a440 <RCCEx_PLL3_Config>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80080bc:	e004      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80080c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80080c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10d      	bne.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80080d0:	4b33      	ldr	r3, [pc, #204]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80080d6:	f023 0107 	bic.w	r1, r3, #7
 80080da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e2:	4a2f      	ldr	r2, [pc, #188]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080e4:	430b      	orrs	r3, r1
 80080e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80080ea:	e003      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080f0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80080f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008100:	65bb      	str	r3, [r7, #88]	; 0x58
 8008102:	2300      	movs	r3, #0
 8008104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008106:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800810a:	460b      	mov	r3, r1
 800810c:	4313      	orrs	r3, r2
 800810e:	d04d      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008118:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800811c:	d028      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800811e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008122:	d821      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008124:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008128:	d024      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800812a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800812e:	d81b      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8008130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008134:	d00e      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8008136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800813a:	d815      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01b      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8008140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008144:	d110      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008146:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800814c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008150:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008152:	e012      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008158:	332c      	adds	r3, #44	; 0x2c
 800815a:	4618      	mov	r0, r3
 800815c:	f002 f970 	bl	800a440 <RCCEx_PLL3_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008166:	e008      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800816e:	e004      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008170:	bf00      	nop
 8008172:	e002      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008174:	bf00      	nop
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008178:	bf00      	nop
    }
    if (ret == HAL_OK)
 800817a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d110      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008182:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008188:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800818c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008194:	4a02      	ldr	r2, [pc, #8]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008196:	430b      	orrs	r3, r1
 8008198:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800819c:	e006      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x650>
 800819e:	bf00      	nop
 80081a0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80081a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80081b8:	653b      	str	r3, [r7, #80]	; 0x50
 80081ba:	2300      	movs	r3, #0
 80081bc:	657b      	str	r3, [r7, #84]	; 0x54
 80081be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f000 80b5 	beq.w	8008334 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081d0:	4b9d      	ldr	r3, [pc, #628]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d113      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081de:	4b9a      	ldr	r3, [pc, #616]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e4:	4a98      	ldr	r2, [pc, #608]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081e6:	f043 0304 	orr.w	r3, r3, #4
 80081ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80081ee:	4b96      	ldr	r3, [pc, #600]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80081f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008206:	4b91      	ldr	r3, [pc, #580]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	4a90      	ldr	r2, [pc, #576]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008212:	f7fa ff63 	bl	80030dc <HAL_GetTick>
 8008216:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800821a:	e00b      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800821c:	f7fa ff5e 	bl	80030dc <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d903      	bls.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008232:	e005      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008234:	4b85      	ldr	r3, [pc, #532]	; (800844c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0ed      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8008240:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d165      	bne.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008248:	4b7f      	ldr	r3, [pc, #508]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800824a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800824e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d023      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800825e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008262:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826a:	4293      	cmp	r3, r2
 800826c:	d01b      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800826e:	4b76      	ldr	r3, [pc, #472]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008278:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800827c:	4b72      	ldr	r3, [pc, #456]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800827e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008282:	4a71      	ldr	r2, [pc, #452]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800828c:	4b6e      	ldr	r3, [pc, #440]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800828e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008292:	4a6d      	ldr	r2, [pc, #436]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008298:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800829c:	4a6a      	ldr	r2, [pc, #424]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d019      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b2:	f7fa ff13 	bl	80030dc <HAL_GetTick>
 80082b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082ba:	e00d      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082bc:	f7fa ff0e 	bl	80030dc <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c6:	1ad2      	subs	r2, r2, r3
 80082c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d903      	bls.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80082d6:	e006      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ea      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80082e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10d      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80082ee:	4b56      	ldr	r3, [pc, #344]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008300:	4a51      	ldr	r2, [pc, #324]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008302:	430b      	orrs	r3, r1
 8008304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008308:	e008      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800830a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800830e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8008312:	e003      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008314:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008318:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800831c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008324:	4b48      	ldr	r3, [pc, #288]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832a:	4a47      	ldr	r2, [pc, #284]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008340:	64bb      	str	r3, [r7, #72]	; 0x48
 8008342:	2300      	movs	r3, #0
 8008344:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008346:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800834a:	460b      	mov	r3, r1
 800834c:	4313      	orrs	r3, r2
 800834e:	d042      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008350:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008358:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800835c:	d022      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800835e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008362:	d81b      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008368:	d011      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800836a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836e:	d815      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d019      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008378:	d110      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800837a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800837e:	3308      	adds	r3, #8
 8008380:	4618      	mov	r0, r3
 8008382:	f001 ffc5 	bl	800a310 <RCCEx_PLL2_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800838c:	e00d      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838e:	4b2e      	ldr	r3, [pc, #184]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008392:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008398:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800839a:	e006      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80083a2:	e002      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80083a4:	bf00      	nop
 80083a6:	e000      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80083a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80083aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80083b2:	4b25      	ldr	r3, [pc, #148]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80083b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083b8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80083bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083c4:	4a20      	ldr	r2, [pc, #128]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80083c6:	430b      	orrs	r3, r1
 80083c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083cc:	e003      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80083d2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80083e2:	643b      	str	r3, [r7, #64]	; 0x40
 80083e4:	2300      	movs	r3, #0
 80083e6:	647b      	str	r3, [r7, #68]	; 0x44
 80083e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80083ec:	460b      	mov	r3, r1
 80083ee:	4313      	orrs	r3, r2
 80083f0:	d032      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80083f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fe:	d00b      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008404:	d804      	bhi.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8008406:	2b00      	cmp	r3, #0
 8008408:	d008      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840e:	d007      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8008420:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008422:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d112      	bne.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800842c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008430:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800843c:	4a02      	ldr	r2, [pc, #8]	; (8008448 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800843e:	430b      	orrs	r3, r1
 8008440:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008444:	e008      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8008446:	bf00      	nop
 8008448:	46020c00 	.word	0x46020c00
 800844c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008450:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008454:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008458:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800845c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008460:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
 8008466:	2300      	movs	r3, #0
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800846a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800846e:	460b      	mov	r3, r1
 8008470:	4313      	orrs	r3, r2
 8008472:	d00c      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008474:	4b98      	ldr	r3, [pc, #608]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008476:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800847a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800847e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008486:	4a94      	ldr	r2, [pc, #592]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008488:	430b      	orrs	r3, r1
 800848a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800848e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800849a:	633b      	str	r3, [r7, #48]	; 0x30
 800849c:	2300      	movs	r3, #0
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
 80084a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d019      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80084aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084b6:	d105      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084b8:	4b87      	ldr	r3, [pc, #540]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	4a86      	ldr	r2, [pc, #536]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084c2:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80084c4:	4b84      	ldr	r3, [pc, #528]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084ca:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80084ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084d6:	4a80      	ldr	r2, [pc, #512]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084d8:	430b      	orrs	r3, r1
 80084da:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80084de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80084ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80084ec:	2300      	movs	r3, #0
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80084f4:	460b      	mov	r3, r1
 80084f6:	4313      	orrs	r3, r2
 80084f8:	d00c      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80084fa:	4b77      	ldr	r3, [pc, #476]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80084fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008508:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800850c:	4972      	ldr	r1, [pc, #456]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	2300      	movs	r3, #0
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
 8008526:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800852a:	460b      	mov	r3, r1
 800852c:	4313      	orrs	r3, r2
 800852e:	d00c      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008530:	4b69      	ldr	r3, [pc, #420]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800853a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800853e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008542:	4965      	ldr	r1, [pc, #404]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800854a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	2300      	movs	r3, #0
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008560:	460b      	mov	r3, r1
 8008562:	4313      	orrs	r3, r2
 8008564:	d00c      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008566:	4b5c      	ldr	r3, [pc, #368]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800856c:	f023 0218 	bic.w	r2, r3, #24
 8008570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008574:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008578:	4957      	ldr	r1, [pc, #348]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]
 8008592:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008596:	460b      	mov	r3, r1
 8008598:	4313      	orrs	r3, r2
 800859a:	d032      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800859c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a8:	d105      	bne.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085aa:	4b4b      	ldr	r3, [pc, #300]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	4a4a      	ldr	r2, [pc, #296]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085b4:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80085b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085c2:	d108      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085c8:	3308      	adds	r3, #8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 fea0 	bl	800a310 <RCCEx_PLL2_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80085d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80085de:	4b3e      	ldr	r3, [pc, #248]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80085e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085f0:	4939      	ldr	r1, [pc, #228]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80085f8:	e003      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80085fe:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800860e:	60bb      	str	r3, [r7, #8]
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008618:	460b      	mov	r3, r1
 800861a:	4313      	orrs	r3, r2
 800861c:	d03a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800861e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862a:	d00e      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800862c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008630:	d815      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d017      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800863a:	d110      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863c:	4b26      	ldr	r3, [pc, #152]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	4a25      	ldr	r2, [pc, #148]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008646:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008648:	e00e      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800864a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864e:	3308      	adds	r3, #8
 8008650:	4618      	mov	r0, r3
 8008652:	f001 fe5d 	bl	800a310 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800865c:	e004      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008664:	e000      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008666:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008668:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10d      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008670:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008676:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800867a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800867e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008682:	4915      	ldr	r1, [pc, #84]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800868a:	e003      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008690:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086aa:	460b      	mov	r3, r1
 80086ac:	4313      	orrs	r3, r2
 80086ae:	d00c      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80086b0:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80086b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80086ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086c2:	4905      	ldr	r1, [pc, #20]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80086ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	37e8      	adds	r7, #232	; 0xe8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086d8:	46020c00 	.word	0x46020c00

080086dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	; 0x24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80086e4:	4bad      	ldr	r3, [pc, #692]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80086ee:	4bab      	ldr	r3, [pc, #684]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80086f8:	4ba8      	ldr	r3, [pc, #672]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	f003 030f 	and.w	r3, r3, #15
 8008702:	3301      	adds	r3, #1
 8008704:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008706:	4ba5      	ldr	r3, [pc, #660]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	091b      	lsrs	r3, r3, #4
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008712:	4ba2      	ldr	r3, [pc, #648]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	08db      	lsrs	r3, r3, #3
 8008718:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8123 	beq.w	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b03      	cmp	r3, #3
 800873a:	d062      	beq.n	8008802 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b03      	cmp	r3, #3
 8008740:	f200 8081 	bhi.w	8008846 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d024      	beq.n	8008794 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d17a      	bne.n	8008846 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a91 	vldr	s13, [pc, #580]	; 80089a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b8e      	ldr	r3, [pc, #568]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008772:	ed97 6a02 	vldr	s12, [r7, #8]
 8008776:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008792:	e08f      	b.n	80088b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008794:	4b81      	ldr	r3, [pc, #516]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80087a0:	4b7e      	ldr	r3, [pc, #504]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	0f1b      	lsrs	r3, r3, #28
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	e006      	b.n	80087ba <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80087ac:	4b7b      	ldr	r3, [pc, #492]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80087ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087b2:	041b      	lsls	r3, r3, #16
 80087b4:	0f1b      	lsrs	r3, r3, #28
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	4a7b      	ldr	r2, [pc, #492]	; (80089a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80087bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087c0:	ee07 3a90 	vmov	s15, r3
 80087c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	ee07 3a90 	vmov	s15, r3
 80087dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80087e4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80087e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80087f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008800:	e058      	b.n	80088b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80089a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8008810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008814:	4b61      	ldr	r3, [pc, #388]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881c:	ee07 3a90 	vmov	s15, r3
 8008820:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008824:	ed97 6a02 	vldr	s12, [r7, #8]
 8008828:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800882c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008830:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008838:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800883c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008840:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008844:	e036      	b.n	80088b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008846:	4b55      	ldr	r3, [pc, #340]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8008852:	4b52      	ldr	r3, [pc, #328]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	0f1b      	lsrs	r3, r3, #28
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	e006      	b.n	800886c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800885e:	4b4f      	ldr	r3, [pc, #316]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008864:	041b      	lsls	r3, r3, #16
 8008866:	0f1b      	lsrs	r3, r3, #28
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	4a4e      	ldr	r2, [pc, #312]	; (80089a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800886e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a02 	vldr	s12, [r7, #8]
 8008896:	eddf 5a43 	vldr	s11, [pc, #268]	; 80089a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80088b4:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d017      	beq.n	80088f0 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80088c0:	4b36      	ldr	r3, [pc, #216]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	0a5b      	lsrs	r3, r3, #9
 80088c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80088d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80088da:	edd7 6a07 	vldr	s13, [r7, #28]
 80088de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e6:	ee17 2a90 	vmov	r2, s15
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80088f6:	4b29      	ldr	r3, [pc, #164]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d017      	beq.n	8008932 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008902:	4b26      	ldr	r3, [pc, #152]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008918:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800891c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008928:	ee17 2a90 	vmov	r2, s15
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	e002      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d017      	beq.n	8008974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008944:	4b15      	ldr	r3, [pc, #84]	; (800899c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	0e1b      	lsrs	r3, r3, #24
 800894a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800895a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800895e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800896a:	ee17 2a90 	vmov	r2, s15
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008972:	e00c      	b.n	800898e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
}
 800897a:	e008      	b.n	800898e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	609a      	str	r2, [r3, #8]
}
 800898e:	bf00      	nop
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	46020c00 	.word	0x46020c00
 80089a0:	4b742400 	.word	0x4b742400
 80089a4:	46000000 	.word	0x46000000
 80089a8:	0800f3b0 	.word	0x0800f3b0

080089ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b089      	sub	sp, #36	; 0x24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80089b4:	4bad      	ldr	r3, [pc, #692]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80089be:	4bab      	ldr	r3, [pc, #684]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80089c8:	4ba8      	ldr	r3, [pc, #672]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	3301      	adds	r3, #1
 80089d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80089d6:	4ba5      	ldr	r3, [pc, #660]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089da:	091b      	lsrs	r3, r3, #4
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80089e2:	4ba2      	ldr	r3, [pc, #648]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	08db      	lsrs	r3, r3, #3
 80089e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	fb02 f303 	mul.w	r3, r2, r3
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8123 	beq.w	8008c4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d062      	beq.n	8008ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	f200 8081 	bhi.w	8008b16 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d024      	beq.n	8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d17a      	bne.n	8008b16 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a91 	vldr	s13, [pc, #580]	; 8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b8e      	ldr	r3, [pc, #568]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a46:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a62:	e08f      	b.n	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008a64:	4b81      	ldr	r3, [pc, #516]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8008a70:	4b7e      	ldr	r3, [pc, #504]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	0f1b      	lsrs	r3, r3, #28
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	e006      	b.n	8008a8a <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8008a7c:	4b7b      	ldr	r3, [pc, #492]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	0f1b      	lsrs	r3, r3, #28
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	4a7b      	ldr	r2, [pc, #492]	; (8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8008a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a90:	ee07 3a90 	vmov	s15, r3
 8008a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	ee07 3a90 	vmov	s15, r3
 8008aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ab4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad0:	e058      	b.n	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	ee07 3a90 	vmov	s15, r3
 8008ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008adc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae4:	4b61      	ldr	r3, [pc, #388]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aec:	ee07 3a90 	vmov	s15, r3
 8008af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008af4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b14:	e036      	b.n	8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008b16:	4b55      	ldr	r3, [pc, #340]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8008b22:	4b52      	ldr	r3, [pc, #328]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	0f1b      	lsrs	r3, r3, #28
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8008b2e:	4b4f      	ldr	r3, [pc, #316]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b34:	041b      	lsls	r3, r3, #16
 8008b36:	0f1b      	lsrs	r3, r3, #28
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	4a4e      	ldr	r2, [pc, #312]	; (8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8008b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	ee07 3a90 	vmov	s15, r3
 8008b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b66:	eddf 5a43 	vldr	s11, [pc, #268]	; 8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b82:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008b84:	4b39      	ldr	r3, [pc, #228]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008b90:	4b36      	ldr	r3, [pc, #216]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b94:	0a5b      	lsrs	r3, r3, #9
 8008b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb6:	ee17 2a90 	vmov	r2, s15
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	e002      	b.n	8008bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008bc6:	4b29      	ldr	r3, [pc, #164]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d017      	beq.n	8008c02 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008bd2:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008be8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf8:	ee17 2a90 	vmov	r2, s15
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	605a      	str	r2, [r3, #4]
 8008c00:	e002      	b.n	8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008c08:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d017      	beq.n	8008c44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c14:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c18:	0e1b      	lsrs	r3, r3, #24
 8008c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c3a:	ee17 2a90 	vmov	r2, s15
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008c42:	e00c      	b.n	8008c5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	609a      	str	r2, [r3, #8]
}
 8008c4a:	e008      	b.n	8008c5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	609a      	str	r2, [r3, #8]
}
 8008c5e:	bf00      	nop
 8008c60:	3724      	adds	r7, #36	; 0x24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	46020c00 	.word	0x46020c00
 8008c70:	4b742400 	.word	0x4b742400
 8008c74:	46000000 	.word	0x46000000
 8008c78:	0800f3b0 	.word	0x0800f3b0

08008c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b089      	sub	sp, #36	; 0x24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008c84:	4bad      	ldr	r3, [pc, #692]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008c8e:	4bab      	ldr	r3, [pc, #684]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008c98:	4ba8      	ldr	r3, [pc, #672]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9c:	0a1b      	lsrs	r3, r3, #8
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008ca6:	4ba5      	ldr	r3, [pc, #660]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008cb2:	4ba2      	ldr	r3, [pc, #648]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb6:	08db      	lsrs	r3, r3, #3
 8008cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8123 	beq.w	8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d062      	beq.n	8008da2 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	f200 8081 	bhi.w	8008de6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d024      	beq.n	8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d17a      	bne.n	8008de6 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eddf 6a91 	vldr	s13, [pc, #580]	; 8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d02:	4b8e      	ldr	r3, [pc, #568]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d16:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2e:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008d32:	e08f      	b.n	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d34:	4b81      	ldr	r3, [pc, #516]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8008d40:	4b7e      	ldr	r3, [pc, #504]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	0f1b      	lsrs	r3, r3, #28
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	e006      	b.n	8008d5a <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8008d4c:	4b7b      	ldr	r3, [pc, #492]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d52:	041b      	lsls	r3, r3, #16
 8008d54:	0f1b      	lsrs	r3, r3, #28
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	4a7b      	ldr	r2, [pc, #492]	; (8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8008d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d60:	ee07 3a90 	vmov	s15, r3
 8008d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d80:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d84:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008d88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d94:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008da0:	e058      	b.n	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dac:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db4:	4b61      	ldr	r3, [pc, #388]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc8:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008de4:	e036      	b.n	8008e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008de6:	4b55      	ldr	r3, [pc, #340]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8008df2:	4b52      	ldr	r3, [pc, #328]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	0f1b      	lsrs	r3, r3, #28
 8008df8:	f003 030f 	and.w	r3, r3, #15
 8008dfc:	e006      	b.n	8008e0c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8008dfe:	4b4f      	ldr	r3, [pc, #316]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e04:	041b      	lsls	r3, r3, #16
 8008e06:	0f1b      	lsrs	r3, r3, #28
 8008e08:	f003 030f 	and.w	r3, r3, #15
 8008e0c:	4a4e      	ldr	r2, [pc, #312]	; (8008f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8008e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e36:	eddf 5a43 	vldr	s11, [pc, #268]	; 8008f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e52:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008e54:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d017      	beq.n	8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e60:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e64:	0a5b      	lsrs	r3, r3, #9
 8008e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e76:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e86:	ee17 2a90 	vmov	r2, s15
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e002      	b.n	8008e96 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ea2:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec8:	ee17 2a90 	vmov	r2, s15
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	605a      	str	r2, [r3, #4]
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008ed8:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d017      	beq.n	8008f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee8:	0e1b      	lsrs	r3, r3, #24
 8008eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008efa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f0a:	ee17 2a90 	vmov	r2, s15
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008f12:	e00c      	b.n	8008f2e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	609a      	str	r2, [r3, #8]
}
 8008f1a:	e008      	b.n	8008f2e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	609a      	str	r2, [r3, #8]
}
 8008f2e:	bf00      	nop
 8008f30:	3724      	adds	r7, #36	; 0x24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	46020c00 	.word	0x46020c00
 8008f40:	4b742400 	.word	0x4b742400
 8008f44:	46000000 	.word	0x46000000
 8008f48:	0800f3b0 	.word	0x0800f3b0

08008f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08e      	sub	sp, #56	; 0x38
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	d145      	bne.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008f62:	4ba7      	ldr	r3, [pc, #668]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008f6e:	4ba4      	ldr	r3, [pc, #656]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d108      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f82:	d104      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8a:	f001 b9b3 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008f8e:	4b9c      	ldr	r3, [pc, #624]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f9c:	d114      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa4:	d110      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008fa6:	4b96      	ldr	r3, [pc, #600]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb4:	d103      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008fb6:	23fa      	movs	r3, #250	; 0xfa
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008fba:	f001 b99b 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008fbe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008fc4:	f001 b996 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008fc8:	4b8d      	ldr	r3, [pc, #564]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fdc:	d103      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008fde:	4b89      	ldr	r3, [pc, #548]	; (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe2:	f001 b987 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fea:	f001 b983 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ff2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	d151      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ffa:	4b81      	ldr	r3, [pc, #516]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ffc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009000:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8009004:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d035      	beq.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	2b80      	cmp	r3, #128	; 0x80
 8009010:	d841      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2b60      	cmp	r3, #96	; 0x60
 8009016:	d02a      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	2b60      	cmp	r3, #96	; 0x60
 800901c:	d83b      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	d009      	beq.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	d835      	bhi.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00c      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	2b20      	cmp	r3, #32
 8009034:	d012      	beq.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009036:	e02e      	b.n	8009096 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff fb4d 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009046:	f001 b955 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800904a:	f107 0318 	add.w	r3, r7, #24
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fcac 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009058:	f001 b94c 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800905c:	f107 030c 	add.w	r3, r7, #12
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fe0b 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800906a:	f001 b943 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800906e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009074:	f001 b93e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009078:	4b61      	ldr	r3, [pc, #388]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009084:	d103      	bne.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009086:	4b60      	ldr	r3, [pc, #384]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800908a:	f001 b933 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009092:	f001 b92f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800909a:	f001 b92b 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800909e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80090a6:	430b      	orrs	r3, r1
 80090a8:	d158      	bne.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80090aa:	4b55      	ldr	r3, [pc, #340]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80090ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090b4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090bc:	d03b      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c4:	d846      	bhi.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090cc:	d02e      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090d4:	d83e      	bhi.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090dc:	d00b      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e4:	d836      	bhi.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00d      	beq.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f2:	d012      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80090f4:	e02e      	b.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff faee 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009104:	f001 b8f6 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009108:	f107 0318 	add.w	r3, r7, #24
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fc4d 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009116:	f001 b8ed 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fdac 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009128:	f001 b8e4 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800912c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009132:	f001 b8df 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009136:	4b32      	ldr	r3, [pc, #200]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800913e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009142:	d103      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009144:	4b30      	ldr	r3, [pc, #192]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009148:	f001 b8d4 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009150:	f001 b8d0 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009158:	f001 b8cc 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800915c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009160:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009164:	430b      	orrs	r3, r1
 8009166:	d126      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009168:	4b25      	ldr	r3, [pc, #148]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800916a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800916e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009172:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009174:	4b22      	ldr	r3, [pc, #136]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800917c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009180:	d106      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009188:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
 800918c:	f001 b8b2 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8009190:	4b1b      	ldr	r3, [pc, #108]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800919c:	d107      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091a4:	d103      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80091a6:	4b19      	ldr	r3, [pc, #100]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80091a8:	637b      	str	r3, [r7, #52]	; 0x34
 80091aa:	f001 b8a3 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	637b      	str	r3, [r7, #52]	; 0x34
 80091b2:	f001 b89f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80091b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ba:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80091be:	430b      	orrs	r3, r1
 80091c0:	d16e      	bne.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80091c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80091cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091d4:	d03d      	beq.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80091dc:	d85c      	bhi.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091e4:	d014      	beq.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091ec:	d854      	bhi.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01f      	beq.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80091f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091fa:	d012      	beq.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80091fc:	e04c      	b.n	8009298 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80091fe:	bf00      	nop
 8009200:	46020c00 	.word	0x46020c00
 8009204:	0007a120 	.word	0x0007a120
 8009208:	00f42400 	.word	0x00f42400
 800920c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff fa61 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800921e:	f001 b869 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009222:	f107 0318 	add.w	r3, r7, #24
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff fbc0 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009230:	f001 b860 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009234:	4ba7      	ldr	r3, [pc, #668]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009240:	d103      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8009242:	4ba5      	ldr	r3, [pc, #660]	; (80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009246:	f001 b855 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800924e:	f001 b851 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009252:	4ba0      	ldr	r3, [pc, #640]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b20      	cmp	r3, #32
 800925c:	d118      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800925e:	4b9d      	ldr	r3, [pc, #628]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d005      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800926a:	4b9a      	ldr	r3, [pc, #616]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	0e1b      	lsrs	r3, r3, #24
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	e006      	b.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009276:	4b97      	ldr	r3, [pc, #604]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009278:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	0e1b      	lsrs	r3, r3, #24
 8009280:	f003 030f 	and.w	r3, r3, #15
 8009284:	4a95      	ldr	r2, [pc, #596]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800928c:	f001 b832 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009294:	f001 b82e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800929c:	f001 b82a 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80092a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a4:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80092a8:	430b      	orrs	r3, r1
 80092aa:	d17f      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80092ac:	4b89      	ldr	r3, [pc, #548]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80092ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d165      	bne.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80092be:	4b85      	ldr	r3, [pc, #532]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80092c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80092c4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80092d0:	d034      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80092d8:	d853      	bhi.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092e0:	d00b      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092e8:	d84b      	bhi.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d016      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092f6:	d009      	beq.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80092f8:	e043      	b.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff f9ec 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009308:	f000 bff4 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930c:	f107 0318 	add.w	r3, r7, #24
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fb4b 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800931a:	f000 bfeb 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800931e:	4b6d      	ldr	r3, [pc, #436]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800932a:	d103      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800932c:	4b6a      	ldr	r3, [pc, #424]	; (80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800932e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009330:	f000 bfe0 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009338:	f000 bfdc 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800933c:	4b65      	ldr	r3, [pc, #404]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0320 	and.w	r3, r3, #32
 8009344:	2b20      	cmp	r3, #32
 8009346:	d118      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009354:	4b5f      	ldr	r3, [pc, #380]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	0e1b      	lsrs	r3, r3, #24
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	e006      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009360:	4b5c      	ldr	r3, [pc, #368]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	0e1b      	lsrs	r3, r3, #24
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	4a5b      	ldr	r2, [pc, #364]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009376:	f000 bfbd 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800937e:	f000 bfb9 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009386:	f000 bfb5 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800938a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009390:	d108      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff f9a0 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	637b      	str	r3, [r7, #52]	; 0x34
 80093a0:	f000 bfa8 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 80093a4:	2300      	movs	r3, #0
 80093a6:	637b      	str	r3, [r7, #52]	; 0x34
 80093a8:	f000 bfa4 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	1e51      	subs	r1, r2, #1
 80093b2:	430b      	orrs	r3, r1
 80093b4:	d136      	bne.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80093b6:	4b47      	ldr	r3, [pc, #284]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093bc:	f003 0303 	and.w	r3, r3, #3
 80093c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80093c8:	f7fe fb1a 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 80093cc:	6378      	str	r0, [r7, #52]	; 0x34
 80093ce:	f000 bf91 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d104      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80093d8:	f7fe f9dc 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 80093dc:	6378      	str	r0, [r7, #52]	; 0x34
 80093de:	f000 bf89 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80093e2:	4b3c      	ldr	r3, [pc, #240]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ee:	d106      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80093f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d103      	bne.n	80093fe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80093f6:	4b3a      	ldr	r3, [pc, #232]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80093f8:	637b      	str	r3, [r7, #52]	; 0x34
 80093fa:	f000 bf7b 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80093fe:	4b35      	ldr	r3, [pc, #212]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d107      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	2b03      	cmp	r3, #3
 8009410:	d104      	bne.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8009412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009416:	637b      	str	r3, [r7, #52]	; 0x34
 8009418:	f000 bf6c 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	637b      	str	r3, [r7, #52]	; 0x34
 8009420:	f000 bf68 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009428:	1e91      	subs	r1, r2, #2
 800942a:	430b      	orrs	r3, r1
 800942c:	d136      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800942e:	4b29      	ldr	r3, [pc, #164]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009434:	f003 030c 	and.w	r3, r3, #12
 8009438:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009440:	f7fe faca 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009444:	6378      	str	r0, [r7, #52]	; 0x34
 8009446:	f000 bf55 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	2b04      	cmp	r3, #4
 800944e:	d104      	bne.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009450:	f7fe f9a0 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009454:	6378      	str	r0, [r7, #52]	; 0x34
 8009456:	f000 bf4d 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800945a:	4b1e      	ldr	r3, [pc, #120]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009466:	d106      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946a:	2b08      	cmp	r3, #8
 800946c:	d103      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800946e:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
 8009472:	f000 bf3f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009476:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b02      	cmp	r3, #2
 8009482:	d107      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	2b0c      	cmp	r3, #12
 8009488:	d104      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800948a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948e:	637b      	str	r3, [r7, #52]	; 0x34
 8009490:	f000 bf30 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
 8009498:	f000 bf2c 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800949c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a0:	1f11      	subs	r1, r2, #4
 80094a2:	430b      	orrs	r3, r1
 80094a4:	d13f      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80094a6:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80094a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80094b0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d104      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094b8:	f7fe fa8e 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 80094bc:	6378      	str	r0, [r7, #52]	; 0x34
 80094be:	f000 bf19 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	2b10      	cmp	r3, #16
 80094c6:	d10d      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094c8:	f7fe f964 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 80094cc:	6378      	str	r0, [r7, #52]	; 0x34
 80094ce:	f000 bf11 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80094d2:	bf00      	nop
 80094d4:	46020c00 	.word	0x46020c00
 80094d8:	02dc6c00 	.word	0x02dc6c00
 80094dc:	0800f3b0 	.word	0x0800f3b0
 80094e0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80094e4:	4ba6      	ldr	r3, [pc, #664]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f0:	d106      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	2b20      	cmp	r3, #32
 80094f6:	d103      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80094f8:	4ba2      	ldr	r3, [pc, #648]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80094fa:	637b      	str	r3, [r7, #52]	; 0x34
 80094fc:	f000 befa 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009500:	4b9f      	ldr	r3, [pc, #636]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b02      	cmp	r3, #2
 800950c:	d107      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	2b30      	cmp	r3, #48	; 0x30
 8009512:	d104      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8009514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
 800951a:	f000 beeb 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
 8009522:	f000 bee7 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952a:	f1a2 0108 	sub.w	r1, r2, #8
 800952e:	430b      	orrs	r3, r1
 8009530:	d136      	bne.n	80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009532:	4b93      	ldr	r3, [pc, #588]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800953c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009544:	f7fe fa48 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009548:	6378      	str	r0, [r7, #52]	; 0x34
 800954a:	f000 bed3 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2b40      	cmp	r3, #64	; 0x40
 8009552:	d104      	bne.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009554:	f7fe f91e 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009558:	6378      	str	r0, [r7, #52]	; 0x34
 800955a:	f000 becb 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800955e:	4b88      	ldr	r3, [pc, #544]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800956a:	d106      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	2b80      	cmp	r3, #128	; 0x80
 8009570:	d103      	bne.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8009572:	4b84      	ldr	r3, [pc, #528]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
 8009576:	f000 bebd 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800957a:	4b81      	ldr	r3, [pc, #516]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800957c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b02      	cmp	r3, #2
 8009586:	d107      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	2bc0      	cmp	r3, #192	; 0xc0
 800958c:	d104      	bne.n	8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800958e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
 8009594:	f000 beae 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
 800959c:	f000 beaa 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80095a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a4:	f1a2 0110 	sub.w	r1, r2, #16
 80095a8:	430b      	orrs	r3, r1
 80095aa:	d139      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80095ac:	4b74      	ldr	r3, [pc, #464]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095b6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d104      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095be:	f7fe fa0b 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 80095c2:	6378      	str	r0, [r7, #52]	; 0x34
 80095c4:	f000 be96 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80095c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ce:	d104      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80095d0:	f7fe f8e0 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 80095d4:	6378      	str	r0, [r7, #52]	; 0x34
 80095d6:	f000 be8d 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80095da:	4b69      	ldr	r3, [pc, #420]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095e6:	d107      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ee:	d103      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80095f0:	4b64      	ldr	r3, [pc, #400]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
 80095f4:	f000 be7e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80095f8:	4b61      	ldr	r3, [pc, #388]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b02      	cmp	r3, #2
 8009604:	d108      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800960c:	d104      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800960e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
 8009614:	f000 be6e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	; 0x34
 800961c:	f000 be6a 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009624:	f1a2 0120 	sub.w	r1, r2, #32
 8009628:	430b      	orrs	r3, r1
 800962a:	d158      	bne.n	80096de <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800962c:	4b54      	ldr	r3, [pc, #336]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800962e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	2b00      	cmp	r3, #0
 800963c:	d104      	bne.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800963e:	f7fe f9f3 	bl	8007a28 <HAL_RCC_GetPCLK3Freq>
 8009642:	6378      	str	r0, [r7, #52]	; 0x34
 8009644:	f000 be56 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	2b01      	cmp	r3, #1
 800964c:	d104      	bne.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800964e:	f7fe f8a1 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009652:	6378      	str	r0, [r7, #52]	; 0x34
 8009654:	f000 be4e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009658:	4b49      	ldr	r3, [pc, #292]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009664:	d106      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2b02      	cmp	r3, #2
 800966a:	d103      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800966c:	4b45      	ldr	r3, [pc, #276]	; (8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800966e:	637b      	str	r3, [r7, #52]	; 0x34
 8009670:	f000 be40 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009674:	4b42      	ldr	r3, [pc, #264]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b02      	cmp	r3, #2
 8009680:	d107      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	2b03      	cmp	r3, #3
 8009686:	d104      	bne.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8009688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
 800968e:	f000 be31 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009692:	4b3b      	ldr	r3, [pc, #236]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b20      	cmp	r3, #32
 800969c:	d11b      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	2b04      	cmp	r3, #4
 80096a2:	d118      	bne.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096a4:	4b36      	ldr	r3, [pc, #216]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80096b0:	4b33      	ldr	r3, [pc, #204]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	f003 030f 	and.w	r3, r3, #15
 80096ba:	e006      	b.n	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 80096bc:	4b30      	ldr	r3, [pc, #192]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096c2:	041b      	lsls	r3, r3, #16
 80096c4:	0e1b      	lsrs	r3, r3, #24
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	4a2f      	ldr	r2, [pc, #188]	; (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80096cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096d0:	637b      	str	r3, [r7, #52]	; 0x34
 80096d2:	f000 be0f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
 80096da:	f000 be0b 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80096de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e2:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80096e6:	430b      	orrs	r3, r1
 80096e8:	d172      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80096ea:	4b25      	ldr	r3, [pc, #148]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80096f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fc:	d104      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096fe:	f7fe f849 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009702:	6378      	str	r0, [r7, #52]	; 0x34
 8009704:	f000 bdf6 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970e:	d108      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009710:	f107 0318 	add.w	r3, r7, #24
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff f949 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
 800971e:	f000 bde9 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	2b00      	cmp	r3, #0
 8009726:	d104      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009728:	f7fe f93c 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 800972c:	6378      	str	r0, [r7, #52]	; 0x34
 800972e:	f000 bde1 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009738:	d128      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b20      	cmp	r3, #32
 8009744:	d118      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009746:	4b0e      	ldr	r3, [pc, #56]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8009752:	4b0b      	ldr	r3, [pc, #44]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	f003 030f 	and.w	r3, r3, #15
 800975c:	e006      	b.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800975e:	4b08      	ldr	r3, [pc, #32]	; (8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009764:	041b      	lsls	r3, r3, #16
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	4a06      	ldr	r2, [pc, #24]	; (8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800976e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
 8009774:	f000 bdbe 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	637b      	str	r3, [r7, #52]	; 0x34
 800977c:	f000 bdba 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009780:	46020c00 	.word	0x46020c00
 8009784:	00f42400 	.word	0x00f42400
 8009788:	0800f3b0 	.word	0x0800f3b0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800978c:	4baf      	ldr	r3, [pc, #700]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009798:	d107      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097a0:	d103      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80097a2:	4bab      	ldr	r3, [pc, #684]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80097a4:	637b      	str	r3, [r7, #52]	; 0x34
 80097a6:	f000 bda5 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80097aa:	4ba8      	ldr	r3, [pc, #672]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097b6:	d107      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80097b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097be:	d103      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80097c0:	4ba3      	ldr	r3, [pc, #652]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
 80097c4:	f000 bd96 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	637b      	str	r3, [r7, #52]	; 0x34
 80097cc:	f000 bd92 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80097d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097d4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80097d8:	430b      	orrs	r3, r1
 80097da:	d158      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80097dc:	4b9b      	ldr	r3, [pc, #620]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80097de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d84b      	bhi.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80097ee:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	0800982d 	.word	0x0800982d
 80097f8:	08009809 	.word	0x08009809
 80097fc:	0800981b 	.word	0x0800981b
 8009800:	08009837 	.word	0x08009837
 8009804:	08009841 	.word	0x08009841
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe ff65 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009816:	f000 bd6d 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800981a:	f107 030c 	add.w	r3, r7, #12
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fa2c 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009828:	f000 bd64 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800982c:	f7fe f8ba 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 8009830:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009832:	f000 bd5f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009836:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800983c:	f000 bd5a 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009840:	4b82      	ldr	r3, [pc, #520]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b20      	cmp	r3, #32
 800984a:	d118      	bne.n	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800984c:	4b7f      	ldr	r3, [pc, #508]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009858:	4b7c      	ldr	r3, [pc, #496]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0e1b      	lsrs	r3, r3, #24
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	e006      	b.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009864:	4b79      	ldr	r3, [pc, #484]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800986a:	041b      	lsls	r3, r3, #16
 800986c:	0e1b      	lsrs	r3, r3, #24
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	4a78      	ldr	r2, [pc, #480]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800987a:	f000 bd3b 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009882:	f000 bd37 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800988a:	f000 bd33 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800988e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009892:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8009896:	430b      	orrs	r3, r1
 8009898:	d167      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800989a:	4b6c      	ldr	r3, [pc, #432]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800989c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80098a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098ac:	d036      	beq.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098b4:	d855      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098bc:	d029      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098c4:	d84d      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098cc:	d013      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098d4:	d845      	bhi.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d015      	beq.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e2:	d13e      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fef7 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098f2:	f000 bcff 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098f6:	f107 030c 	add.w	r3, r7, #12
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff f9be 	bl	8008c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009904:	f000 bcf6 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009908:	f7fe f84c 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 800990c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800990e:	f000 bcf1 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009912:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009918:	f000 bcec 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800991c:	4b4b      	ldr	r3, [pc, #300]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b20      	cmp	r3, #32
 8009926:	d118      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009928:	4b48      	ldr	r3, [pc, #288]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8009934:	4b45      	ldr	r3, [pc, #276]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	0e1b      	lsrs	r3, r3, #24
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	e006      	b.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009940:	4b42      	ldr	r3, [pc, #264]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009946:	041b      	lsls	r3, r3, #16
 8009948:	0e1b      	lsrs	r3, r3, #24
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	4a41      	ldr	r2, [pc, #260]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009956:	f000 bccd 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800995a:	2300      	movs	r3, #0
 800995c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800995e:	f000 bcc9 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009962:	2300      	movs	r3, #0
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009966:	f000 bcc5 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800996a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800996e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8009972:	430b      	orrs	r3, r1
 8009974:	d14c      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009976:	4b35      	ldr	r3, [pc, #212]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800997c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009980:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009988:	f7fe f826 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 800998c:	6378      	str	r0, [r7, #52]	; 0x34
 800998e:	f000 bcb1 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009998:	d104      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800999a:	f7fd fefb 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 800999e:	6378      	str	r0, [r7, #52]	; 0x34
 80099a0:	f000 bca8 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80099a4:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b0:	d107      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099b8:	d103      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80099ba:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
 80099be:	f000 bc99 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80099c2:	4b22      	ldr	r3, [pc, #136]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	d11c      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099d4:	d118      	bne.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099d6:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d005      	beq.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80099e2:	4b1a      	ldr	r3, [pc, #104]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	e006      	b.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80099ee:	4b17      	ldr	r3, [pc, #92]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099f4:	041b      	lsls	r3, r3, #16
 80099f6:	0e1b      	lsrs	r3, r3, #24
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	4a15      	ldr	r2, [pc, #84]	; (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80099fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a02:	637b      	str	r3, [r7, #52]	; 0x34
 8009a04:	f000 bc76 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a0c:	f000 bc72 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a14:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	d153      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009a1c:	4b0b      	ldr	r3, [pc, #44]	; (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009a26:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d104      	bne.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a2e:	f7fd ffd3 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009a32:	6378      	str	r0, [r7, #52]	; 0x34
 8009a34:	f000 bc5e 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3e:	d10b      	bne.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a40:	f7fd fea8 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009a44:	6378      	str	r0, [r7, #52]	; 0x34
 8009a46:	f000 bc55 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009a4a:	bf00      	nop
 8009a4c:	46020c00 	.word	0x46020c00
 8009a50:	00f42400 	.word	0x00f42400
 8009a54:	0800f3b0 	.word	0x0800f3b0
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009a58:	4ba1      	ldr	r3, [pc, #644]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a64:	d107      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a6c:	d103      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8009a6e:	4b9d      	ldr	r3, [pc, #628]	; (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009a70:	637b      	str	r3, [r7, #52]	; 0x34
 8009a72:	f000 bc3f 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009a76:	4b9a      	ldr	r3, [pc, #616]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d11c      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a88:	d118      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a8a:	4b95      	ldr	r3, [pc, #596]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8009a96:	4b92      	ldr	r3, [pc, #584]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	0e1b      	lsrs	r3, r3, #24
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	e006      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009aa2:	4b8f      	ldr	r3, [pc, #572]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009aa8:	041b      	lsls	r3, r3, #16
 8009aaa:	0e1b      	lsrs	r3, r3, #24
 8009aac:	f003 030f 	and.w	r3, r3, #15
 8009ab0:	4a8d      	ldr	r2, [pc, #564]	; (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	f000 bc1c 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
 8009ac0:	f000 bc18 	b.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac8:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009acc:	430b      	orrs	r3, r1
 8009ace:	d151      	bne.n	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009ad0:	4b83      	ldr	r3, [pc, #524]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ad6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ada:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	2bc0      	cmp	r3, #192	; 0xc0
 8009ae0:	d024      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	2bc0      	cmp	r3, #192	; 0xc0
 8009ae6:	d842      	bhi.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	2b80      	cmp	r3, #128	; 0x80
 8009aec:	d00d      	beq.n	8009b0a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	2b80      	cmp	r3, #128	; 0x80
 8009af2:	d83c      	bhi.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d011      	beq.n	8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8009b00:	e035      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009b02:	f7fd ff91 	bl	8007a28 <HAL_RCC_GetPCLK3Freq>
 8009b06:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b08:	e3f4      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b0a:	4b75      	ldr	r3, [pc, #468]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b16:	d102      	bne.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8009b18:	4b72      	ldr	r3, [pc, #456]	; (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009b1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b1c:	e3ea      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b22:	e3e7      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009b24:	f7fd fe36 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009b28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009b2a:	e3e3      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b2c:	4b6c      	ldr	r3, [pc, #432]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0320 	and.w	r3, r3, #32
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d117      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b38:	4b69      	ldr	r3, [pc, #420]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8009b44:	4b66      	ldr	r3, [pc, #408]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	0e1b      	lsrs	r3, r3, #24
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	e006      	b.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8009b50:	4b63      	ldr	r3, [pc, #396]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	0e1b      	lsrs	r3, r3, #24
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	4a62      	ldr	r2, [pc, #392]	; (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b64:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b66:	e3c5      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b6c:	e3c2      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b72:	e3bf      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b78:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	d147      	bne.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009b80:	4b57      	ldr	r3, [pc, #348]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b8a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d103      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b92:	f7fd ff21 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009b96:	6378      	str	r0, [r7, #52]	; 0x34
 8009b98:	e3ac      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ba0:	d103      	bne.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009ba2:	f7fd fdf7 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009ba6:	6378      	str	r0, [r7, #52]	; 0x34
 8009ba8:	e3a4      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009baa:	4b4d      	ldr	r3, [pc, #308]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb6:	d106      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbe:	d102      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009bc0:	4b48      	ldr	r3, [pc, #288]	; (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc4:	e396      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009bc6:	4b46      	ldr	r3, [pc, #280]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d11b      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009bd8:	d117      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bda:	4b41      	ldr	r3, [pc, #260]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8009be6:	4b3e      	ldr	r3, [pc, #248]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	0e1b      	lsrs	r3, r3, #24
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	e006      	b.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8009bf2:	4b3b      	ldr	r3, [pc, #236]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009bf8:	041b      	lsls	r3, r3, #16
 8009bfa:	0e1b      	lsrs	r3, r3, #24
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	4a39      	ldr	r2, [pc, #228]	; (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
 8009c08:	e374      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c0e:	e371      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c14:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	d16a      	bne.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009c1c:	4b30      	ldr	r3, [pc, #192]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c26:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d120      	bne.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c2e:	4b2c      	ldr	r3, [pc, #176]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d117      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c3a:	4b29      	ldr	r3, [pc, #164]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8009c46:	4b26      	ldr	r3, [pc, #152]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	0e1b      	lsrs	r3, r3, #24
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	e006      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c58:	041b      	lsls	r3, r3, #16
 8009c5a:	0e1b      	lsrs	r3, r3, #24
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	4a21      	ldr	r2, [pc, #132]	; (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c66:	637b      	str	r3, [r7, #52]	; 0x34
 8009c68:	e344      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c6e:	e341      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009c70:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c7e:	d112      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c86:	d10e      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c96:	d102      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009c98:	23fa      	movs	r3, #250	; 0xfa
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009c9c:	e32a      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009c9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009ca2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ca4:	e326      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009ca6:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb2:	d106      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cba:	d102      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009cbc:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc0:	e318      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d10d      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cd6:	d109      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009cd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8009cde:	e309      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009ce0:	46020c00 	.word	0x46020c00
 8009ce4:	00f42400 	.word	0x00f42400
 8009ce8:	0800f3b0 	.word	0x0800f3b0
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf0:	e300      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf6:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	d164      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009cfe:	4ba2      	ldr	r3, [pc, #648]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d08:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d120      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d10:	4b9d      	ldr	r3, [pc, #628]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d117      	bne.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d1c:	4b9a      	ldr	r3, [pc, #616]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8009d28:	4b97      	ldr	r3, [pc, #604]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	0e1b      	lsrs	r3, r3, #24
 8009d2e:	f003 030f 	and.w	r3, r3, #15
 8009d32:	e006      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8009d34:	4b94      	ldr	r3, [pc, #592]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d3a:	041b      	lsls	r3, r3, #16
 8009d3c:	0e1b      	lsrs	r3, r3, #24
 8009d3e:	f003 030f 	and.w	r3, r3, #15
 8009d42:	4a92      	ldr	r2, [pc, #584]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d48:	637b      	str	r3, [r7, #52]	; 0x34
 8009d4a:	e2d3      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d50:	e2d0      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009d52:	4b8d      	ldr	r3, [pc, #564]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d60:	d112      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d68:	d10e      	bne.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d6a:	4b87      	ldr	r3, [pc, #540]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d78:	d102      	bne.n	8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8009d7a:	23fa      	movs	r3, #250	; 0xfa
 8009d7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d7e:	e2b9      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009d84:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d86:	e2b5      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009d88:	4b7f      	ldr	r3, [pc, #508]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d94:	d106      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d9c:	d102      	bne.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8009d9e:	4b7c      	ldr	r3, [pc, #496]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
 8009da2:	e2a7      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009da4:	4b78      	ldr	r3, [pc, #480]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d107      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009db8:	d103      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc0:	e298      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc6:	e295      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dcc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	d147      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009dd4:	4b6c      	ldr	r3, [pc, #432]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dda:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009dde:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d103      	bne.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009de6:	f7fd fdf7 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009dea:	6378      	str	r0, [r7, #52]	; 0x34
 8009dec:	e282      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009dee:	4b66      	ldr	r3, [pc, #408]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dfc:	d112      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e04:	d10e      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e06:	4b60      	ldr	r3, [pc, #384]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e14:	d102      	bne.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8009e16:	23fa      	movs	r3, #250	; 0xfa
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e1a:	e26b      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e20:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e22:	e267      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009e24:	4b58      	ldr	r3, [pc, #352]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e30:	d106      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009e38:	d102      	bne.n	8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8009e3a:	4b55      	ldr	r3, [pc, #340]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e3e:	e259      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009e40:	4b51      	ldr	r3, [pc, #324]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d107      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009e54:	d103      	bne.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8009e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e5c:	e24a      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
 8009e62:	e247      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e68:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	d12d      	bne.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009e70:	4b45      	ldr	r3, [pc, #276]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e76:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009e7a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e88:	d105      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d102      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009e90:	4b3f      	ldr	r3, [pc, #252]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009e92:	637b      	str	r3, [r7, #52]	; 0x34
 8009e94:	e22e      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e9c:	d107      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe fc1a 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8009eac:	e222      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eb6:	f107 0318 	add.w	r3, r7, #24
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fe fd76 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ec4:	e216      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eca:	e213      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	d15d      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ed8:	4b2b      	ldr	r3, [pc, #172]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ede:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009ee2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009eea:	d028      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ef2:	d845      	bhi.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009efa:	d013      	beq.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f02:	d83d      	bhi.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d004      	beq.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f10:	d004      	beq.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009f12:	e035      	b.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009f14:	f7fd fd74 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 8009f18:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009f1a:	e1eb      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009f1c:	f7fd fc3a 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009f20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009f22:	e1e7      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f24:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f30:	d102      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009f32:	4b17      	ldr	r3, [pc, #92]	; (8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009f34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f36:	e1dd      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f3c:	e1da      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009f3e:	4b12      	ldr	r3, [pc, #72]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d117      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	0e1b      	lsrs	r3, r3, #24
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	e006      	b.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f68:	041b      	lsls	r3, r3, #16
 8009f6a:	0e1b      	lsrs	r3, r3, #24
 8009f6c:	f003 030f 	and.w	r3, r3, #15
 8009f70:	4a06      	ldr	r2, [pc, #24]	; (8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f76:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009f78:	e1bc      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f7e:	e1b9      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009f84:	e1b6      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009f86:	bf00      	nop
 8009f88:	46020c00 	.word	0x46020c00
 8009f8c:	0800f3b0 	.word	0x0800f3b0
 8009f90:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f98:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	d156      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009fa0:	4ba5      	ldr	r3, [pc, #660]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009faa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fb2:	d028      	beq.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fba:	d845      	bhi.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fc2:	d013      	beq.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fca:	d83d      	bhi.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd8:	d004      	beq.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009fda:	e035      	b.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009fdc:	f7fd fcfc 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8009fe0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009fe2:	e187      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009fe4:	f7fd fbd6 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 8009fe8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009fea:	e183      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fec:	4b92      	ldr	r3, [pc, #584]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ff8:	d102      	bne.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009ffa:	4b90      	ldr	r3, [pc, #576]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009ffc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ffe:	e179      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a004:	e176      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a006:	4b8c      	ldr	r3, [pc, #560]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b20      	cmp	r3, #32
 800a010:	d117      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a012:	4b89      	ldr	r3, [pc, #548]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d005      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800a01e:	4b86      	ldr	r3, [pc, #536]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	0e1b      	lsrs	r3, r3, #24
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	e006      	b.n	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800a02a:	4b83      	ldr	r3, [pc, #524]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a02c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a030:	041b      	lsls	r3, r3, #16
 800a032:	0e1b      	lsrs	r3, r3, #24
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	4a81      	ldr	r2, [pc, #516]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a040:	e158      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a046:	e155      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a04c:	e152      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a052:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800a056:	430b      	orrs	r3, r1
 800a058:	d177      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a05a:	4b77      	ldr	r3, [pc, #476]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a05c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a060:	f003 0318 	and.w	r3, r3, #24
 800a064:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	2b18      	cmp	r3, #24
 800a06a:	d86b      	bhi.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a145 	.word	0x0800a145
 800a07c:	0800a145 	.word	0x0800a145
 800a080:	0800a145 	.word	0x0800a145
 800a084:	0800a145 	.word	0x0800a145
 800a088:	0800a145 	.word	0x0800a145
 800a08c:	0800a145 	.word	0x0800a145
 800a090:	0800a145 	.word	0x0800a145
 800a094:	0800a0e1 	.word	0x0800a0e1
 800a098:	0800a145 	.word	0x0800a145
 800a09c:	0800a145 	.word	0x0800a145
 800a0a0:	0800a145 	.word	0x0800a145
 800a0a4:	0800a145 	.word	0x0800a145
 800a0a8:	0800a145 	.word	0x0800a145
 800a0ac:	0800a145 	.word	0x0800a145
 800a0b0:	0800a145 	.word	0x0800a145
 800a0b4:	0800a0e9 	.word	0x0800a0e9
 800a0b8:	0800a145 	.word	0x0800a145
 800a0bc:	0800a145 	.word	0x0800a145
 800a0c0:	0800a145 	.word	0x0800a145
 800a0c4:	0800a145 	.word	0x0800a145
 800a0c8:	0800a145 	.word	0x0800a145
 800a0cc:	0800a145 	.word	0x0800a145
 800a0d0:	0800a145 	.word	0x0800a145
 800a0d4:	0800a103 	.word	0x0800a103
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a0d8:	f7fd fca6 	bl	8007a28 <HAL_RCC_GetPCLK3Freq>
 800a0dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a0de:	e109      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a0e0:	f7fd fb58 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 800a0e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a0e6:	e105      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0e8:	4b53      	ldr	r3, [pc, #332]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f4:	d102      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800a0f6:	4b51      	ldr	r3, [pc, #324]	; (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0fa:	e0fb      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a100:	e0f8      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a102:	4b4d      	ldr	r3, [pc, #308]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b20      	cmp	r3, #32
 800a10c:	d117      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a10e:	4b4a      	ldr	r3, [pc, #296]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800a11a:	4b47      	ldr	r3, [pc, #284]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	0e1b      	lsrs	r3, r3, #24
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	e006      	b.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800a126:	4b44      	ldr	r3, [pc, #272]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a12c:	041b      	lsls	r3, r3, #16
 800a12e:	0e1b      	lsrs	r3, r3, #24
 800a130:	f003 030f 	and.w	r3, r3, #15
 800a134:	4a42      	ldr	r2, [pc, #264]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a13a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a13c:	e0da      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a13e:	2300      	movs	r3, #0
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a142:	e0d7      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a148:	e0d4      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a14e:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800a152:	430b      	orrs	r3, r1
 800a154:	d155      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a156:	4b38      	ldr	r3, [pc, #224]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a15c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a160:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a168:	d013      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a170:	d844      	bhi.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a178:	d013      	beq.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a180:	d83c      	bhi.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	2b00      	cmp	r3, #0
 800a186:	d014      	beq.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800a188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a18e:	d014      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800a190:	e034      	b.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a192:	f107 0318 	add.w	r3, r7, #24
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fc08 	bl	80089ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1a0:	e0a8      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fa98 	bl	80086dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1b0:	e0a0      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a1b2:	f7fd faef 	bl	8007794 <HAL_RCC_GetSysClockFreq>
 800a1b6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a1b8:	e09c      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1ba:	4b1f      	ldr	r3, [pc, #124]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0320 	and.w	r3, r3, #32
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	d117      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1c6:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800a1d2:	4b19      	ldr	r3, [pc, #100]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	0e1b      	lsrs	r3, r3, #24
 800a1d8:	f003 030f 	and.w	r3, r3, #15
 800a1dc:	e006      	b.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a1de:	4b16      	ldr	r3, [pc, #88]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	0e1b      	lsrs	r3, r3, #24
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	4a14      	ldr	r2, [pc, #80]	; (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1f4:	e07e      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1fa:	e07b      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a200:	e078      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a206:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800a20a:	430b      	orrs	r3, r1
 800a20c:	d138      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a20e:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a218:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a21c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b02      	cmp	r3, #2
 800a226:	d10d      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800a22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
 800a234:	e05e      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800a236:	bf00      	nop
 800a238:	46020c00 	.word	0x46020c00
 800a23c:	00f42400 	.word	0x00f42400
 800a240:	0800f3b0 	.word	0x0800f3b0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a244:	4b2e      	ldr	r3, [pc, #184]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a24a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a24e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a252:	d112      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a25a:	d10e      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a25c:	4b28      	ldr	r3, [pc, #160]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a25e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a26a:	d102      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800a26c:	23fa      	movs	r3, #250	; 0xfa
 800a26e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a270:	e040      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800a272:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a276:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a278:	e03c      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	637b      	str	r3, [r7, #52]	; 0x34
 800a27e:	e039      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a284:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a288:	430b      	orrs	r3, r1
 800a28a:	d131      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a28e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a292:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a296:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a298:	4b19      	ldr	r3, [pc, #100]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2a4:	d105      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800a2ac:	4b15      	ldr	r3, [pc, #84]	; (800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800a2ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a2b0:	e020      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a2b2:	4b13      	ldr	r3, [pc, #76]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2be:	d106      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c6:	d102      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a2c8:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800a2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a2cc:	e012      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2da:	d106      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e2:	d102      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800a2e4:	4b09      	ldr	r3, [pc, #36]	; (800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800a2e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e8:	e004      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ee:	e001      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3738      	adds	r7, #56	; 0x38
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	46020c00 	.word	0x46020c00
 800a304:	02dc6c00 	.word	0x02dc6c00
 800a308:	016e3600 	.word	0x016e3600
 800a30c:	00f42400 	.word	0x00f42400

0800a310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a318:	4b47      	ldr	r3, [pc, #284]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a46      	ldr	r2, [pc, #280]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a31e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a322:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a324:	f7f8 feda 	bl	80030dc <HAL_GetTick>
 800a328:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a32a:	e008      	b.n	800a33e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a32c:	f7f8 fed6 	bl	80030dc <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b02      	cmp	r3, #2
 800a338:	d901      	bls.n	800a33e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e077      	b.n	800a42e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a33e:	4b3e      	ldr	r3, [pc, #248]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f0      	bne.n	800a32c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a34a:	4b3b      	ldr	r3, [pc, #236]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a352:	f023 0303 	bic.w	r3, r3, #3
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	6852      	ldr	r2, [r2, #4]
 800a35e:	3a01      	subs	r2, #1
 800a360:	0212      	lsls	r2, r2, #8
 800a362:	430a      	orrs	r2, r1
 800a364:	4934      	ldr	r1, [pc, #208]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a366:	4313      	orrs	r3, r2
 800a368:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a36a:	4b33      	ldr	r3, [pc, #204]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a36c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a36e:	4b33      	ldr	r3, [pc, #204]	; (800a43c <RCCEx_PLL2_Config+0x12c>)
 800a370:	4013      	ands	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6892      	ldr	r2, [r2, #8]
 800a376:	3a01      	subs	r2, #1
 800a378:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	68d2      	ldr	r2, [r2, #12]
 800a380:	3a01      	subs	r2, #1
 800a382:	0252      	lsls	r2, r2, #9
 800a384:	b292      	uxth	r2, r2
 800a386:	4311      	orrs	r1, r2
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	6912      	ldr	r2, [r2, #16]
 800a38c:	3a01      	subs	r2, #1
 800a38e:	0412      	lsls	r2, r2, #16
 800a390:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a394:	4311      	orrs	r1, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6952      	ldr	r2, [r2, #20]
 800a39a:	3a01      	subs	r2, #1
 800a39c:	0612      	lsls	r2, r2, #24
 800a39e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	4924      	ldr	r1, [pc, #144]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a3aa:	4b23      	ldr	r3, [pc, #140]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	f023 020c 	bic.w	r2, r3, #12
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	4920      	ldr	r1, [pc, #128]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a3bc:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	491c      	ldr	r1, [pc, #112]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a3ca:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	4a1a      	ldr	r2, [pc, #104]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3d0:	f023 0310 	bic.w	r3, r3, #16
 800a3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	69d2      	ldr	r2, [r2, #28]
 800a3e6:	00d2      	lsls	r2, r2, #3
 800a3e8:	4913      	ldr	r1, [pc, #76]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a11      	ldr	r2, [pc, #68]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3f4:	f043 0310 	orr.w	r3, r3, #16
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a0e      	ldr	r2, [pc, #56]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a404:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a406:	f7f8 fe69 	bl	80030dc <HAL_GetTick>
 800a40a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a40c:	e008      	b.n	800a420 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a40e:	f7f8 fe65 	bl	80030dc <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e006      	b.n	800a42e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <RCCEx_PLL2_Config+0x128>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0f0      	beq.n	800a40e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0

}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	46020c00 	.word	0x46020c00
 800a43c:	80800000 	.word	0x80800000

0800a440 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a448:	4b47      	ldr	r3, [pc, #284]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a46      	ldr	r2, [pc, #280]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a44e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a452:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a454:	f7f8 fe42 	bl	80030dc <HAL_GetTick>
 800a458:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a45a:	e008      	b.n	800a46e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a45c:	f7f8 fe3e 	bl	80030dc <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	2b02      	cmp	r3, #2
 800a468:	d901      	bls.n	800a46e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e077      	b.n	800a55e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a46e:	4b3e      	ldr	r3, [pc, #248]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f0      	bne.n	800a45c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a47a:	4b3b      	ldr	r3, [pc, #236]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a482:	f023 0303 	bic.w	r3, r3, #3
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6811      	ldr	r1, [r2, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6852      	ldr	r2, [r2, #4]
 800a48e:	3a01      	subs	r2, #1
 800a490:	0212      	lsls	r2, r2, #8
 800a492:	430a      	orrs	r2, r1
 800a494:	4934      	ldr	r1, [pc, #208]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a496:	4313      	orrs	r3, r2
 800a498:	630b      	str	r3, [r1, #48]	; 0x30
 800a49a:	4b33      	ldr	r3, [pc, #204]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a49c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a49e:	4b33      	ldr	r3, [pc, #204]	; (800a56c <RCCEx_PLL3_Config+0x12c>)
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	6892      	ldr	r2, [r2, #8]
 800a4a6:	3a01      	subs	r2, #1
 800a4a8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	68d2      	ldr	r2, [r2, #12]
 800a4b0:	3a01      	subs	r2, #1
 800a4b2:	0252      	lsls	r2, r2, #9
 800a4b4:	b292      	uxth	r2, r2
 800a4b6:	4311      	orrs	r1, r2
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	6912      	ldr	r2, [r2, #16]
 800a4bc:	3a01      	subs	r2, #1
 800a4be:	0412      	lsls	r2, r2, #16
 800a4c0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a4c4:	4311      	orrs	r1, r2
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	6952      	ldr	r2, [r2, #20]
 800a4ca:	3a01      	subs	r2, #1
 800a4cc:	0612      	lsls	r2, r2, #24
 800a4ce:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	4924      	ldr	r1, [pc, #144]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	f023 020c 	bic.w	r2, r3, #12
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	4920      	ldr	r1, [pc, #128]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a4ec:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a1b      	ldr	r3, [r3, #32]
 800a4f4:	491c      	ldr	r1, [pc, #112]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a4fa:	4b1b      	ldr	r3, [pc, #108]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	4a1a      	ldr	r2, [pc, #104]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a500:	f023 0310 	bic.w	r3, r3, #16
 800a504:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a506:	4b18      	ldr	r3, [pc, #96]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a50a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a50e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	69d2      	ldr	r2, [r2, #28]
 800a516:	00d2      	lsls	r2, r2, #3
 800a518:	4913      	ldr	r1, [pc, #76]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a51e:	4b12      	ldr	r3, [pc, #72]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a522:	4a11      	ldr	r2, [pc, #68]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a524:	f043 0310 	orr.w	r3, r3, #16
 800a528:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a0e      	ldr	r2, [pc, #56]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a534:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a536:	f7f8 fdd1 	bl	80030dc <HAL_GetTick>
 800a53a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a53c:	e008      	b.n	800a550 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a53e:	f7f8 fdcd 	bl	80030dc <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d901      	bls.n	800a550 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e006      	b.n	800a55e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <RCCEx_PLL3_Config+0x128>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0f0      	beq.n	800a53e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	46020c00 	.word	0x46020c00
 800a56c:	80800000 	.word	0x80800000

0800a570 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d071      	beq.n	800a666 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d106      	bne.n	800a59c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7f7 fdd4 	bl	8002144 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a5a4:	4b32      	ldr	r3, [pc, #200]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d051      	beq.n	800a654 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5b0:	4b2f      	ldr	r3, [pc, #188]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5b2:	22ca      	movs	r2, #202	; 0xca
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24
 800a5b6:	4b2e      	ldr	r3, [pc, #184]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5b8:	2253      	movs	r2, #83	; 0x53
 800a5ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f88b 	bl	800a6d8 <RTC_EnterInitMode>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d13f      	bne.n	800a64c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a5cc:	4b28      	ldr	r3, [pc, #160]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	4a27      	ldr	r2, [pc, #156]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5da:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a5dc:	4b24      	ldr	r3, [pc, #144]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5de:	699a      	ldr	r2, [r3, #24]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6859      	ldr	r1, [r3, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	4319      	orrs	r1, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	491f      	ldr	r1, [pc, #124]	; (800a670 <HAL_RTC_Init+0x100>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	041b      	lsls	r3, r3, #16
 800a600:	491b      	ldr	r1, [pc, #108]	; (800a670 <HAL_RTC_Init+0x100>)
 800a602:	4313      	orrs	r3, r2
 800a604:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a606:	4b1a      	ldr	r3, [pc, #104]	; (800a670 <HAL_RTC_Init+0x100>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	430b      	orrs	r3, r1
 800a618:	4915      	ldr	r1, [pc, #84]	; (800a670 <HAL_RTC_Init+0x100>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f896 	bl	800a750 <RTC_ExitInitMode>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10e      	bne.n	800a64c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <HAL_RTC_Init+0x100>)
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a19      	ldr	r1, [r3, #32]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69db      	ldr	r3, [r3, #28]
 800a63e:	4319      	orrs	r1, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	430b      	orrs	r3, r1
 800a646:	490a      	ldr	r1, [pc, #40]	; (800a670 <HAL_RTC_Init+0x100>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a64c:	4b08      	ldr	r3, [pc, #32]	; (800a670 <HAL_RTC_Init+0x100>)
 800a64e:	22ff      	movs	r2, #255	; 0xff
 800a650:	625a      	str	r2, [r3, #36]	; 0x24
 800a652:	e001      	b.n	800a658 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d103      	bne.n	800a666 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	46007800 	.word	0x46007800

0800a674 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a67c:	4b15      	ldr	r3, [pc, #84]	; (800a6d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	4a14      	ldr	r2, [pc, #80]	; (800a6d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a682:	f023 0320 	bic.w	r3, r3, #32
 800a686:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a688:	f7f8 fd28 	bl	80030dc <HAL_GetTick>
 800a68c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a68e:	e013      	b.n	800a6b8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a690:	f7f8 fd24 	bl	80030dc <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a69e:	d90b      	bls.n	800a6b8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6a0:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10c      	bne.n	800a6c6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2203      	movs	r2, #3
 800a6b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e008      	b.n	800a6ca <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0e5      	beq.n	800a690 <HAL_RTC_WaitForSynchro+0x1c>
 800a6c4:	e000      	b.n	800a6c8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a6c6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	46007800 	.word	0x46007800

0800a6d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a6e4:	4b19      	ldr	r3, [pc, #100]	; (800a74c <RTC_EnterInitMode+0x74>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d128      	bne.n	800a742 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a6f0:	4b16      	ldr	r3, [pc, #88]	; (800a74c <RTC_EnterInitMode+0x74>)
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	4a15      	ldr	r2, [pc, #84]	; (800a74c <RTC_EnterInitMode+0x74>)
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a6fc:	f7f8 fcee 	bl	80030dc <HAL_GetTick>
 800a700:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a702:	e013      	b.n	800a72c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a704:	f7f8 fcea 	bl	80030dc <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a712:	d90b      	bls.n	800a72c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a714:	4b0d      	ldr	r3, [pc, #52]	; (800a74c <RTC_EnterInitMode+0x74>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10f      	bne.n	800a740 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2203      	movs	r2, #3
 800a728:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <RTC_EnterInitMode+0x74>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <RTC_EnterInitMode+0x6a>
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d1e2      	bne.n	800a704 <RTC_EnterInitMode+0x2c>
 800a73e:	e000      	b.n	800a742 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a740:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a742:	7bfb      	ldrb	r3, [r7, #15]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	46007800 	.word	0x46007800

0800a750 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a75c:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4a19      	ldr	r2, [pc, #100]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a766:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a768:	4b17      	ldr	r3, [pc, #92]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10c      	bne.n	800a78e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff ff7d 	bl	800a674 <HAL_RTC_WaitForSynchro>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01e      	beq.n	800a7be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2203      	movs	r2, #3
 800a784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	e017      	b.n	800a7be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a78e:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	4a0d      	ldr	r2, [pc, #52]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a794:	f023 0320 	bic.w	r3, r3, #32
 800a798:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ff6a 	bl	800a674 <HAL_RTC_WaitForSynchro>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d005      	beq.n	800a7b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	4a04      	ldr	r2, [pc, #16]	; (800a7c8 <RTC_ExitInitMode+0x78>)
 800a7b8:	f043 0320 	orr.w	r3, r3, #32
 800a7bc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	46007800 	.word	0x46007800

0800a7cc <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
               || ((sTamper->Filter == RTC_TAMPERFILTER_DISABLE)  && \
                   ((sTamper->Trigger == RTC_TAMPERTRIGGER_RISINGEDGE) || \
                    (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))));

  /* Configuration register 2 */
  tmpreg = READ_REG(TAMP->CR2);
 800a7d6:	4b35      	ldr	r3, [pc, #212]	; (800a8ac <HAL_RTCEx_SetTamper+0xe0>)
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	60fb      	str	r3, [r7, #12]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	061a      	lsls	r2, r3, #24
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	431a      	orrs	r2, r3
              (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos));
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
  tmpreg &= ~((sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos) | (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos) | \
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]

  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d003      	beq.n	800a808 <HAL_RTCEx_SetTamper+0x3c>
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d105      	bne.n	800a814 <HAL_RTCEx_SetTamper+0x48>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1TRG_Pos);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	061b      	lsls	r3, r3, #24
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4313      	orrs	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d005      	beq.n	800a828 <HAL_RTCEx_SetTamper+0x5c>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1MSK_Pos);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	041b      	lsls	r3, r3, #16
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  }

  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <HAL_RTCEx_SetTamper+0x6e>
  {
    tmpreg |= (sTamper->Tamper << TAMP_CR2_TAMP1NOERASE_Pos);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
  }
  WRITE_REG(TAMP->CR2, tmpreg);
 800a83a:	4a1c      	ldr	r2, [pc, #112]	; (800a8ac <HAL_RTCEx_SetTamper+0xe0>)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6053      	str	r3, [r2, #4]

  /* Filter control register */
  WRITE_REG(TAMP->FLTCR, sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | \
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	431a      	orrs	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	431a      	orrs	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	4915      	ldr	r1, [pc, #84]	; (800a8ac <HAL_RTCEx_SetTamper+0xe0>)
 800a856:	4313      	orrs	r3, r2
 800a858:	60cb      	str	r3, [r1, #12]
            sTamper->TamperPullUp);

  /* Timestamp on tamper */
  if (READ_BIT(RTC->CR, RTC_CR_TAMPTS) != sTamper->TimeStampOnTamperDetection)
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	429a      	cmp	r2, r3
 800a868:	d011      	beq.n	800a88e <HAL_RTCEx_SetTamper+0xc2>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a86a:	4b11      	ldr	r3, [pc, #68]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a86c:	22ca      	movs	r2, #202	; 0xca
 800a86e:	625a      	str	r2, [r3, #36]	; 0x24
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a872:	2253      	movs	r2, #83	; 0x53
 800a874:	625a      	str	r2, [r3, #36]	; 0x24
    MODIFY_REG(RTC->CR, RTC_CR_TAMPTS, sTamper->TimeStampOnTamperDetection);
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	490b      	ldr	r1, [pc, #44]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a884:	4313      	orrs	r3, r2
 800a886:	618b      	str	r3, [r1, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <HAL_RTCEx_SetTamper+0xe4>)
 800a88a:	22ff      	movs	r2, #255	; 0xff
 800a88c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Control register 1 */
  SET_BIT(TAMP->CR1, sTamper->Tamper);
 800a88e:	4b07      	ldr	r3, [pc, #28]	; (800a8ac <HAL_RTCEx_SetTamper+0xe0>)
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4905      	ldr	r1, [pc, #20]	; (800a8ac <HAL_RTCEx_SetTamper+0xe0>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	46007c00 	.word	0x46007c00
 800a8b0:	46007800 	.word	0x46007800

0800a8b4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	4910      	ldr	r1, [pc, #64]	; (800a908 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	490c      	ldr	r1, [pc, #48]	; (800a90c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	6919      	ldr	r1, [r3, #16]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	4905      	ldr	r1, [pc, #20]	; (800a90c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	46007800 	.word	0x46007800
 800a90c:	46007c00 	.word	0x46007c00

0800a910 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08a      	sub	sp, #40	; 0x28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e1ce      	b.n	800acc0 <HAL_SAI_Init+0x3b0>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d10e      	bne.n	800a94a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a83      	ldr	r2, [pc, #524]	; (800ab40 <HAL_SAI_Init+0x230>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d107      	bne.n	800a946 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d103      	bne.n	800a946 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e1ba      	b.n	800acc0 <HAL_SAI_Init+0x3b0>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7f8 f8c2 	bl	8002ae8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f9b7 	bl	800acd8 <SAI_Disable>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e1a5      	b.n	800acc0 <HAL_SAI_Init+0x3b0>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2202      	movs	r2, #2
 800a978:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

#if defined(SAI2)
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	2b02      	cmp	r3, #2
 800a982:	d00c      	beq.n	800a99e <HAL_SAI_Init+0x8e>
 800a984:	2b02      	cmp	r3, #2
 800a986:	d80d      	bhi.n	800a9a4 <HAL_SAI_Init+0x94>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <HAL_SAI_Init+0x82>
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d003      	beq.n	800a998 <HAL_SAI_Init+0x88>
 800a990:	e008      	b.n	800a9a4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a996:	e008      	b.n	800a9aa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a998:	2310      	movs	r3, #16
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a99c:	e005      	b.n	800a9aa <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a99e:	2320      	movs	r3, #32
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9a2:	e002      	b.n	800a9aa <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9a8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d81d      	bhi.n	800a9ee <HAL_SAI_Init+0xde>
 800a9b2:	a201      	add	r2, pc, #4	; (adr r2, 800a9b8 <HAL_SAI_Init+0xa8>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800a9c9 	.word	0x0800a9c9
 800a9bc:	0800a9cf 	.word	0x0800a9cf
 800a9c0:	0800a9d7 	.word	0x0800a9d7
 800a9c4:	0800a9df 	.word	0x0800a9df
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
      break;
 800a9cc:	e012      	b.n	800a9f4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a9ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9d2:	61fb      	str	r3, [r7, #28]
      break;
 800a9d4:	e00e      	b.n	800a9f4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a9d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9da:	61fb      	str	r3, [r7, #28]
      break;
 800a9dc:	e00a      	b.n	800a9f4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a9de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9ec:	e002      	b.n	800a9f4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	61fb      	str	r3, [r7, #28]
      break;
 800a9f2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a51      	ldr	r2, [pc, #324]	; (800ab40 <HAL_SAI_Init+0x230>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_SAI_Init+0xf8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a50      	ldr	r2, [pc, #320]	; (800ab44 <HAL_SAI_Init+0x234>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d103      	bne.n	800aa10 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800aa08:	4a4f      	ldr	r2, [pc, #316]	; (800ab48 <HAL_SAI_Init+0x238>)
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	6013      	str	r3, [r2, #0]
 800aa0e:	e002      	b.n	800aa16 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800aa10:	4a4e      	ldr	r2, [pc, #312]	; (800ab4c <HAL_SAI_Init+0x23c>)
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	6013      	str	r3, [r2, #0]
  }
#else /* SAI2 */
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d077      	beq.n	800ab0e <HAL_SAI_Init+0x1fe>
    uint32_t freq;
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
#if defined(SAI2)
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a47      	ldr	r2, [pc, #284]	; (800ab40 <HAL_SAI_Init+0x230>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d004      	beq.n	800aa32 <HAL_SAI_Init+0x122>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a45      	ldr	r2, [pc, #276]	; (800ab44 <HAL_SAI_Init+0x234>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d107      	bne.n	800aa42 <HAL_SAI_Init+0x132>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800aa32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800aa36:	f04f 0100 	mov.w	r1, #0
 800aa3a:	f7fe fa87 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800aa3e:	61b8      	str	r0, [r7, #24]
 800aa40:	e006      	b.n	800aa50 <HAL_SAI_Init+0x140>
    }
    else
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800aa42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800aa46:	f04f 0100 	mov.w	r1, #0
 800aa4a:	f7fe fa7f 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800aa4e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800aa58:	d120      	bne.n	800aa9c <HAL_SAI_Init+0x18c>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d102      	bne.n	800aa68 <HAL_SAI_Init+0x158>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800aa62:	2340      	movs	r3, #64	; 0x40
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	e00a      	b.n	800aa7e <HAL_SAI_Init+0x16e>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d103      	bne.n	800aa78 <HAL_SAI_Init+0x168>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800aa70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	e002      	b.n	800aa7e <HAL_SAI_Init+0x16e>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	4619      	mov	r1, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	fb02 f303 	mul.w	r3, r2, r3
 800aa94:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e017      	b.n	800aacc <HAL_SAI_Init+0x1bc>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaa4:	d101      	bne.n	800aaaa <HAL_SAI_Init+0x19a>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e000      	b.n	800aaac <HAL_SAI_Init+0x19c>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	4619      	mov	r1, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaca:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	4a20      	ldr	r2, [pc, #128]	; (800ab50 <HAL_SAI_Init+0x240>)
 800aad0:	fba2 2303 	umull	r2, r3, r2, r3
 800aad4:	08da      	lsrs	r2, r3, #3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800aada:	6979      	ldr	r1, [r7, #20]
 800aadc:	4b1c      	ldr	r3, [pc, #112]	; (800ab50 <HAL_SAI_Init+0x240>)
 800aade:	fba3 2301 	umull	r2, r3, r3, r1
 800aae2:	08da      	lsrs	r2, r3, #3
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	1aca      	subs	r2, r1, r3
 800aaee:	2a08      	cmp	r2, #8
 800aaf0:	d904      	bls.n	800aafc <HAL_SAI_Init+0x1ec>
    {
      hsai->Init.Mckdiv += 1U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab00:	2b04      	cmp	r3, #4
 800ab02:	d104      	bne.n	800ab0e <HAL_SAI_Init+0x1fe>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	085a      	lsrs	r2, r3, #1
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_SAI_Init+0x20e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d109      	bne.n	800ab32 <HAL_SAI_Init+0x222>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_SAI_Init+0x21a>
 800ab26:	2300      	movs	r3, #0
 800ab28:	e001      	b.n	800ab2e <HAL_SAI_Init+0x21e>
 800ab2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab2e:	623b      	str	r3, [r7, #32]
 800ab30:	e012      	b.n	800ab58 <HAL_SAI_Init+0x248>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d10c      	bne.n	800ab54 <HAL_SAI_Init+0x244>
 800ab3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab3e:	e00a      	b.n	800ab56 <HAL_SAI_Init+0x246>
 800ab40:	40015404 	.word	0x40015404
 800ab44:	40015424 	.word	0x40015424
 800ab48:	40015400 	.word	0x40015400
 800ab4c:	40015800 	.word	0x40015800
 800ab50:	cccccccd 	.word	0xcccccccd
 800ab54:	2300      	movs	r3, #0
 800ab56:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	4b59      	ldr	r3, [pc, #356]	; (800acc8 <HAL_SAI_Init+0x3b8>)
 800ab64:	400b      	ands	r3, r1
 800ab66:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6819      	ldr	r1, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab76:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ab7c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab82:	431a      	orrs	r2, r3
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800ab90:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ab9c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	051b      	lsls	r3, r3, #20
 800aba4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800abaa:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6812      	ldr	r2, [r2, #0]
 800abc4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800abc8:	f023 030f 	bic.w	r3, r3, #15
 800abcc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6859      	ldr	r1, [r3, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	69da      	ldr	r2, [r3, #28]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	431a      	orrs	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe2:	431a      	orrs	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6899      	ldr	r1, [r3, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4b35      	ldr	r3, [pc, #212]	; (800accc <HAL_SAI_Init+0x3bc>)
 800abf8:	400b      	ands	r3, r1
 800abfa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6899      	ldr	r1, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac06:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ac0c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800ac12:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800ac18:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ac22:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	430a      	orrs	r2, r1
 800ac2a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68d9      	ldr	r1, [r3, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ac3a:	400b      	ands	r3, r1
 800ac3c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68d9      	ldr	r1, [r3, #12]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac52:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac54:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	430a      	orrs	r2, r1
 800ac66:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a18      	ldr	r2, [pc, #96]	; (800acd0 <HAL_SAI_Init+0x3c0>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d119      	bne.n	800aca6 <HAL_SAI_Init+0x396>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ac72:	4b18      	ldr	r3, [pc, #96]	; (800acd4 <HAL_SAI_Init+0x3c4>)
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <HAL_SAI_Init+0x3c4>)
 800ac78:	f023 0301 	bic.w	r3, r3, #1
 800ac7c:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d10e      	bne.n	800aca6 <HAL_SAI_Init+0x396>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac90:	3b01      	subs	r3, #1
 800ac92:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ac94:	490f      	ldr	r1, [pc, #60]	; (800acd4 <HAL_SAI_Init+0x3c4>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	; (800acd4 <HAL_SAI_Init+0x3c4>)
 800ac9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac9e:	4a0d      	ldr	r2, [pc, #52]	; (800acd4 <HAL_SAI_Init+0x3c4>)
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3728      	adds	r7, #40	; 0x28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	f005c010 	.word	0xf005c010
 800accc:	fff88000 	.word	0xfff88000
 800acd0:	40015404 	.word	0x40015404
 800acd4:	40015400 	.word	0x40015400

0800acd8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ace0:	4b18      	ldr	r3, [pc, #96]	; (800ad44 <SAI_Disable+0x6c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <SAI_Disable+0x70>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	0b1b      	lsrs	r3, r3, #12
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad02:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	72fb      	strb	r3, [r7, #11]
      break;
 800ad1e:	e009      	b.n	800ad34 <SAI_Disable+0x5c>
    }
    count--;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e7      	bne.n	800ad04 <SAI_Disable+0x2c>

  return status;
 800ad34:	7afb      	ldrb	r3, [r7, #11]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000000 	.word	0x20000000
 800ad48:	95cbec1b 	.word	0x95cbec1b

0800ad4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08a      	sub	sp, #40	; 0x28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d101      	bne.n	800ad5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e075      	b.n	800ae4a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d105      	bne.n	800ad76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7f7 fa2b 	bl	80021cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2204      	movs	r2, #4
 800ad7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f868 	bl	800ae54 <HAL_SD_InitCard>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e05d      	b.n	800ae4a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ad8e:	f107 0308 	add.w	r3, r7, #8
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fa9d 	bl	800b2d4 <HAL_SD_GetCardStatus>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e052      	b.n	800ae4a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ada4:	7e3b      	ldrb	r3, [r7, #24]
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800adaa:	7e7b      	ldrb	r3, [r7, #25]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d10a      	bne.n	800adce <HAL_SD_Init+0x82>
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d102      	bne.n	800adc4 <HAL_SD_Init+0x78>
 800adbe:	6a3b      	ldr	r3, [r7, #32]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adca:	659a      	str	r2, [r3, #88]	; 0x58
 800adcc:	e00b      	b.n	800ade6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	2b01      	cmp	r3, #1
 800add4:	d104      	bne.n	800ade0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800addc:	659a      	str	r2, [r3, #88]	; 0x58
 800adde:	e002      	b.n	800ade6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fb2f 	bl	800b450 <HAL_SD_ConfigWideBusOperation>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e026      	b.n	800ae4a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800adfc:	f7f8 f96e 	bl	80030dc <HAL_GetTick>
 800ae00:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ae02:	e011      	b.n	800ae28 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae04:	f7f8 f96a 	bl	80030dc <HAL_GetTick>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae12:	d109      	bne.n	800ae28 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae1a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e010      	b.n	800ae4a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fc23 	bl	800b674 <HAL_SD_GetCardState>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b04      	cmp	r3, #4
 800ae32:	d1e7      	bne.n	800ae04 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3728      	adds	r7, #40	; 0x28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b08d      	sub	sp, #52	; 0x34
 800ae58:	af02      	add	r7, sp, #8
 800ae5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ae60:	2300      	movs	r3, #0
 800ae62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ae6c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ae70:	f04f 0100 	mov.w	r1, #0
 800ae74:	f7fe f86a 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800ae78:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d109      	bne.n	800ae94 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae8e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e070      	b.n	800af76 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	4a39      	ldr	r2, [pc, #228]	; (800af80 <HAL_SD_InitCard+0x12c>)
 800ae9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae9e:	091b      	lsrs	r3, r3, #4
 800aea0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681c      	ldr	r4, [r3, #0]
 800aea6:	466a      	mov	r2, sp
 800aea8:	f107 0318 	add.w	r3, r7, #24
 800aeac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aeb0:	e882 0003 	stmia.w	r2, {r0, r1}
 800aeb4:	f107 030c 	add.w	r3, r7, #12
 800aeb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeba:	4620      	mov	r0, r4
 800aebc:	f002 fd8e 	bl	800d9dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f002 fdc0 	bl	800da4a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d005      	beq.n	800aedc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeda:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800aee2:	4a28      	ldr	r2, [pc, #160]	; (800af84 <HAL_SD_InitCard+0x130>)
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeea:	3301      	adds	r3, #1
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7f8 f901 	bl	80030f4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fcac 	bl	800b850 <SD_PowerON>
 800aef8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	431a      	orrs	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e02e      	b.n	800af76 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fbcb 	bl	800b6b4 <SD_InitCard>
 800af1e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00b      	beq.n	800af3e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e01b      	b.n	800af76 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af46:	4618      	mov	r0, r3
 800af48:	f002 fe14 	bl	800db74 <SDMMC_CmdBlockLength>
 800af4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00f      	beq.n	800af74 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a0b      	ldr	r2, [pc, #44]	; (800af88 <HAL_SD_InitCard+0x134>)
 800af5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af60:	6a3b      	ldr	r3, [r7, #32]
 800af62:	431a      	orrs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e000      	b.n	800af76 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	372c      	adds	r7, #44	; 0x2c
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd90      	pop	{r4, r7, pc}
 800af7e:	bf00      	nop
 800af80:	014f8b59 	.word	0x014f8b59
 800af84:	00012110 	.word	0x00012110
 800af88:	1fe00fff 	.word	0x1fe00fff

0800af8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af9a:	0f9b      	lsrs	r3, r3, #30
 800af9c:	b2da      	uxtb	r2, r3
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afa6:	0e9b      	lsrs	r3, r3, #26
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	f003 030f 	and.w	r3, r3, #15
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afb8:	0e1b      	lsrs	r3, r3, #24
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afca:	0c1b      	lsrs	r3, r3, #16
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afec:	0d1b      	lsrs	r3, r3, #20
 800afee:	b29a      	uxth	r2, r3
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff8:	0c1b      	lsrs	r3, r3, #16
 800affa:	b2db      	uxtb	r3, r3
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	b2da      	uxtb	r2, r3
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00a:	0bdb      	lsrs	r3, r3, #15
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	b2da      	uxtb	r2, r3
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01c:	0b9b      	lsrs	r3, r3, #14
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	b2da      	uxtb	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b02e:	0b5b      	lsrs	r3, r3, #13
 800b030:	b2db      	uxtb	r3, r3
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b040:	0b1b      	lsrs	r3, r3, #12
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2200      	movs	r2, #0
 800b052:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d163      	bne.n	800b124 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b060:	009a      	lsls	r2, r3, #2
 800b062:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b066:	4013      	ands	r3, r2
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b06c:	0f92      	lsrs	r2, r2, #30
 800b06e:	431a      	orrs	r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b078:	0edb      	lsrs	r3, r3, #27
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 0307 	and.w	r3, r3, #7
 800b080:	b2da      	uxtb	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b08a:	0e1b      	lsrs	r3, r3, #24
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0307 	and.w	r3, r3, #7
 800b092:	b2da      	uxtb	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b09c:	0d5b      	lsrs	r3, r3, #21
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 0307 	and.w	r3, r3, #7
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0ae:	0c9b      	lsrs	r3, r3, #18
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	b2da      	uxtb	r2, r3
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c0:	0bdb      	lsrs	r3, r3, #15
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	1c5a      	adds	r2, r3, #1
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	7e1b      	ldrb	r3, [r3, #24]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0ee:	fb03 f202 	mul.w	r2, r3, r2
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	7a1b      	ldrb	r3, [r3, #8]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	2201      	movs	r2, #1
 800b102:	409a      	lsls	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b110:	0a52      	lsrs	r2, r2, #9
 800b112:	fb03 f202 	mul.w	r2, r3, r2
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b120:	655a      	str	r2, [r3, #84]	; 0x54
 800b122:	e031      	b.n	800b188 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d11d      	bne.n	800b168 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b130:	041b      	lsls	r3, r3, #16
 800b132:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	431a      	orrs	r2, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	3301      	adds	r3, #1
 800b148:	029a      	lsls	r2, r3, #10
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b15c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	655a      	str	r2, [r3, #84]	; 0x54
 800b166:	e00f      	b.n	800b188 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a58      	ldr	r2, [pc, #352]	; (800b2d0 <HAL_SD_GetCardCSD+0x344>)
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e09d      	b.n	800b2c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b18c:	0b9b      	lsrs	r3, r3, #14
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	b2da      	uxtb	r2, r3
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b19e:	09db      	lsrs	r3, r3, #7
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c0:	0fdb      	lsrs	r3, r3, #31
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1cc:	0f5b      	lsrs	r3, r3, #29
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	f003 0303 	and.w	r3, r3, #3
 800b1d4:	b2da      	uxtb	r2, r3
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1de:	0e9b      	lsrs	r3, r3, #26
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1f0:	0d9b      	lsrs	r3, r3, #22
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b202:	0d5b      	lsrs	r3, r3, #21
 800b204:	b2db      	uxtb	r3, r3
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b21e:	0c1b      	lsrs	r3, r3, #16
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b232:	0bdb      	lsrs	r3, r3, #15
 800b234:	b2db      	uxtb	r3, r3
 800b236:	f003 0301 	and.w	r3, r3, #1
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b246:	0b9b      	lsrs	r3, r3, #14
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b25a:	0b5b      	lsrs	r3, r3, #13
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	b2da      	uxtb	r2, r3
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b26e:	0b1b      	lsrs	r3, r3, #12
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b282:	0a9b      	lsrs	r3, r3, #10
 800b284:	b2db      	uxtb	r3, r3
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b296:	0a1b      	lsrs	r3, r3, #8
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b2c2:	2300      	movs	r3, #0
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	1fe00fff 	.word	0x1fe00fff

0800b2d4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b094      	sub	sp, #80	; 0x50
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d101      	bne.n	800b2f4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e0a7      	b.n	800b444 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800b2f4:	f107 0308 	add.w	r3, r7, #8
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb36 	bl	800b96c <SD_SendSDStatus>
 800b300:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b304:	2b00      	cmp	r3, #0
 800b306:	d011      	beq.n	800b32c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a4f      	ldr	r2, [pc, #316]	; (800b44c <HAL_SD_GetCardStatus+0x178>)
 800b30e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b32a:	e070      	b.n	800b40e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	099b      	lsrs	r3, r3, #6
 800b330:	b2db      	uxtb	r3, r3
 800b332:	f003 0303 	and.w	r3, r3, #3
 800b336:	b2da      	uxtb	r2, r3
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	b2db      	uxtb	r3, r3
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	b2da      	uxtb	r2, r3
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	0a1b      	lsrs	r3, r3, #8
 800b350:	b29b      	uxth	r3, r3
 800b352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b356:	b29a      	uxth	r2, r3
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	0e1b      	lsrs	r3, r3, #24
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4313      	orrs	r3, r2
 800b360:	b29a      	uxth	r2, r3
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	061a      	lsls	r2, r3, #24
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b372:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b37c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	0e1b      	lsrs	r3, r3, #24
 800b382:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	0a1b      	lsrs	r3, r3, #8
 800b394:	b2da      	uxtb	r2, r3
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	0d1b      	lsrs	r3, r3, #20
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	f003 030f 	and.w	r3, r3, #15
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	0c1b      	lsrs	r3, r3, #16
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	0a9b      	lsrs	r3, r3, #10
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	0a1b      	lsrs	r3, r3, #8
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	091b      	lsrs	r3, r3, #4
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	f003 030f 	and.w	r3, r3, #15
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	0e1b      	lsrs	r3, r3, #24
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b416:	4618      	mov	r0, r3
 800b418:	f002 fbac 	bl	800db74 <SDMMC_CmdBlockLength>
 800b41c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800b41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00d      	beq.n	800b440 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a08      	ldr	r2, [pc, #32]	; (800b44c <HAL_SD_GetCardStatus+0x178>)
 800b42a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b430:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800b440:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b444:	4618      	mov	r0, r3
 800b446:	3750      	adds	r7, #80	; 0x50
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	1fe00fff 	.word	0x1fe00fff

0800b450 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b08d      	sub	sp, #52	; 0x34
 800b454:	af02      	add	r7, sp, #8
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800b45a:	2300      	movs	r3, #0
 800b45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2203      	movs	r2, #3
 800b464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d02e      	beq.n	800b4ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b476:	d106      	bne.n	800b486 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	635a      	str	r2, [r3, #52]	; 0x34
 800b484:	e029      	b.n	800b4da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b48c:	d10a      	bne.n	800b4a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fb64 	bl	800bb5c <SD_WideBus_Enable>
 800b494:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	431a      	orrs	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	635a      	str	r2, [r3, #52]	; 0x34
 800b4a2:	e01a      	b.n	800b4da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fba1 	bl	800bbf2 <SD_WideBus_Disable>
 800b4b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	635a      	str	r2, [r3, #52]	; 0x34
 800b4be:	e00c      	b.n	800b4da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	635a      	str	r2, [r3, #52]	; 0x34
 800b4cc:	e005      	b.n	800b4da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a5f      	ldr	r2, [pc, #380]	; (800b664 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4f0:	e096      	b.n	800b620 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800b4f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b4f6:	f04f 0100 	mov.w	r1, #0
 800b4fa:	f7fd fd27 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800b4fe:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 8083 	beq.w	800b60e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	695a      	ldr	r2, [r3, #20]
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	4950      	ldr	r1, [pc, #320]	; (800b668 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b526:	fba1 1303 	umull	r1, r3, r1, r3
 800b52a:	0e1b      	lsrs	r3, r3, #24
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d303      	bcc.n	800b538 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	e05a      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b53c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b540:	d103      	bne.n	800b54a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	61bb      	str	r3, [r7, #24]
 800b548:	e051      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b552:	d126      	bne.n	800b5a2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10e      	bne.n	800b57a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	4a43      	ldr	r2, [pc, #268]	; (800b66c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d906      	bls.n	800b572 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	4a40      	ldr	r2, [pc, #256]	; (800b668 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	0e5b      	lsrs	r3, r3, #25
 800b56e:	61bb      	str	r3, [r7, #24]
 800b570:	e03d      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	61bb      	str	r3, [r7, #24]
 800b578:	e039      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	fbb2 f3f3 	udiv	r3, r2, r3
 800b586:	4a39      	ldr	r2, [pc, #228]	; (800b66c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d906      	bls.n	800b59a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	4a36      	ldr	r2, [pc, #216]	; (800b668 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	0e5b      	lsrs	r3, r3, #25
 800b596:	61bb      	str	r3, [r7, #24]
 800b598:	e029      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	61bb      	str	r3, [r7, #24]
 800b5a0:	e025      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10e      	bne.n	800b5c8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	4a30      	ldr	r2, [pc, #192]	; (800b670 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d906      	bls.n	800b5c0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	4a2c      	ldr	r2, [pc, #176]	; (800b668 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ba:	0e1b      	lsrs	r3, r3, #24
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	e016      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	e012      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d4:	4a26      	ldr	r2, [pc, #152]	; (800b670 <HAL_SD_ConfigWideBusOperation+0x220>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d906      	bls.n	800b5e8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	4a22      	ldr	r2, [pc, #136]	; (800b668 <HAL_SD_ConfigWideBusOperation+0x218>)
 800b5de:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e2:	0e1b      	lsrs	r3, r3, #24
 800b5e4:	61bb      	str	r3, [r7, #24]
 800b5e6:	e002      	b.n	800b5ee <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681c      	ldr	r4, [r3, #0]
 800b5f2:	466a      	mov	r2, sp
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5fc:	e882 0003 	stmia.w	r2, {r0, r1}
 800b600:	f107 0308 	add.w	r3, r7, #8
 800b604:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b606:	4620      	mov	r0, r4
 800b608:	f002 f9e8 	bl	800d9dc <SDMMC_Init>
 800b60c:	e008      	b.n	800b620 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b628:	4618      	mov	r0, r3
 800b62a:	f002 faa3 	bl	800db74 <SDMMC_CmdBlockLength>
 800b62e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b630:	6a3b      	ldr	r3, [r7, #32]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00c      	beq.n	800b650 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a0a      	ldr	r2, [pc, #40]	; (800b664 <HAL_SD_ConfigWideBusOperation+0x214>)
 800b63c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	431a      	orrs	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	372c      	adds	r7, #44	; 0x2c
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}
 800b664:	1fe00fff 	.word	0x1fe00fff
 800b668:	55e63b89 	.word	0x55e63b89
 800b66c:	02faf080 	.word	0x02faf080
 800b670:	017d7840 	.word	0x017d7840

0800b674 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b680:	f107 030c 	add.w	r3, r7, #12
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fa40 	bl	800bb0c <SD_SendStatus>
 800b68c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d005      	beq.n	800b6a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	0a5b      	lsrs	r3, r3, #9
 800b6a4:	f003 030f 	and.w	r3, r3, #15
 800b6a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b6aa:	693b      	ldr	r3, [r7, #16]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b090      	sub	sp, #64	; 0x40
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800b6c0:	f7f7 fd0c 	bl	80030dc <HAL_GetTick>
 800b6c4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 f9ce 	bl	800da6c <SDMMC_GetPowerState>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b6d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b6da:	e0b5      	b.n	800b848 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d02e      	beq.n	800b742 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f002 fb4f 	bl	800dd8c <SDMMC_CmdSendCID>
 800b6ee:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <SD_InitCard+0x46>
    {
      return errorstate;
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	e0a6      	b.n	800b848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f002 f9f8 	bl	800daf6 <SDMMC_GetResponse>
 800b706:	4602      	mov	r2, r0
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2104      	movs	r1, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f002 f9ef 	bl	800daf6 <SDMMC_GetResponse>
 800b718:	4602      	mov	r2, r0
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2108      	movs	r1, #8
 800b724:	4618      	mov	r0, r3
 800b726:	f002 f9e6 	bl	800daf6 <SDMMC_GetResponse>
 800b72a:	4602      	mov	r2, r0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	210c      	movs	r1, #12
 800b736:	4618      	mov	r0, r3
 800b738:	f002 f9dd 	bl	800daf6 <SDMMC_GetResponse>
 800b73c:	4602      	mov	r2, r0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	2b03      	cmp	r3, #3
 800b748:	d01d      	beq.n	800b786 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800b74a:	e019      	b.n	800b780 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f107 020a 	add.w	r2, r7, #10
 800b754:	4611      	mov	r1, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f002 fb57 	bl	800de0a <SDMMC_CmdSetRelAdd>
 800b75c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <SD_InitCard+0xb4>
      {
        return errorstate;
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	e06f      	b.n	800b848 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800b768:	f7f7 fcb8 	bl	80030dc <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	f241 3287 	movw	r2, #4999	; 0x1387
 800b776:	4293      	cmp	r3, r2
 800b778:	d902      	bls.n	800b780 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800b77a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b77e:	e063      	b.n	800b848 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800b780:	897b      	ldrh	r3, [r7, #10]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0e2      	beq.n	800b74c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d036      	beq.n	800b7fc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b78e:	897b      	ldrh	r3, [r7, #10]
 800b790:	461a      	mov	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79e:	041b      	lsls	r3, r3, #16
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	f002 fb11 	bl	800ddca <SDMMC_CmdSendCSD>
 800b7a8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <SD_InitCard+0x100>
    {
      return errorstate;
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	e049      	b.n	800b848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f002 f99b 	bl	800daf6 <SDMMC_GetResponse>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2104      	movs	r1, #4
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f002 f992 	bl	800daf6 <SDMMC_GetResponse>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2108      	movs	r1, #8
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f002 f989 	bl	800daf6 <SDMMC_GetResponse>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	210c      	movs	r1, #12
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f002 f980 	bl	800daf6 <SDMMC_GetResponse>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2104      	movs	r1, #4
 800b802:	4618      	mov	r0, r3
 800b804:	f002 f977 	bl	800daf6 <SDMMC_GetResponse>
 800b808:	4603      	mov	r3, r0
 800b80a:	0d1a      	lsrs	r2, r3, #20
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b810:	f107 030c 	add.w	r3, r7, #12
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fbb8 	bl	800af8c <HAL_SD_GetCardCSD>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b822:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b826:	e00f      	b.n	800b848 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b830:	041b      	lsls	r3, r3, #16
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f002 f9c0 	bl	800dbba <SDMMC_CmdSelDesel>
 800b83a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <SD_InitCard+0x192>
  {
    return errorstate;
 800b842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b844:	e000      	b.n	800b848 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3740      	adds	r7, #64	; 0x40
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b858:	2300      	movs	r3, #0
 800b85a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b860:	2300      	movs	r3, #0
 800b862:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4618      	mov	r0, r3
 800b86a:	f002 f9c9 	bl	800dc00 <SDMMC_CmdGoIdleState>
 800b86e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	e072      	b.n	800b960 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	f002 f9dc 	bl	800dc3c <SDMMC_CmdOperCond>
 800b884:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b88c:	d10d      	bne.n	800b8aa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4618      	mov	r0, r3
 800b89a:	f002 f9b1 	bl	800dc00 <SDMMC_CmdGoIdleState>
 800b89e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <SD_PowerON+0x60>
    {
      return errorstate;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	e05a      	b.n	800b960 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d137      	bne.n	800b928 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f002 f9dc 	bl	800dc7c <SDMMC_CmdAppCommand>
 800b8c4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d02d      	beq.n	800b928 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8d0:	e046      	b.n	800b960 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f002 f9cf 	bl	800dc7c <SDMMC_CmdAppCommand>
 800b8de:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <SD_PowerON+0x9a>
    {
      return errorstate;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	e03a      	b.n	800b960 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	491e      	ldr	r1, [pc, #120]	; (800b968 <SD_PowerON+0x118>)
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f002 f9e6 	bl	800dcc2 <SDMMC_CmdAppOperCommand>
 800b8f6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b902:	e02d      	b.n	800b960 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2100      	movs	r1, #0
 800b90a:	4618      	mov	r0, r3
 800b90c:	f002 f8f3 	bl	800daf6 <SDMMC_GetResponse>
 800b910:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	0fdb      	lsrs	r3, r3, #31
 800b916:	2b01      	cmp	r3, #1
 800b918:	d101      	bne.n	800b91e <SD_PowerON+0xce>
 800b91a:	2301      	movs	r3, #1
 800b91c:	e000      	b.n	800b920 <SD_PowerON+0xd0>
 800b91e:	2300      	movs	r3, #0
 800b920:	613b      	str	r3, [r7, #16]

    count++;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	3301      	adds	r3, #1
 800b926:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b92e:	4293      	cmp	r3, r2
 800b930:	d802      	bhi.n	800b938 <SD_PowerON+0xe8>
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d0cc      	beq.n	800b8d2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b93e:	4293      	cmp	r3, r2
 800b940:	d902      	bls.n	800b948 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b946:	e00b      	b.n	800b960 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	c1100000 	.word	0xc1100000

0800b96c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b08c      	sub	sp, #48	; 0x30
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b976:	f7f7 fbb1 	bl	80030dc <HAL_GetTick>
 800b97a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2100      	movs	r1, #0
 800b986:	4618      	mov	r0, r3
 800b988:	f002 f8b5 	bl	800daf6 <SDMMC_GetResponse>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b996:	d102      	bne.n	800b99e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b99c:	e0b0      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2140      	movs	r1, #64	; 0x40
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f002 f8e5 	bl	800db74 <SDMMC_CmdBlockLength>
 800b9aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d005      	beq.n	800b9be <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b9ba:	6a3b      	ldr	r3, [r7, #32]
 800b9bc:	e0a0      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9c6:	041b      	lsls	r3, r3, #16
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	f002 f956 	bl	800dc7c <SDMMC_CmdAppCommand>
 800b9d0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d005      	beq.n	800b9e4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b9e0:	6a3b      	ldr	r3, [r7, #32]
 800b9e2:	e08d      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9e8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b9ea:	2340      	movs	r3, #64	; 0x40
 800b9ec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b9ee:	2360      	movs	r3, #96	; 0x60
 800b9f0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f107 0208 	add.w	r2, r7, #8
 800ba06:	4611      	mov	r1, r2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f002 f887 	bl	800db1c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f002 fa3e 	bl	800de94 <SDMMC_CmdStatusRegister>
 800ba18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d02b      	beq.n	800ba78 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ba28:	6a3b      	ldr	r3, [r7, #32]
 800ba2a:	e069      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d013      	beq.n	800ba62 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba3e:	e00d      	b.n	800ba5c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f001 fff3 	bl	800da30 <SDMMC_ReadFIFO>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	601a      	str	r2, [r3, #0]
        pData++;
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	3304      	adds	r3, #4
 800ba54:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	3301      	adds	r3, #1
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	2b07      	cmp	r3, #7
 800ba60:	d9ee      	bls.n	800ba40 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ba62:	f7f7 fb3b 	bl	80030dc <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba70:	d102      	bne.n	800ba78 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ba72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba76:	e043      	b.n	800bb00 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0d2      	beq.n	800ba2c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ba94:	2308      	movs	r3, #8
 800ba96:	e033      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba9e:	f003 0302 	and.w	r3, r3, #2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800baa6:	2302      	movs	r3, #2
 800baa8:	e02a      	b.n	800bb00 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab0:	f003 0320 	and.w	r3, r3, #32
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d017      	beq.n	800bae8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800bab8:	2320      	movs	r3, #32
 800baba:	e021      	b.n	800bb00 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f001 ffb5 	bl	800da30 <SDMMC_ReadFIFO>
 800bac6:	4602      	mov	r2, r0
 800bac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baca:	601a      	str	r2, [r3, #0]
    pData++;
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	3304      	adds	r3, #4
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bad2:	f7f7 fb03 	bl	80030dc <HAL_GetTick>
 800bad6:	4602      	mov	r2, r0
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bae0:	d102      	bne.n	800bae8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bae2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bae6:	e00b      	b.n	800bb00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1e2      	bne.n	800babc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a03      	ldr	r2, [pc, #12]	; (800bb08 <SD_SendSDStatus+0x19c>)
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3730      	adds	r7, #48	; 0x30
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	18000f3a 	.word	0x18000f3a

0800bb0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d102      	bne.n	800bb22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bb1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb20:	e018      	b.n	800bb54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f002 f98d 	bl	800de4e <SDMMC_CmdSendStatus>
 800bb34:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	e009      	b.n	800bb54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 ffd5 	bl	800daf6 <SDMMC_GetResponse>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bb52:	2300      	movs	r3, #0
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bb64:	2300      	movs	r3, #0
 800bb66:	60fb      	str	r3, [r7, #12]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2100      	movs	r1, #0
 800bb72:	4618      	mov	r0, r3
 800bb74:	f001 ffbf 	bl	800daf6 <SDMMC_GetResponse>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb82:	d102      	bne.n	800bb8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb88:	e02f      	b.n	800bbea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb8a:	f107 030c 	add.w	r3, r7, #12
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f879 	bl	800bc88 <SD_FindSCR>
 800bb96:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	e023      	b.n	800bbea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d01c      	beq.n	800bbe6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb4:	041b      	lsls	r3, r3, #16
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4610      	mov	r0, r2
 800bbba:	f002 f85f 	bl	800dc7c <SDMMC_CmdAppCommand>
 800bbbe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	e00f      	b.n	800bbea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2102      	movs	r1, #2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f002 f896 	bl	800dd02 <SDMMC_CmdBusWidth>
 800bbd6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	e003      	b.n	800bbea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e001      	b.n	800bbea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bbe6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b086      	sub	sp, #24
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2100      	movs	r1, #0
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f001 ff74 	bl	800daf6 <SDMMC_GetResponse>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc18:	d102      	bne.n	800bc20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bc1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc1e:	e02f      	b.n	800bc80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f82e 	bl	800bc88 <SD_FindSCR>
 800bc2c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	e023      	b.n	800bc80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d01c      	beq.n	800bc7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4a:	041b      	lsls	r3, r3, #16
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4610      	mov	r0, r2
 800bc50:	f002 f814 	bl	800dc7c <SDMMC_CmdAppCommand>
 800bc54:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	e00f      	b.n	800bc80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f002 f84b 	bl	800dd02 <SDMMC_CmdBusWidth>
 800bc6c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	e003      	b.n	800bc80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e001      	b.n	800bc80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3718      	adds	r7, #24
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08e      	sub	sp, #56	; 0x38
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc92:	f7f7 fa23 	bl	80030dc <HAL_GetTick>
 800bc96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60bb      	str	r3, [r7, #8]
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2108      	movs	r1, #8
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 ff60 	bl	800db74 <SDMMC_CmdBlockLength>
 800bcb4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	e0ad      	b.n	800be1c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcc8:	041b      	lsls	r3, r3, #16
 800bcca:	4619      	mov	r1, r3
 800bccc:	4610      	mov	r0, r2
 800bcce:	f001 ffd5 	bl	800dc7c <SDMMC_CmdAppCommand>
 800bcd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <SD_FindSCR+0x56>
  {
    return errorstate;
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcdc:	e09e      	b.n	800be1c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bcde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bce2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bce4:	2308      	movs	r3, #8
 800bce6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800bce8:	2330      	movs	r3, #48	; 0x30
 800bcea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800bcec:	2302      	movs	r3, #2
 800bcee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f107 0210 	add.w	r2, r7, #16
 800bd00:	4611      	mov	r1, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	f001 ff0a 	bl	800db1c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f002 f81b 	bl	800dd48 <SDMMC_CmdSendSCR>
 800bd12:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d027      	beq.n	800bd6a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	e07e      	b.n	800be1c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d113      	bne.n	800bd54 <SD_FindSCR+0xcc>
 800bd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d110      	bne.n	800bd54 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f001 fe7a 	bl	800da30 <SDMMC_ReadFIFO>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 fe73 	bl	800da30 <SDMMC_ReadFIFO>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	60fb      	str	r3, [r7, #12]
      index++;
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd50:	3301      	adds	r3, #1
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bd54:	f7f7 f9c2 	bl	80030dc <HAL_GetTick>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd62:	d102      	bne.n	800bd6a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bd64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd68:	e058      	b.n	800be1c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd70:	f240 532a 	movw	r3, #1322	; 0x52a
 800bd74:	4013      	ands	r3, r2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0d1      	beq.n	800bd1e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd80:	f003 0308 	and.w	r3, r3, #8
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d005      	beq.n	800bd94 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2208      	movs	r2, #8
 800bd8e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bd90:	2308      	movs	r3, #8
 800bd92:	e043      	b.n	800be1c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd9a:	f003 0302 	and.w	r3, r3, #2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d005      	beq.n	800bdae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2202      	movs	r2, #2
 800bda8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e036      	b.n	800be1c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb4:	f003 0320 	and.w	r3, r3, #32
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2220      	movs	r2, #32
 800bdc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bdc4:	2320      	movs	r3, #32
 800bdc6:	e029      	b.n	800be1c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a15      	ldr	r2, [pc, #84]	; (800be24 <SD_FindSCR+0x19c>)
 800bdce:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	061a      	lsls	r2, r3, #24
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bddc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	0a1b      	lsrs	r3, r3, #8
 800bde2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bde6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	0e1b      	lsrs	r3, r3, #24
 800bdec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	601a      	str	r2, [r3, #0]
    scr++;
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	061a      	lsls	r2, r3, #24
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	021b      	lsls	r3, r3, #8
 800be00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	0a1b      	lsrs	r3, r3, #8
 800be0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800be0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	0e1b      	lsrs	r3, r3, #24
 800be14:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3738      	adds	r7, #56	; 0x38
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	18000f3a 	.word	0x18000f3a

0800be28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e0fb      	b.n	800c032 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a7f      	ldr	r2, [pc, #508]	; (800c03c <HAL_SPI_Init+0x214>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d004      	beq.n	800be4e <HAL_SPI_Init+0x26>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a7d      	ldr	r2, [pc, #500]	; (800c040 <HAL_SPI_Init+0x218>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	e000      	b.n	800be50 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800be4e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a78      	ldr	r2, [pc, #480]	; (800c03c <HAL_SPI_Init+0x214>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d004      	beq.n	800be6a <HAL_SPI_Init+0x42>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a76      	ldr	r2, [pc, #472]	; (800c040 <HAL_SPI_Init+0x218>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d105      	bne.n	800be76 <HAL_SPI_Init+0x4e>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	2b0f      	cmp	r3, #15
 800be70:	d901      	bls.n	800be76 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e0dd      	b.n	800c032 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fbac 	bl	800c5d4 <SPI_GetPacketSize>
 800be7c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a6e      	ldr	r2, [pc, #440]	; (800c03c <HAL_SPI_Init+0x214>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d004      	beq.n	800be92 <HAL_SPI_Init+0x6a>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a6c      	ldr	r2, [pc, #432]	; (800c040 <HAL_SPI_Init+0x218>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d102      	bne.n	800be98 <HAL_SPI_Init+0x70>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b08      	cmp	r3, #8
 800be96:	d816      	bhi.n	800bec6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be9c:	4a69      	ldr	r2, [pc, #420]	; (800c044 <HAL_SPI_Init+0x21c>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00e      	beq.n	800bec0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a68      	ldr	r2, [pc, #416]	; (800c048 <HAL_SPI_Init+0x220>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d009      	beq.n	800bec0 <HAL_SPI_Init+0x98>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a66      	ldr	r2, [pc, #408]	; (800c04c <HAL_SPI_Init+0x224>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d004      	beq.n	800bec0 <HAL_SPI_Init+0x98>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a65      	ldr	r2, [pc, #404]	; (800c050 <HAL_SPI_Init+0x228>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d104      	bne.n	800beca <HAL_SPI_Init+0xa2>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d901      	bls.n	800beca <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e0b3      	b.n	800c032 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7f6 fa06 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f022 0201 	bic.w	r2, r2, #1
 800befa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bf06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf10:	d119      	bne.n	800bf46 <HAL_SPI_Init+0x11e>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf1a:	d103      	bne.n	800bf24 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d008      	beq.n	800bf36 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d10c      	bne.n	800bf46 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bf30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf34:	d107      	bne.n	800bf46 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00f      	beq.n	800bf72 <HAL_SPI_Init+0x14a>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	2b06      	cmp	r3, #6
 800bf58:	d90b      	bls.n	800bf72 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	e007      	b.n	800bf82 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69da      	ldr	r2, [r3, #28]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	431a      	orrs	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf94:	ea42 0103 	orr.w	r1, r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	431a      	orrs	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	431a      	orrs	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	431a      	orrs	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	431a      	orrs	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd6:	431a      	orrs	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe8:	431a      	orrs	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfee:	ea42 0103 	orr.w	r1, r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	430a      	orrs	r2, r1
 800bffc:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	430a      	orrs	r2, r1
 800c01e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	46002000 	.word	0x46002000
 800c040:	56002000 	.word	0x56002000
 800c044:	40013000 	.word	0x40013000
 800c048:	50013000 	.word	0x50013000
 800c04c:	40003800 	.word	0x40003800
 800c050:	50003800 	.word	0x50003800

0800c054 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08a      	sub	sp, #40	; 0x28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c06c:	6a3a      	ldr	r2, [r7, #32]
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	4013      	ands	r3, r2
 800c072:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c07c:	2300      	movs	r3, #0
 800c07e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c086:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3330      	adds	r3, #48	; 0x30
 800c08e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c096:	2b00      	cmp	r3, #0
 800c098:	d010      	beq.n	800c0bc <HAL_SPI_IRQHandler+0x68>
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	f003 0308 	and.w	r3, r3, #8
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	699a      	ldr	r2, [r3, #24]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0b2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 f9c9 	bl	800c44c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c0ba:	e19a      	b.n	800c3f2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d113      	bne.n	800c0ee <HAL_SPI_IRQHandler+0x9a>
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10e      	bne.n	800c0ee <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	4798      	blx	r3
    handled = 1UL;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10f      	bne.n	800c118 <HAL_SPI_IRQHandler+0xc4>
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d105      	bne.n	800c118 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	4798      	blx	r3
    handled = 1UL;
 800c114:	2301      	movs	r3, #1
 800c116:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	f003 0320 	and.w	r3, r3, #32
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10f      	bne.n	800c142 <HAL_SPI_IRQHandler+0xee>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c132:	2b00      	cmp	r3, #0
 800c134:	d105      	bne.n	800c142 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
    handled = 1UL;
 800c13e:	2301      	movs	r3, #1
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 800c142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 814f 	bne.w	800c3e8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f003 0308 	and.w	r3, r3, #8
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 808b 	beq.w	800c26c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f042 0208 	orr.w	r2, r2, #8
 800c164:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	699a      	ldr	r2, [r3, #24]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f042 0210 	orr.w	r2, r2, #16
 800c174:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	699a      	ldr	r2, [r3, #24]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c184:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	691a      	ldr	r2, [r3, #16]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f022 0208 	bic.w	r2, r2, #8
 800c194:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d13d      	bne.n	800c220 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c1a4:	e036      	b.n	800c214 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	2b0f      	cmp	r3, #15
 800c1ac:	d90b      	bls.n	800c1c6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c1b8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1be:	1d1a      	adds	r2, r3, #4
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c1c4:	e01d      	b.n	800c202 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	2b07      	cmp	r3, #7
 800c1cc:	d90b      	bls.n	800c1e6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	8812      	ldrh	r2, [r2, #0]
 800c1d6:	b292      	uxth	r2, r2
 800c1d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1de:	1c9a      	adds	r2, r3, #2
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	66da      	str	r2, [r3, #108]	; 0x6c
 800c1e4:	e00d      	b.n	800c202 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f2:	7812      	ldrb	r2, [r2, #0]
 800c1f4:	b2d2      	uxtb	r2, r2
 800c1f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1fc:	1c5a      	adds	r2, r3, #1
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c208:	b29b      	uxth	r3, r3
 800c20a:	3b01      	subs	r3, #1
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1c2      	bne.n	800c1a6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f937 	bl	800c494 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 f8fd 	bl	800c438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c23e:	e0d8      	b.n	800c3f2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c240:	7cfb      	ldrb	r3, [r7, #19]
 800c242:	2b05      	cmp	r3, #5
 800c244:	d103      	bne.n	800c24e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f8ec 	bl	800c424 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c24c:	e0ce      	b.n	800c3ec <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c24e:	7cfb      	ldrb	r3, [r7, #19]
 800c250:	2b04      	cmp	r3, #4
 800c252:	d103      	bne.n	800c25c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f8db 	bl	800c410 <HAL_SPI_RxCpltCallback>
    return;
 800c25a:	e0c7      	b.n	800c3ec <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c25c:	7cfb      	ldrb	r3, [r7, #19]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	f040 80c4 	bne.w	800c3ec <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f8c9 	bl	800c3fc <HAL_SPI_TxCpltCallback>
    return;
 800c26a:	e0bf      	b.n	800c3ec <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 80bd 	beq.w	800c3f2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c288:	f043 0204 	orr.w	r2, r3, #4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	699a      	ldr	r2, [r3, #24]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00f      	beq.n	800c2cc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2b2:	f043 0201 	orr.w	r2, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	699a      	ldr	r2, [r3, #24]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00f      	beq.n	800c2f6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2dc:	f043 0208 	orr.w	r2, r3, #8
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	699a      	ldr	r2, [r3, #24]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f003 0320 	and.w	r3, r3, #32
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00f      	beq.n	800c320 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c306:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f042 0220 	orr.w	r2, r2, #32
 800c31e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d062      	beq.n	800c3f0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0201 	bic.w	r2, r2, #1
 800c338:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	6812      	ldr	r2, [r2, #0]
 800c344:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 800c348:	f023 0303 	bic.w	r3, r3, #3
 800c34c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c354:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c358:	d13e      	bne.n	800c3d8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	689a      	ldr	r2, [r3, #8]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c368:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c370:	2b00      	cmp	r3, #0
 800c372:	d015      	beq.n	800c3a0 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c37a:	4a1f      	ldr	r2, [pc, #124]	; (800c3f8 <HAL_SPI_IRQHandler+0x3a4>)
 800c37c:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c384:	4618      	mov	r0, r3
 800c386:	f7f7 fecb 	bl	8004120 <HAL_DMA_Abort_IT>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d022      	beq.n	800c3f0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b0:	4a11      	ldr	r2, [pc, #68]	; (800c3f8 <HAL_SPI_IRQHandler+0x3a4>)
 800c3b2:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f7 feb0 	bl	8004120 <HAL_DMA_Abort_IT>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d014      	beq.n	800c3f0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c3d6:	e00b      	b.n	800c3f0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        HAL_SPI_ErrorCallback(hspi);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f829 	bl	800c438 <HAL_SPI_ErrorCallback>
    return;
 800c3e6:	e003      	b.n	800c3f0 <HAL_SPI_IRQHandler+0x39c>
    return;
 800c3e8:	bf00      	nop
 800c3ea:	e002      	b.n	800c3f2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800c3ec:	bf00      	nop
 800c3ee:	e000      	b.n	800c3f2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800c3f0:	bf00      	nop
  }
}
 800c3f2:	3728      	adds	r7, #40	; 0x28
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	0800c461 	.word	0x0800c461

0800c3fc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c404:	bf00      	nop
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c46c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff ffd6 	bl	800c438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c48c:	bf00      	nop
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f042 0208 	orr.w	r2, r2, #8
 800c4b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	699a      	ldr	r2, [r3, #24]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0210 	orr.w	r2, r2, #16
 800c4c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0201 	bic.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	6812      	ldr	r2, [r2, #0]
 800c4de:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	689a      	ldr	r2, [r3, #8]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c4f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b04      	cmp	r3, #4
 800c502:	d014      	beq.n	800c52e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f003 0320 	and.w	r3, r3, #32
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00f      	beq.n	800c52e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c514:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	699a      	ldr	r2, [r3, #24]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f042 0220 	orr.w	r2, r2, #32
 800c52c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b03      	cmp	r3, #3
 800c538:	d014      	beq.n	800c564 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00f      	beq.n	800c564 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54a:	f043 0204 	orr.w	r2, r3, #4
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	699a      	ldr	r2, [r3, #24]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c562:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00f      	beq.n	800c58e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c574:	f043 0201 	orr.w	r2, r3, #1
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	699a      	ldr	r2, [r3, #24]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c58c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00f      	beq.n	800c5b8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c59e:	f043 0208 	orr.w	r2, r3, #8
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	699a      	ldr	r2, [r3, #24]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800c5c8:	bf00      	nop
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e0:	095b      	lsrs	r3, r3, #5
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	08db      	lsrs	r3, r3, #3
 800c5f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d12e      	bne.n	800c67e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c626:	2b01      	cmp	r3, #1
 800c628:	d101      	bne.n	800c62e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c62a:	2302      	movs	r3, #2
 800c62c:	e028      	b.n	800c680 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2202      	movs	r2, #2
 800c63a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0201 	bic.w	r2, r2, #1
 800c64c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c65a:	ea42 0103 	orr.w	r1, r2, r3
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	689a      	ldr	r2, [r3, #8]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	430a      	orrs	r2, r1
 800c668:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	e000      	b.n	800c680 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
  }
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e049      	b.n	800c732 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7f6 f866 	bl	8002784 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	f000 f8d2 	bl	800c874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b086      	sub	sp, #24
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c750:	2b01      	cmp	r3, #1
 800c752:	d101      	bne.n	800c758 <HAL_TIM_IC_ConfigChannel+0x1e>
 800c754:	2302      	movs	r3, #2
 800c756:	e088      	b.n	800c86a <HAL_TIM_IC_ConfigChannel+0x130>
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d11b      	bne.n	800c79e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6818      	ldr	r0, [r3, #0]
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	685a      	ldr	r2, [r3, #4]
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	f000 f977 	bl	800ca68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	699a      	ldr	r2, [r3, #24]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f022 020c 	bic.w	r2, r2, #12
 800c788:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6999      	ldr	r1, [r3, #24]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	619a      	str	r2, [r3, #24]
 800c79c:	e060      	b.n	800c860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	d11c      	bne.n	800c7de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	6819      	ldr	r1, [r3, #0]
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f000 f9ee 	bl	800cb94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	699a      	ldr	r2, [r3, #24]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c7c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6999      	ldr	r1, [r3, #24]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	021a      	lsls	r2, r3, #8
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	619a      	str	r2, [r3, #24]
 800c7dc:	e040      	b.n	800c860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b08      	cmp	r3, #8
 800c7e2:	d11b      	bne.n	800c81c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6818      	ldr	r0, [r3, #0]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	6819      	ldr	r1, [r3, #0]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f000 fa0b 	bl	800cc0e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	69da      	ldr	r2, [r3, #28]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 020c 	bic.w	r2, r2, #12
 800c806:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69d9      	ldr	r1, [r3, #28]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	61da      	str	r2, [r3, #28]
 800c81a:	e021      	b.n	800c860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b0c      	cmp	r3, #12
 800c820:	d11c      	bne.n	800c85c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6818      	ldr	r0, [r3, #0]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	685a      	ldr	r2, [r3, #4]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f000 fa28 	bl	800cc86 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	69da      	ldr	r2, [r3, #28]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c844:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69d9      	ldr	r1, [r3, #28]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	021a      	lsls	r2, r3, #8
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	61da      	str	r2, [r3, #28]
 800c85a:	e001      	b.n	800c860 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c868:	7dfb      	ldrb	r3, [r7, #23]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3718      	adds	r7, #24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a68      	ldr	r2, [pc, #416]	; (800ca28 <TIM_Base_SetConfig+0x1b4>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d02b      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a67      	ldr	r2, [pc, #412]	; (800ca2c <TIM_Base_SetConfig+0x1b8>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d027      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c89a:	d023      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c8a2:	d01f      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a62      	ldr	r2, [pc, #392]	; (800ca30 <TIM_Base_SetConfig+0x1bc>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d01b      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a61      	ldr	r2, [pc, #388]	; (800ca34 <TIM_Base_SetConfig+0x1c0>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d017      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a60      	ldr	r2, [pc, #384]	; (800ca38 <TIM_Base_SetConfig+0x1c4>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d013      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a5f      	ldr	r2, [pc, #380]	; (800ca3c <TIM_Base_SetConfig+0x1c8>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00f      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a5e      	ldr	r2, [pc, #376]	; (800ca40 <TIM_Base_SetConfig+0x1cc>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d00b      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a5d      	ldr	r2, [pc, #372]	; (800ca44 <TIM_Base_SetConfig+0x1d0>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d007      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4a5c      	ldr	r2, [pc, #368]	; (800ca48 <TIM_Base_SetConfig+0x1d4>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d003      	beq.n	800c8e4 <TIM_Base_SetConfig+0x70>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a5b      	ldr	r2, [pc, #364]	; (800ca4c <TIM_Base_SetConfig+0x1d8>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d108      	bne.n	800c8f6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4a4b      	ldr	r2, [pc, #300]	; (800ca28 <TIM_Base_SetConfig+0x1b4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d043      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a4a      	ldr	r2, [pc, #296]	; (800ca2c <TIM_Base_SetConfig+0x1b8>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d03f      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c90c:	d03b      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c914:	d037      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a45      	ldr	r2, [pc, #276]	; (800ca30 <TIM_Base_SetConfig+0x1bc>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d033      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a44      	ldr	r2, [pc, #272]	; (800ca34 <TIM_Base_SetConfig+0x1c0>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d02f      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a43      	ldr	r2, [pc, #268]	; (800ca38 <TIM_Base_SetConfig+0x1c4>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d02b      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a42      	ldr	r2, [pc, #264]	; (800ca3c <TIM_Base_SetConfig+0x1c8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d027      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a41      	ldr	r2, [pc, #260]	; (800ca40 <TIM_Base_SetConfig+0x1cc>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d023      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a40      	ldr	r2, [pc, #256]	; (800ca44 <TIM_Base_SetConfig+0x1d0>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d01f      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a3f      	ldr	r2, [pc, #252]	; (800ca48 <TIM_Base_SetConfig+0x1d4>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d01b      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	4a3e      	ldr	r2, [pc, #248]	; (800ca4c <TIM_Base_SetConfig+0x1d8>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d017      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a3d      	ldr	r2, [pc, #244]	; (800ca50 <TIM_Base_SetConfig+0x1dc>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d013      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a3c      	ldr	r2, [pc, #240]	; (800ca54 <TIM_Base_SetConfig+0x1e0>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d00f      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a3b      	ldr	r2, [pc, #236]	; (800ca58 <TIM_Base_SetConfig+0x1e4>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d00b      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a3a      	ldr	r2, [pc, #232]	; (800ca5c <TIM_Base_SetConfig+0x1e8>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d007      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a39      	ldr	r2, [pc, #228]	; (800ca60 <TIM_Base_SetConfig+0x1ec>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d003      	beq.n	800c986 <TIM_Base_SetConfig+0x112>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a38      	ldr	r2, [pc, #224]	; (800ca64 <TIM_Base_SetConfig+0x1f0>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d108      	bne.n	800c998 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c98c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	4313      	orrs	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	695b      	ldr	r3, [r3, #20]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a1a      	ldr	r2, [pc, #104]	; (800ca28 <TIM_Base_SetConfig+0x1b4>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d023      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a19      	ldr	r2, [pc, #100]	; (800ca2c <TIM_Base_SetConfig+0x1b8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d01f      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ca48 <TIM_Base_SetConfig+0x1d4>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d01b      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ca4c <TIM_Base_SetConfig+0x1d8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d017      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a1c      	ldr	r2, [pc, #112]	; (800ca50 <TIM_Base_SetConfig+0x1dc>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d013      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a1b      	ldr	r2, [pc, #108]	; (800ca54 <TIM_Base_SetConfig+0x1e0>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d00f      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a1a      	ldr	r2, [pc, #104]	; (800ca58 <TIM_Base_SetConfig+0x1e4>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00b      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a19      	ldr	r2, [pc, #100]	; (800ca5c <TIM_Base_SetConfig+0x1e8>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d007      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a18      	ldr	r2, [pc, #96]	; (800ca60 <TIM_Base_SetConfig+0x1ec>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d003      	beq.n	800ca0c <TIM_Base_SetConfig+0x198>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a17      	ldr	r2, [pc, #92]	; (800ca64 <TIM_Base_SetConfig+0x1f0>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d103      	bne.n	800ca14 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	691a      	ldr	r2, [r3, #16]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	615a      	str	r2, [r3, #20]
}
 800ca1a:	bf00      	nop
 800ca1c:	3714      	adds	r7, #20
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	40012c00 	.word	0x40012c00
 800ca2c:	50012c00 	.word	0x50012c00
 800ca30:	40000400 	.word	0x40000400
 800ca34:	50000400 	.word	0x50000400
 800ca38:	40000800 	.word	0x40000800
 800ca3c:	50000800 	.word	0x50000800
 800ca40:	40000c00 	.word	0x40000c00
 800ca44:	50000c00 	.word	0x50000c00
 800ca48:	40013400 	.word	0x40013400
 800ca4c:	50013400 	.word	0x50013400
 800ca50:	40014000 	.word	0x40014000
 800ca54:	50014000 	.word	0x50014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	50014400 	.word	0x50014400
 800ca60:	40014800 	.word	0x40014800
 800ca64:	50014800 	.word	0x50014800

0800ca68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6a1b      	ldr	r3, [r3, #32]
 800ca80:	f023 0201 	bic.w	r2, r3, #1
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	4a34      	ldr	r2, [pc, #208]	; (800cb64 <TIM_TI1_SetConfig+0xfc>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d033      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	4a33      	ldr	r2, [pc, #204]	; (800cb68 <TIM_TI1_SetConfig+0x100>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d02f      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caa4:	d02b      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caac:	d027      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	4a2e      	ldr	r2, [pc, #184]	; (800cb6c <TIM_TI1_SetConfig+0x104>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d023      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	4a2d      	ldr	r2, [pc, #180]	; (800cb70 <TIM_TI1_SetConfig+0x108>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d01f      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	4a2c      	ldr	r2, [pc, #176]	; (800cb74 <TIM_TI1_SetConfig+0x10c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d01b      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	4a2b      	ldr	r2, [pc, #172]	; (800cb78 <TIM_TI1_SetConfig+0x110>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d017      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	4a2a      	ldr	r2, [pc, #168]	; (800cb7c <TIM_TI1_SetConfig+0x114>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d013      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4a29      	ldr	r2, [pc, #164]	; (800cb80 <TIM_TI1_SetConfig+0x118>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d00f      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4a28      	ldr	r2, [pc, #160]	; (800cb84 <TIM_TI1_SetConfig+0x11c>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d00b      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	4a27      	ldr	r2, [pc, #156]	; (800cb88 <TIM_TI1_SetConfig+0x120>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d007      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4a26      	ldr	r2, [pc, #152]	; (800cb8c <TIM_TI1_SetConfig+0x124>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d003      	beq.n	800cafe <TIM_TI1_SetConfig+0x96>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	4a25      	ldr	r2, [pc, #148]	; (800cb90 <TIM_TI1_SetConfig+0x128>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d101      	bne.n	800cb02 <TIM_TI1_SetConfig+0x9a>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e000      	b.n	800cb04 <TIM_TI1_SetConfig+0x9c>
 800cb02:	2300      	movs	r3, #0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d008      	beq.n	800cb1a <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	e003      	b.n	800cb22 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f043 0301 	orr.w	r3, r3, #1
 800cb20:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f023 030a 	bic.w	r3, r3, #10
 800cb3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f003 030a 	and.w	r3, r3, #10
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	621a      	str	r2, [r3, #32]
}
 800cb56:	bf00      	nop
 800cb58:	371c      	adds	r7, #28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	40012c00 	.word	0x40012c00
 800cb68:	50012c00 	.word	0x50012c00
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	50000400 	.word	0x50000400
 800cb74:	40000800 	.word	0x40000800
 800cb78:	50000800 	.word	0x50000800
 800cb7c:	40000c00 	.word	0x40000c00
 800cb80:	50000c00 	.word	0x50000c00
 800cb84:	40013400 	.word	0x40013400
 800cb88:	50013400 	.word	0x50013400
 800cb8c:	40014000 	.word	0x40014000
 800cb90:	50014000 	.word	0x50014000

0800cb94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	f023 0210 	bic.w	r2, r3, #16
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	021b      	lsls	r3, r3, #8
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	031b      	lsls	r3, r3, #12
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cbe6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	621a      	str	r2, [r3, #32]
}
 800cc02:	bf00      	nop
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b087      	sub	sp, #28
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
 800cc1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800cc5e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	021b      	lsls	r3, r3, #8
 800cc64:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800cc68:	697a      	ldr	r2, [r7, #20]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	693a      	ldr	r2, [r7, #16]
 800cc72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	621a      	str	r2, [r3, #32]
}
 800cc7a:	bf00      	nop
 800cc7c:	371c      	adds	r7, #28
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b087      	sub	sp, #28
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	60f8      	str	r0, [r7, #12]
 800cc8e:	60b9      	str	r1, [r7, #8]
 800cc90:	607a      	str	r2, [r7, #4]
 800cc92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ccc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	031b      	lsls	r3, r3, #12
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ccd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	031b      	lsls	r3, r3, #12
 800ccde:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	621a      	str	r2, [r3, #32]
}
 800ccf4:	bf00      	nop
 800ccf6:	371c      	adds	r7, #28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d101      	bne.n	800cd18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd14:	2302      	movs	r3, #2
 800cd16:	e097      	b.n	800ce48 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2202      	movs	r2, #2
 800cd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a45      	ldr	r2, [pc, #276]	; (800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d00e      	beq.n	800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a44      	ldr	r2, [pc, #272]	; (800ce58 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d009      	beq.n	800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a42      	ldr	r2, [pc, #264]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d004      	beq.n	800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a41      	ldr	r2, [pc, #260]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d108      	bne.n	800cd72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cd78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68fa      	ldr	r2, [r7, #12]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a2f      	ldr	r2, [pc, #188]	; (800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d040      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a2e      	ldr	r2, [pc, #184]	; (800ce58 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d03b      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdac:	d036      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdb6:	d031      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a29      	ldr	r2, [pc, #164]	; (800ce64 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d02c      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a28      	ldr	r2, [pc, #160]	; (800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d027      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a26      	ldr	r2, [pc, #152]	; (800ce6c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d022      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a25      	ldr	r2, [pc, #148]	; (800ce70 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d01d      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a23      	ldr	r2, [pc, #140]	; (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d018      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a22      	ldr	r2, [pc, #136]	; (800ce78 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d013      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a18      	ldr	r2, [pc, #96]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d00e      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a17      	ldr	r2, [pc, #92]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d009      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a1b      	ldr	r2, [pc, #108]	; (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d004      	beq.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a1a      	ldr	r2, [pc, #104]	; (800ce80 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d10c      	bne.n	800ce36 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	40012c00 	.word	0x40012c00
 800ce58:	50012c00 	.word	0x50012c00
 800ce5c:	40013400 	.word	0x40013400
 800ce60:	50013400 	.word	0x50013400
 800ce64:	40000400 	.word	0x40000400
 800ce68:	50000400 	.word	0x50000400
 800ce6c:	40000800 	.word	0x40000800
 800ce70:	50000800 	.word	0x50000800
 800ce74:	40000c00 	.word	0x40000c00
 800ce78:	50000c00 	.word	0x50000c00
 800ce7c:	40014000 	.word	0x40014000
 800ce80:	50014000 	.word	0x50014000

0800ce84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e042      	b.n	800cf1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d106      	bne.n	800ceae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7f5 fcb5 	bl	8002818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2224      	movs	r2, #36	; 0x24
 800ceb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f022 0201 	bic.w	r2, r2, #1
 800cec4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f8ca 	bl	800d060 <UART_SetConfig>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d101      	bne.n	800ced6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e022      	b.n	800cf1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 fa60 	bl	800d3a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	685a      	ldr	r2, [r3, #4]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cef2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689a      	ldr	r2, [r3, #8]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f042 0201 	orr.w	r2, r2, #1
 800cf12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fae7 	bl	800d4e8 <UART_CheckIdleState>
 800cf1a:	4603      	mov	r3, r0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08a      	sub	sp, #40	; 0x28
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	4613      	mov	r3, r2
 800cf32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf3a:	2b20      	cmp	r3, #32
 800cf3c:	f040 808b 	bne.w	800d056 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <HAL_UART_Transmit+0x28>
 800cf46:	88fb      	ldrh	r3, [r7, #6]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e083      	b.n	800d058 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf5a:	2b80      	cmp	r3, #128	; 0x80
 800cf5c:	d107      	bne.n	800cf6e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	689a      	ldr	r2, [r3, #8]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cf6c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2221      	movs	r2, #33	; 0x21
 800cf7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf7e:	f7f6 f8ad 	bl	80030dc <HAL_GetTick>
 800cf82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	88fa      	ldrh	r2, [r7, #6]
 800cf88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	88fa      	ldrh	r2, [r7, #6]
 800cf90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf9c:	d108      	bne.n	800cfb0 <HAL_UART_Transmit+0x8c>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d104      	bne.n	800cfb0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	61bb      	str	r3, [r7, #24]
 800cfae:	e003      	b.n	800cfb8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cfb8:	e030      	b.n	800d01c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2180      	movs	r1, #128	; 0x80
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 fb39 	bl	800d63c <UART_WaitOnFlagUntilTimeout>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2220      	movs	r2, #32
 800cfd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	e03d      	b.n	800d058 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10b      	bne.n	800cffa <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	3302      	adds	r3, #2
 800cff6:	61bb      	str	r3, [r7, #24]
 800cff8:	e007      	b.n	800d00a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	781a      	ldrb	r2, [r3, #0]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	3301      	adds	r3, #1
 800d008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d010:	b29b      	uxth	r3, r3
 800d012:	3b01      	subs	r3, #1
 800d014:	b29a      	uxth	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d022:	b29b      	uxth	r3, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1c8      	bne.n	800cfba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2200      	movs	r2, #0
 800d030:	2140      	movs	r1, #64	; 0x40
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f000 fb02 	bl	800d63c <UART_WaitOnFlagUntilTimeout>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d005      	beq.n	800d04a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2220      	movs	r2, #32
 800d042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e006      	b.n	800d058 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2220      	movs	r2, #32
 800d04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	e000      	b.n	800d058 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d056:	2302      	movs	r3, #2
  }
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3720      	adds	r7, #32
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d064:	b094      	sub	sp, #80	; 0x50
 800d066:	af00      	add	r7, sp, #0
 800d068:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	4b7e      	ldr	r3, [pc, #504]	; (800d270 <UART_SetConfig+0x210>)
 800d076:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	689a      	ldr	r2, [r3, #8]
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	431a      	orrs	r2, r3
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	695b      	ldr	r3, [r3, #20]
 800d086:	431a      	orrs	r2, r3
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	69db      	ldr	r3, [r3, #28]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4977      	ldr	r1, [pc, #476]	; (800d274 <UART_SetConfig+0x214>)
 800d098:	4019      	ands	r1, r3
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	68d9      	ldr	r1, [r3, #12]
 800d0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	ea40 0301 	orr.w	r3, r0, r1
 800d0ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	4b6a      	ldr	r3, [pc, #424]	; (800d270 <UART_SetConfig+0x210>)
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d009      	beq.n	800d0e0 <UART_SetConfig+0x80>
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	4b69      	ldr	r3, [pc, #420]	; (800d278 <UART_SetConfig+0x218>)
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d004      	beq.n	800d0e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	6a1a      	ldr	r2, [r3, #32]
 800d0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d0ea:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0f4:	430b      	orrs	r3, r1
 800d0f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fe:	f023 000f 	bic.w	r0, r3, #15
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	ea40 0301 	orr.w	r3, r0, r1
 800d10e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	4b59      	ldr	r3, [pc, #356]	; (800d27c <UART_SetConfig+0x21c>)
 800d116:	429a      	cmp	r2, r3
 800d118:	d102      	bne.n	800d120 <UART_SetConfig+0xc0>
 800d11a:	2301      	movs	r3, #1
 800d11c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d11e:	e029      	b.n	800d174 <UART_SetConfig+0x114>
 800d120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	4b56      	ldr	r3, [pc, #344]	; (800d280 <UART_SetConfig+0x220>)
 800d126:	429a      	cmp	r2, r3
 800d128:	d102      	bne.n	800d130 <UART_SetConfig+0xd0>
 800d12a:	2302      	movs	r3, #2
 800d12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d12e:	e021      	b.n	800d174 <UART_SetConfig+0x114>
 800d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	4b53      	ldr	r3, [pc, #332]	; (800d284 <UART_SetConfig+0x224>)
 800d136:	429a      	cmp	r2, r3
 800d138:	d102      	bne.n	800d140 <UART_SetConfig+0xe0>
 800d13a:	2304      	movs	r3, #4
 800d13c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d13e:	e019      	b.n	800d174 <UART_SetConfig+0x114>
 800d140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b50      	ldr	r3, [pc, #320]	; (800d288 <UART_SetConfig+0x228>)
 800d146:	429a      	cmp	r2, r3
 800d148:	d102      	bne.n	800d150 <UART_SetConfig+0xf0>
 800d14a:	2308      	movs	r3, #8
 800d14c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d14e:	e011      	b.n	800d174 <UART_SetConfig+0x114>
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	4b4d      	ldr	r3, [pc, #308]	; (800d28c <UART_SetConfig+0x22c>)
 800d156:	429a      	cmp	r2, r3
 800d158:	d102      	bne.n	800d160 <UART_SetConfig+0x100>
 800d15a:	2310      	movs	r3, #16
 800d15c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d15e:	e009      	b.n	800d174 <UART_SetConfig+0x114>
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	4b42      	ldr	r3, [pc, #264]	; (800d270 <UART_SetConfig+0x210>)
 800d166:	429a      	cmp	r2, r3
 800d168:	d102      	bne.n	800d170 <UART_SetConfig+0x110>
 800d16a:	2320      	movs	r3, #32
 800d16c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d16e:	e001      	b.n	800d174 <UART_SetConfig+0x114>
 800d170:	2300      	movs	r3, #0
 800d172:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	4b3d      	ldr	r3, [pc, #244]	; (800d270 <UART_SetConfig+0x210>)
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d005      	beq.n	800d18a <UART_SetConfig+0x12a>
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	4b3d      	ldr	r3, [pc, #244]	; (800d278 <UART_SetConfig+0x218>)
 800d184:	429a      	cmp	r2, r3
 800d186:	f040 8085 	bne.w	800d294 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d18c:	2200      	movs	r2, #0
 800d18e:	623b      	str	r3, [r7, #32]
 800d190:	627a      	str	r2, [r7, #36]	; 0x24
 800d192:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d196:	f7fb fed9 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800d19a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 80e8 	beq.w	800d374 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a8:	4a39      	ldr	r2, [pc, #228]	; (800d290 <UART_SetConfig+0x230>)
 800d1aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1b6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	4413      	add	r3, r2
 800d1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d305      	bcc.n	800d1d4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d903      	bls.n	800d1dc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d1da:	e048      	b.n	800d26e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1de:	2200      	movs	r2, #0
 800d1e0:	61bb      	str	r3, [r7, #24]
 800d1e2:	61fa      	str	r2, [r7, #28]
 800d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e8:	4a29      	ldr	r2, [pc, #164]	; (800d290 <UART_SetConfig+0x230>)
 800d1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	613b      	str	r3, [r7, #16]
 800d1f4:	617a      	str	r2, [r7, #20]
 800d1f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d1fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d1fe:	f7f3 f83b 	bl	8000278 <__aeabi_uldivmod>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	4610      	mov	r0, r2
 800d208:	4619      	mov	r1, r3
 800d20a:	f04f 0200 	mov.w	r2, #0
 800d20e:	f04f 0300 	mov.w	r3, #0
 800d212:	020b      	lsls	r3, r1, #8
 800d214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d218:	0202      	lsls	r2, r0, #8
 800d21a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d21c:	6849      	ldr	r1, [r1, #4]
 800d21e:	0849      	lsrs	r1, r1, #1
 800d220:	2000      	movs	r0, #0
 800d222:	460c      	mov	r4, r1
 800d224:	4605      	mov	r5, r0
 800d226:	eb12 0804 	adds.w	r8, r2, r4
 800d22a:	eb43 0905 	adc.w	r9, r3, r5
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	60bb      	str	r3, [r7, #8]
 800d236:	60fa      	str	r2, [r7, #12]
 800d238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d23c:	4640      	mov	r0, r8
 800d23e:	4649      	mov	r1, r9
 800d240:	f7f3 f81a 	bl	8000278 <__aeabi_uldivmod>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4613      	mov	r3, r2
 800d24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d24e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d252:	d308      	bcc.n	800d266 <UART_SetConfig+0x206>
 800d254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d25a:	d204      	bcs.n	800d266 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d262:	60da      	str	r2, [r3, #12]
 800d264:	e003      	b.n	800d26e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d26c:	e082      	b.n	800d374 <UART_SetConfig+0x314>
 800d26e:	e081      	b.n	800d374 <UART_SetConfig+0x314>
 800d270:	46002400 	.word	0x46002400
 800d274:	cfff69f3 	.word	0xcfff69f3
 800d278:	56002400 	.word	0x56002400
 800d27c:	40013800 	.word	0x40013800
 800d280:	40004400 	.word	0x40004400
 800d284:	40004800 	.word	0x40004800
 800d288:	40004c00 	.word	0x40004c00
 800d28c:	40005000 	.word	0x40005000
 800d290:	0800f470 	.word	0x0800f470
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d29c:	d13c      	bne.n	800d318 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2aa:	f7fb fe4f 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800d2ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d05e      	beq.n	800d374 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ba:	4a39      	ldr	r2, [pc, #228]	; (800d3a0 <UART_SetConfig+0x340>)
 800d2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2c8:	005a      	lsls	r2, r3, #1
 800d2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	085b      	lsrs	r3, r3, #1
 800d2d0:	441a      	add	r2, r3
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	2b0f      	cmp	r3, #15
 800d2e0:	d916      	bls.n	800d310 <UART_SetConfig+0x2b0>
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e8:	d212      	bcs.n	800d310 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	f023 030f 	bic.w	r3, r3, #15
 800d2f2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2f6:	085b      	lsrs	r3, r3, #1
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d302:	4313      	orrs	r3, r2
 800d304:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	e031      	b.n	800d374 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d316:	e02d      	b.n	800d374 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31a:	2200      	movs	r2, #0
 800d31c:	469a      	mov	sl, r3
 800d31e:	4693      	mov	fp, r2
 800d320:	4650      	mov	r0, sl
 800d322:	4659      	mov	r1, fp
 800d324:	f7fb fe12 	bl	8008f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800d328:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d021      	beq.n	800d374 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d334:	4a1a      	ldr	r2, [pc, #104]	; (800d3a0 <UART_SetConfig+0x340>)
 800d336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d33a:	461a      	mov	r2, r3
 800d33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d33e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	085b      	lsrs	r3, r3, #1
 800d348:	441a      	add	r2, r3
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d352:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d356:	2b0f      	cmp	r3, #15
 800d358:	d909      	bls.n	800d36e <UART_SetConfig+0x30e>
 800d35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d35c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d360:	d205      	bcs.n	800d36e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	b29a      	uxth	r2, r3
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	60da      	str	r2, [r3, #12]
 800d36c:	e002      	b.n	800d374 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	2201      	movs	r2, #1
 800d378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	2201      	movs	r2, #1
 800d380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	2200      	movs	r2, #0
 800d388:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	2200      	movs	r2, #0
 800d38e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d390:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d394:	4618      	mov	r0, r3
 800d396:	3750      	adds	r7, #80	; 0x50
 800d398:	46bd      	mov	sp, r7
 800d39a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d39e:	bf00      	nop
 800d3a0:	0800f470 	.word	0x0800f470

0800d3a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b0:	f003 0301 	and.w	r3, r3, #1
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00a      	beq.n	800d3ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	430a      	orrs	r2, r1
 800d3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f4:	f003 0304 	and.w	r3, r3, #4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00a      	beq.n	800d412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	430a      	orrs	r2, r1
 800d410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d416:	f003 0308 	and.w	r3, r3, #8
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00a      	beq.n	800d434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	430a      	orrs	r2, r1
 800d432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d438:	f003 0310 	and.w	r3, r3, #16
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00a      	beq.n	800d456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	430a      	orrs	r2, r1
 800d454:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45a:	f003 0320 	and.w	r3, r3, #32
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00a      	beq.n	800d478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	430a      	orrs	r2, r1
 800d476:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d480:	2b00      	cmp	r3, #0
 800d482:	d01a      	beq.n	800d4ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	430a      	orrs	r2, r1
 800d498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d49e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4a2:	d10a      	bne.n	800d4ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	430a      	orrs	r2, r1
 800d4b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00a      	beq.n	800d4dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	430a      	orrs	r2, r1
 800d4da:	605a      	str	r2, [r3, #4]
  }
}
 800d4dc:	bf00      	nop
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b098      	sub	sp, #96	; 0x60
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4f8:	f7f5 fdf0 	bl	80030dc <HAL_GetTick>
 800d4fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 0308 	and.w	r3, r3, #8
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d12f      	bne.n	800d56c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d50c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d514:	2200      	movs	r2, #0
 800d516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f88e 	bl	800d63c <UART_WaitOnFlagUntilTimeout>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d022      	beq.n	800d56c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d53a:	653b      	str	r3, [r7, #80]	; 0x50
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d544:	647b      	str	r3, [r7, #68]	; 0x44
 800d546:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d54a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d54c:	e841 2300 	strex	r3, r2, [r1]
 800d550:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e6      	bne.n	800d526 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e063      	b.n	800d634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f003 0304 	and.w	r3, r3, #4
 800d576:	2b04      	cmp	r3, #4
 800d578:	d149      	bne.n	800d60e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d57a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d582:	2200      	movs	r2, #0
 800d584:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f857 	bl	800d63c <UART_WaitOnFlagUntilTimeout>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d03c      	beq.n	800d60e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800d5b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e6      	bne.n	800d594 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	3308      	adds	r3, #8
 800d5cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	e853 3f00 	ldrex	r3, [r3]
 800d5d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f023 0301 	bic.w	r3, r3, #1
 800d5dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5e6:	61fa      	str	r2, [r7, #28]
 800d5e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ea:	69b9      	ldr	r1, [r7, #24]
 800d5ec:	69fa      	ldr	r2, [r7, #28]
 800d5ee:	e841 2300 	strex	r3, r2, [r1]
 800d5f2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1e5      	bne.n	800d5c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2220      	movs	r2, #32
 800d5fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e012      	b.n	800d634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2220      	movs	r2, #32
 800d612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2220      	movs	r2, #32
 800d61a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3758      	adds	r7, #88	; 0x58
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	603b      	str	r3, [r7, #0]
 800d648:	4613      	mov	r3, r2
 800d64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d64c:	e049      	b.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d654:	d045      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d656:	f7f5 fd41 	bl	80030dc <HAL_GetTick>
 800d65a:	4602      	mov	r2, r0
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	429a      	cmp	r2, r3
 800d664:	d302      	bcc.n	800d66c <UART_WaitOnFlagUntilTimeout+0x30>
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e048      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0304 	and.w	r3, r3, #4
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d031      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	69db      	ldr	r3, [r3, #28]
 800d684:	f003 0308 	and.w	r3, r3, #8
 800d688:	2b08      	cmp	r3, #8
 800d68a:	d110      	bne.n	800d6ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2208      	movs	r2, #8
 800d692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f838 	bl	800d70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2208      	movs	r2, #8
 800d69e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e029      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6bc:	d111      	bne.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 f81e 	bl	800d70a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e00f      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69da      	ldr	r2, [r3, #28]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	bf0c      	ite	eq
 800d6f2:	2301      	moveq	r3, #1
 800d6f4:	2300      	movne	r3, #0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d0a6      	beq.n	800d64e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d70a:	b480      	push	{r7}
 800d70c:	b095      	sub	sp, #84	; 0x54
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d71a:	e853 3f00 	ldrex	r3, [r3]
 800d71e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d726:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	461a      	mov	r2, r3
 800d72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d730:	643b      	str	r3, [r7, #64]	; 0x40
 800d732:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d738:	e841 2300 	strex	r3, r2, [r1]
 800d73c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1e6      	bne.n	800d712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	3308      	adds	r3, #8
 800d74a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	e853 3f00 	ldrex	r3, [r3]
 800d752:	61fb      	str	r3, [r7, #28]
   return(result);
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d75a:	f023 0301 	bic.w	r3, r3, #1
 800d75e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3308      	adds	r3, #8
 800d766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d76a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d76e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d770:	e841 2300 	strex	r3, r2, [r1]
 800d774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1e3      	bne.n	800d744 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d780:	2b01      	cmp	r3, #1
 800d782:	d118      	bne.n	800d7b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	e853 3f00 	ldrex	r3, [r3]
 800d790:	60bb      	str	r3, [r7, #8]
   return(result);
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f023 0310 	bic.w	r3, r3, #16
 800d798:	647b      	str	r3, [r7, #68]	; 0x44
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a2:	61bb      	str	r3, [r7, #24]
 800d7a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a6:	6979      	ldr	r1, [r7, #20]
 800d7a8:	69ba      	ldr	r2, [r7, #24]
 800d7aa:	e841 2300 	strex	r3, r2, [r1]
 800d7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1e6      	bne.n	800d784 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d7ca:	bf00      	nop
 800d7cc:	3754      	adds	r7, #84	; 0x54
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d101      	bne.n	800d7ec <HAL_UARTEx_DisableFifoMode+0x16>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	e027      	b.n	800d83c <HAL_UARTEx_DisableFifoMode+0x66>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2224      	movs	r2, #36	; 0x24
 800d7f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0201 	bic.w	r2, r2, #1
 800d812:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d81a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2220      	movs	r2, #32
 800d82e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3714      	adds	r7, #20
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d101      	bne.n	800d860 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d85c:	2302      	movs	r3, #2
 800d85e:	e02d      	b.n	800d8bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2201      	movs	r2, #1
 800d864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2224      	movs	r2, #36	; 0x24
 800d86c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f022 0201 	bic.w	r2, r2, #1
 800d886:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	430a      	orrs	r2, r1
 800d89a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f84f 	bl	800d940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2220      	movs	r2, #32
 800d8ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e02d      	b.n	800d938 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2224      	movs	r2, #36	; 0x24
 800d8e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 0201 	bic.w	r2, r2, #1
 800d902:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	430a      	orrs	r2, r1
 800d916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f811 	bl	800d940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2220      	movs	r2, #32
 800d92a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d936:	2300      	movs	r3, #0
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d940:	b480      	push	{r7}
 800d942:	b085      	sub	sp, #20
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d108      	bne.n	800d962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d960:	e031      	b.n	800d9c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d962:	2308      	movs	r3, #8
 800d964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d966:	2308      	movs	r3, #8
 800d968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	0e5b      	lsrs	r3, r3, #25
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 0307 	and.w	r3, r3, #7
 800d978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	0f5b      	lsrs	r3, r3, #29
 800d982:	b2db      	uxtb	r3, r3
 800d984:	f003 0307 	and.w	r3, r3, #7
 800d988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	7b3a      	ldrb	r2, [r7, #12]
 800d98e:	4911      	ldr	r1, [pc, #68]	; (800d9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d990:	5c8a      	ldrb	r2, [r1, r2]
 800d992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d996:	7b3a      	ldrb	r2, [r7, #12]
 800d998:	490f      	ldr	r1, [pc, #60]	; (800d9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d99a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d99c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9a8:	7bfb      	ldrb	r3, [r7, #15]
 800d9aa:	7b7a      	ldrb	r2, [r7, #13]
 800d9ac:	4909      	ldr	r1, [pc, #36]	; (800d9d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d9ae:	5c8a      	ldrb	r2, [r1, r2]
 800d9b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9b4:	7b7a      	ldrb	r2, [r7, #13]
 800d9b6:	4908      	ldr	r1, [pc, #32]	; (800d9d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d9b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	0800f488 	.word	0x0800f488
 800d9d8:	0800f490 	.word	0x0800f490

0800d9dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d9dc:	b084      	sub	sp, #16
 800d9de:	b480      	push	{r7}
 800d9e0:	b085      	sub	sp, #20
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	f107 001c 	add.w	r0, r7, #28
 800d9ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d9f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d9f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d9fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d9fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800da02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	4313      	orrs	r3, r2
 800da08:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <SDMMC_Init+0x50>)
 800da10:	4013      	ands	r3, r2
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	431a      	orrs	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	b004      	add	sp, #16
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	ffc02c00 	.word	0xffc02c00

0800da30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b083      	sub	sp, #12
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f043 0203 	orr.w	r2, r3, #3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f003 0303 	and.w	r3, r3, #3
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800daa6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800daac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dab2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <SDMMC_SendCommand+0x50>)
 800dac0:	4013      	ands	r3, r2
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	431a      	orrs	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	fffee0c0 	.word	0xfffee0c0

0800dadc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	b2db      	uxtb	r3, r3
}
 800daea:	4618      	mov	r0, r3
 800daec:	370c      	adds	r7, #12
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b085      	sub	sp, #20
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
 800dafe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3314      	adds	r3, #20
 800db04:	461a      	mov	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	4413      	add	r3, r2
 800db0a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db42:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800db48:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800db4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	4313      	orrs	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	431a      	orrs	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800db66:	2300      	movs	r3, #0

}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b088      	sub	sp, #32
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db82:	2310      	movs	r3, #16
 800db84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db96:	f107 0308 	add.w	r3, r7, #8
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff ff73 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800dba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba6:	2110      	movs	r1, #16
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f000 f995 	bl	800ded8 <SDMMC_GetCmdResp1>
 800dbae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbb0:	69fb      	ldr	r3, [r7, #28]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3720      	adds	r7, #32
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b088      	sub	sp, #32
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dbc8:	2307      	movs	r3, #7
 800dbca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dbd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbdc:	f107 0308 	add.w	r3, r7, #8
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff ff50 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dbe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbec:	2107      	movs	r1, #7
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f972 	bl	800ded8 <SDMMC_GetCmdResp1>
 800dbf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3720      	adds	r7, #32
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b088      	sub	sp, #32
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc14:	2300      	movs	r3, #0
 800dc16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc1e:	f107 0308 	add.w	r3, r7, #8
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff ff2f 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fb96 	bl	800e35c <SDMMC_GetCmdError>
 800dc30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc32:	69fb      	ldr	r3, [r7, #28]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3720      	adds	r7, #32
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dc44:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dc48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dc4a:	2308      	movs	r3, #8
 800dc4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff ff0f 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fb28 	bl	800e2c0 <SDMMC_GetCmdResp7>
 800dc70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc72:	69fb      	ldr	r3, [r7, #28]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dc8a:	2337      	movs	r3, #55	; 0x37
 800dc8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc94:	2300      	movs	r3, #0
 800dc96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc9e:	f107 0308 	add.w	r3, r7, #8
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff feef 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dcaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcae:	2137      	movs	r1, #55	; 0x37
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f911 	bl	800ded8 <SDMMC_GetCmdResp1>
 800dcb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcb8:	69fb      	ldr	r3, [r7, #28]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b088      	sub	sp, #32
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
 800dcca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800dcd0:	2329      	movs	r3, #41	; 0x29
 800dcd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dce4:	f107 0308 	add.w	r3, r7, #8
 800dce8:	4619      	mov	r1, r3
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff fecc 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fa2d 	bl	800e150 <SDMMC_GetCmdResp3>
 800dcf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dcf8:	69fb      	ldr	r3, [r7, #28]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b088      	sub	sp, #32
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800dd10:	2306      	movs	r3, #6
 800dd12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd24:	f107 0308 	add.w	r3, r7, #8
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff feac 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800dd30:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd34:	2106      	movs	r1, #6
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 f8ce 	bl	800ded8 <SDMMC_GetCmdResp1>
 800dd3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd3e:	69fb      	ldr	r3, [r7, #28]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3720      	adds	r7, #32
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b088      	sub	sp, #32
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800dd50:	2300      	movs	r3, #0
 800dd52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800dd54:	2333      	movs	r3, #51	; 0x33
 800dd56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dd5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff fe8a 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dd74:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd78:	2133      	movs	r1, #51	; 0x33
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f000 f8ac 	bl	800ded8 <SDMMC_GetCmdResp1>
 800dd80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd82:	69fb      	ldr	r3, [r7, #28]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3720      	adds	r7, #32
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dd98:	2302      	movs	r3, #2
 800dd9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dd9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dda2:	2300      	movs	r3, #0
 800dda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dda6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddac:	f107 0308 	add.w	r3, r7, #8
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fe68 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 f97f 	bl	800e0bc <SDMMC_GetCmdResp2>
 800ddbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddc0:	69fb      	ldr	r3, [r7, #28]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3720      	adds	r7, #32
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b088      	sub	sp, #32
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ddd8:	2309      	movs	r3, #9
 800ddda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dddc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dde0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dde2:	2300      	movs	r3, #0
 800dde4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dde6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddec:	f107 0308 	add.w	r3, r7, #8
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f7ff fe48 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f95f 	bl	800e0bc <SDMMC_GetCmdResp2>
 800ddfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de00:	69fb      	ldr	r3, [r7, #28]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3720      	adds	r7, #32
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b088      	sub	sp, #32
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800de18:	2303      	movs	r3, #3
 800de1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de22:	2300      	movs	r3, #0
 800de24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de2c:	f107 0308 	add.w	r3, r7, #8
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff fe28 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800de38:	683a      	ldr	r2, [r7, #0]
 800de3a:	2103      	movs	r1, #3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f9c7 	bl	800e1d0 <SDMMC_GetCmdResp6>
 800de42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de44:	69fb      	ldr	r3, [r7, #28]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3720      	adds	r7, #32
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b088      	sub	sp, #32
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800de5c:	230d      	movs	r3, #13
 800de5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de66:	2300      	movs	r3, #0
 800de68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de70:	f107 0308 	add.w	r3, r7, #8
 800de74:	4619      	mov	r1, r3
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7ff fe06 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800de7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800de80:	210d      	movs	r1, #13
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f828 	bl	800ded8 <SDMMC_GetCmdResp1>
 800de88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de8a:	69fb      	ldr	r3, [r7, #28]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3720      	adds	r7, #32
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b088      	sub	sp, #32
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800dea0:	230d      	movs	r3, #13
 800dea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deaa:	2300      	movs	r3, #0
 800deac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deb4:	f107 0308 	add.w	r3, r7, #8
 800deb8:	4619      	mov	r1, r3
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fde4 	bl	800da88 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800dec0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dec4:	210d      	movs	r1, #13
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f806 	bl	800ded8 <SDMMC_GetCmdResp1>
 800decc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dece:	69fb      	ldr	r3, [r7, #28]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3720      	adds	r7, #32
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b088      	sub	sp, #32
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	460b      	mov	r3, r1
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dee6:	4b70      	ldr	r3, [pc, #448]	; (800e0a8 <SDMMC_GetCmdResp1+0x1d0>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a70      	ldr	r2, [pc, #448]	; (800e0ac <SDMMC_GetCmdResp1+0x1d4>)
 800deec:	fba2 2303 	umull	r2, r3, r2, r3
 800def0:	0a5a      	lsrs	r2, r3, #9
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	fb02 f303 	mul.w	r3, r2, r3
 800def8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	1e5a      	subs	r2, r3, #1
 800defe:	61fa      	str	r2, [r7, #28]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d102      	bne.n	800df0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800df04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df08:	e0c9      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800df10:	69ba      	ldr	r2, [r7, #24]
 800df12:	4b67      	ldr	r3, [pc, #412]	; (800e0b0 <SDMMC_GetCmdResp1+0x1d8>)
 800df14:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0ef      	beq.n	800defa <SDMMC_GetCmdResp1+0x22>
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1ea      	bne.n	800defa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df28:	f003 0304 	and.w	r3, r3, #4
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2204      	movs	r2, #4
 800df34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df36:	2304      	movs	r3, #4
 800df38:	e0b1      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d004      	beq.n	800df50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2201      	movs	r2, #1
 800df4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e0a6      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	4a58      	ldr	r2, [pc, #352]	; (800e0b4 <SDMMC_GetCmdResp1+0x1dc>)
 800df54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f7ff fdc0 	bl	800dadc <SDMMC_GetCommandResponse>
 800df5c:	4603      	mov	r3, r0
 800df5e:	461a      	mov	r2, r3
 800df60:	7afb      	ldrb	r3, [r7, #11]
 800df62:	4293      	cmp	r3, r2
 800df64:	d001      	beq.n	800df6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df66:	2301      	movs	r3, #1
 800df68:	e099      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800df6a:	2100      	movs	r1, #0
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f7ff fdc2 	bl	800daf6 <SDMMC_GetResponse>
 800df72:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	4b50      	ldr	r3, [pc, #320]	; (800e0b8 <SDMMC_GetCmdResp1+0x1e0>)
 800df78:	4013      	ands	r3, r2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800df7e:	2300      	movs	r3, #0
 800df80:	e08d      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	da02      	bge.n	800df8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df8c:	e087      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	e080      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d001      	beq.n	800dfaa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dfa6:	2380      	movs	r3, #128	; 0x80
 800dfa8:	e079      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dfb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfb8:	e071      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dfc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfc8:	e069      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dfd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfd8:	e061      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dfe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfe8:	e059      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dff8:	e051      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e008:	e049      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e018:	e041      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d002      	beq.n	800e02a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e028:	e039      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e038:	e031      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e040:	2b00      	cmp	r3, #0
 800e042:	d002      	beq.n	800e04a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e048:	e029      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e054:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e058:	e021      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e064:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e068:	e019      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e074:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e078:	e011      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e088:	e009      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f003 0308 	and.w	r3, r3, #8
 800e090:	2b00      	cmp	r3, #0
 800e092:	d002      	beq.n	800e09a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e094:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e098:	e001      	b.n	800e09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e09a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20000000 	.word	0x20000000
 800e0ac:	10624dd3 	.word	0x10624dd3
 800e0b0:	00200045 	.word	0x00200045
 800e0b4:	002000c5 	.word	0x002000c5
 800e0b8:	fdffe008 	.word	0xfdffe008

0800e0bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e0c4:	4b1f      	ldr	r3, [pc, #124]	; (800e144 <SDMMC_GetCmdResp2+0x88>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a1f      	ldr	r2, [pc, #124]	; (800e148 <SDMMC_GetCmdResp2+0x8c>)
 800e0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ce:	0a5b      	lsrs	r3, r3, #9
 800e0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d4:	fb02 f303 	mul.w	r3, r2, r3
 800e0d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	60fa      	str	r2, [r7, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e0e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0e8:	e026      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0ef      	beq.n	800e0da <SDMMC_GetCmdResp2+0x1e>
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e100:	2b00      	cmp	r3, #0
 800e102:	d1ea      	bne.n	800e0da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d004      	beq.n	800e11a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2204      	movs	r2, #4
 800e114:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e116:	2304      	movs	r3, #4
 800e118:	e00e      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	2b00      	cmp	r3, #0
 800e124:	d004      	beq.n	800e130 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e12c:	2301      	movs	r3, #1
 800e12e:	e003      	b.n	800e138 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a06      	ldr	r2, [pc, #24]	; (800e14c <SDMMC_GetCmdResp2+0x90>)
 800e134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e136:	2300      	movs	r3, #0
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3714      	adds	r7, #20
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	20000000 	.word	0x20000000
 800e148:	10624dd3 	.word	0x10624dd3
 800e14c:	002000c5 	.word	0x002000c5

0800e150 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e158:	4b1a      	ldr	r3, [pc, #104]	; (800e1c4 <SDMMC_GetCmdResp3+0x74>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a1a      	ldr	r2, [pc, #104]	; (800e1c8 <SDMMC_GetCmdResp3+0x78>)
 800e15e:	fba2 2303 	umull	r2, r3, r2, r3
 800e162:	0a5b      	lsrs	r3, r3, #9
 800e164:	f241 3288 	movw	r2, #5000	; 0x1388
 800e168:	fb02 f303 	mul.w	r3, r2, r3
 800e16c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	1e5a      	subs	r2, r3, #1
 800e172:	60fa      	str	r2, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e17c:	e01b      	b.n	800e1b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e182:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d0ef      	beq.n	800e16e <SDMMC_GetCmdResp3+0x1e>
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1ea      	bne.n	800e16e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19c:	f003 0304 	and.w	r3, r3, #4
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d004      	beq.n	800e1ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2204      	movs	r2, #4
 800e1a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	e003      	b.n	800e1b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a06      	ldr	r2, [pc, #24]	; (800e1cc <SDMMC_GetCmdResp3+0x7c>)
 800e1b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	20000000 	.word	0x20000000
 800e1c8:	10624dd3 	.word	0x10624dd3
 800e1cc:	002000c5 	.word	0x002000c5

0800e1d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e1de:	4b35      	ldr	r3, [pc, #212]	; (800e2b4 <SDMMC_GetCmdResp6+0xe4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a35      	ldr	r2, [pc, #212]	; (800e2b8 <SDMMC_GetCmdResp6+0xe8>)
 800e1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1e8:	0a5b      	lsrs	r3, r3, #9
 800e1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ee:	fb02 f303 	mul.w	r3, r2, r3
 800e1f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	1e5a      	subs	r2, r3, #1
 800e1f8:	61fa      	str	r2, [r7, #28]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e202:	e052      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e208:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e210:	2b00      	cmp	r3, #0
 800e212:	d0ef      	beq.n	800e1f4 <SDMMC_GetCmdResp6+0x24>
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1ea      	bne.n	800e1f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e222:	f003 0304 	and.w	r3, r3, #4
 800e226:	2b00      	cmp	r3, #0
 800e228:	d004      	beq.n	800e234 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2204      	movs	r2, #4
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e230:	2304      	movs	r3, #4
 800e232:	e03a      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2201      	movs	r2, #1
 800e244:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e246:	2301      	movs	r3, #1
 800e248:	e02f      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f7ff fc46 	bl	800dadc <SDMMC_GetCommandResponse>
 800e250:	4603      	mov	r3, r0
 800e252:	461a      	mov	r2, r3
 800e254:	7afb      	ldrb	r3, [r7, #11]
 800e256:	4293      	cmp	r3, r2
 800e258:	d001      	beq.n	800e25e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e025      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4a16      	ldr	r2, [pc, #88]	; (800e2bc <SDMMC_GetCmdResp6+0xec>)
 800e262:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e264:	2100      	movs	r1, #0
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f7ff fc45 	bl	800daf6 <SDMMC_GetResponse>
 800e26c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d106      	bne.n	800e286 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	0c1b      	lsrs	r3, r3, #16
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e282:	2300      	movs	r3, #0
 800e284:	e011      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e294:	e009      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d002      	beq.n	800e2a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2a4:	e001      	b.n	800e2aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3720      	adds	r7, #32
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20000000 	.word	0x20000000
 800e2b8:	10624dd3 	.word	0x10624dd3
 800e2bc:	002000c5 	.word	0x002000c5

0800e2c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e2c8:	4b22      	ldr	r3, [pc, #136]	; (800e354 <SDMMC_GetCmdResp7+0x94>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a22      	ldr	r2, [pc, #136]	; (800e358 <SDMMC_GetCmdResp7+0x98>)
 800e2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d2:	0a5b      	lsrs	r3, r3, #9
 800e2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2d8:	fb02 f303 	mul.w	r3, r2, r3
 800e2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	60fa      	str	r2, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d102      	bne.n	800e2ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2ec:	e02c      	b.n	800e348 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0ef      	beq.n	800e2de <SDMMC_GetCmdResp7+0x1e>
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1ea      	bne.n	800e2de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	2b00      	cmp	r3, #0
 800e312:	d004      	beq.n	800e31e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2204      	movs	r2, #4
 800e318:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e31a:	2304      	movs	r3, #4
 800e31c:	e014      	b.n	800e348 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b00      	cmp	r3, #0
 800e328:	d004      	beq.n	800e334 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e330:	2301      	movs	r3, #1
 800e332:	e009      	b.n	800e348 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2240      	movs	r2, #64	; 0x40
 800e344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e346:	2300      	movs	r3, #0

}
 800e348:	4618      	mov	r0, r3
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	20000000 	.word	0x20000000
 800e358:	10624dd3 	.word	0x10624dd3

0800e35c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e364:	4b11      	ldr	r3, [pc, #68]	; (800e3ac <SDMMC_GetCmdError+0x50>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a11      	ldr	r2, [pc, #68]	; (800e3b0 <SDMMC_GetCmdError+0x54>)
 800e36a:	fba2 2303 	umull	r2, r3, r2, r3
 800e36e:	0a5b      	lsrs	r3, r3, #9
 800e370:	f241 3288 	movw	r2, #5000	; 0x1388
 800e374:	fb02 f303 	mul.w	r3, r2, r3
 800e378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	1e5a      	subs	r2, r3, #1
 800e37e:	60fa      	str	r2, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d102      	bne.n	800e38a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e388:	e009      	b.n	800e39e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e392:	2b00      	cmp	r3, #0
 800e394:	d0f1      	beq.n	800e37a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a06      	ldr	r2, [pc, #24]	; (800e3b4 <SDMMC_GetCmdError+0x58>)
 800e39a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3714      	adds	r7, #20
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	20000000 	.word	0x20000000
 800e3b0:	10624dd3 	.word	0x10624dd3
 800e3b4:	002000c5 	.word	0x002000c5

0800e3b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e3b8:	b084      	sub	sp, #16
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	f107 001c 	add.w	r0, r7, #28
 800e3c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fa68 	bl	800e8ac <USB_CoreReset>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800e3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	639a      	str	r2, [r3, #56]	; 0x38
 800e3f2:	e005      	b.n	800e400 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e40c:	b004      	add	sp, #16
 800e40e:	4770      	bx	lr

0800e410 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	689b      	ldr	r3, [r3, #8]
 800e41c:	f023 0201 	bic.w	r2, r3, #1
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e424:	2300      	movs	r3, #0
}
 800e426:	4618      	mov	r0, r3
 800e428:	370c      	adds	r7, #12
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	460b      	mov	r3, r1
 800e43c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e43e:	2300      	movs	r3, #0
 800e440:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e44e:	78fb      	ldrb	r3, [r7, #3]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d115      	bne.n	800e480 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e460:	2001      	movs	r0, #1
 800e462:	f7f4 fe47 	bl	80030f4 <HAL_Delay>
      ms++;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 fa0f 	bl	800e890 <USB_GetMode>
 800e472:	4603      	mov	r3, r0
 800e474:	2b01      	cmp	r3, #1
 800e476:	d01e      	beq.n	800e4b6 <USB_SetCurrentMode+0x84>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2b31      	cmp	r3, #49	; 0x31
 800e47c:	d9f0      	bls.n	800e460 <USB_SetCurrentMode+0x2e>
 800e47e:	e01a      	b.n	800e4b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e480:	78fb      	ldrb	r3, [r7, #3]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d115      	bne.n	800e4b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e492:	2001      	movs	r0, #1
 800e494:	f7f4 fe2e 	bl	80030f4 <HAL_Delay>
      ms++;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3301      	adds	r3, #1
 800e49c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f9f6 	bl	800e890 <USB_GetMode>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d005      	beq.n	800e4b6 <USB_SetCurrentMode+0x84>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b31      	cmp	r3, #49	; 0x31
 800e4ae:	d9f0      	bls.n	800e492 <USB_SetCurrentMode+0x60>
 800e4b0:	e001      	b.n	800e4b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e005      	b.n	800e4c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b32      	cmp	r3, #50	; 0x32
 800e4ba:	d101      	bne.n	800e4c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
	...

0800e4cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b086      	sub	sp, #24
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e4da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	613b      	str	r3, [r7, #16]
 800e4ea:	e009      	b.n	800e500 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3340      	adds	r3, #64	; 0x40
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	613b      	str	r3, [r7, #16]
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b0e      	cmp	r3, #14
 800e504:	d9f2      	bls.n	800e4ec <USB_DevInit+0x20>
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d11c      	bne.n	800e546 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e51a:	f043 0302 	orr.w	r3, r3, #2
 800e51e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e524:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	601a      	str	r2, [r3, #0]
 800e544:	e005      	b.n	800e552 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e558:	461a      	mov	r2, r3
 800e55a:	2300      	movs	r3, #0
 800e55c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e55e:	2103      	movs	r1, #3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f95b 	bl	800e81c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e566:	2110      	movs	r1, #16
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f8f3 	bl	800e754 <USB_FlushTxFifo>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d001      	beq.n	800e578 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800e574:	2301      	movs	r3, #1
 800e576:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f91f 	bl	800e7bc <USB_FlushRxFifo>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e58e:	461a      	mov	r2, r3
 800e590:	2300      	movs	r3, #0
 800e592:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e59a:	461a      	mov	r2, r3
 800e59c:	2300      	movs	r3, #0
 800e59e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	e043      	b.n	800e63a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5c8:	d118      	bne.n	800e5fc <USB_DevInit+0x130>
    {
      if (i == 0U)
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5dc:	461a      	mov	r2, r3
 800e5de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e5e2:	6013      	str	r3, [r2, #0]
 800e5e4:	e013      	b.n	800e60e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	015a      	lsls	r2, r3, #5
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e5f8:	6013      	str	r3, [r2, #0]
 800e5fa:	e008      	b.n	800e60e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	015a      	lsls	r2, r3, #5
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	4413      	add	r3, r2
 800e604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e608:	461a      	mov	r2, r3
 800e60a:	2300      	movs	r3, #0
 800e60c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	4413      	add	r3, r2
 800e616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61a:	461a      	mov	r2, r3
 800e61c:	2300      	movs	r3, #0
 800e61e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	015a      	lsls	r2, r3, #5
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4413      	add	r3, r2
 800e628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e62c:	461a      	mov	r2, r3
 800e62e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	3301      	adds	r3, #1
 800e638:	613b      	str	r3, [r7, #16]
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	693a      	ldr	r2, [r7, #16]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d3b7      	bcc.n	800e5b2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]
 800e646:	e043      	b.n	800e6d0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e65a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e65e:	d118      	bne.n	800e692 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d10a      	bne.n	800e67c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	015a      	lsls	r2, r3, #5
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4413      	add	r3, r2
 800e66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e672:	461a      	mov	r2, r3
 800e674:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e678:	6013      	str	r3, [r2, #0]
 800e67a:	e013      	b.n	800e6a4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	015a      	lsls	r2, r3, #5
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4413      	add	r3, r2
 800e684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e688:	461a      	mov	r2, r3
 800e68a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e68e:	6013      	str	r3, [r2, #0]
 800e690:	e008      	b.n	800e6a4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	015a      	lsls	r2, r3, #5
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	4413      	add	r3, r2
 800e69a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e69e:	461a      	mov	r2, r3
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	015a      	lsls	r2, r3, #5
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	015a      	lsls	r2, r3, #5
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	4413      	add	r3, r2
 800e6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e6c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	693a      	ldr	r2, [r7, #16]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d3b7      	bcc.n	800e648 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e6e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e6f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d105      	bne.n	800e70c <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	f043 0210 	orr.w	r2, r3, #16
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	699a      	ldr	r2, [r3, #24]
 800e710:	4b0f      	ldr	r3, [pc, #60]	; (800e750 <USB_DevInit+0x284>)
 800e712:	4313      	orrs	r3, r2
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d005      	beq.n	800e72a <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	699b      	ldr	r3, [r3, #24]
 800e722:	f043 0208 	orr.w	r2, r3, #8
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d107      	bne.n	800e740 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e738:	f043 0304 	orr.w	r3, r3, #4
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3718      	adds	r7, #24
 800e746:	46bd      	mov	sp, r7
 800e748:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e74c:	b004      	add	sp, #16
 800e74e:	4770      	bx	lr
 800e750:	803c3800 	.word	0x803c3800

0800e754 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e754:	b480      	push	{r7}
 800e756:	b085      	sub	sp, #20
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e75e:	2300      	movs	r3, #0
 800e760:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3301      	adds	r3, #1
 800e766:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4a13      	ldr	r2, [pc, #76]	; (800e7b8 <USB_FlushTxFifo+0x64>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d901      	bls.n	800e774 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e770:	2303      	movs	r3, #3
 800e772:	e01b      	b.n	800e7ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	691b      	ldr	r3, [r3, #16]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	daf2      	bge.n	800e762 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e77c:	2300      	movs	r3, #0
 800e77e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	019b      	lsls	r3, r3, #6
 800e784:	f043 0220 	orr.w	r2, r3, #32
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3301      	adds	r3, #1
 800e790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4a08      	ldr	r2, [pc, #32]	; (800e7b8 <USB_FlushTxFifo+0x64>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d901      	bls.n	800e79e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	e006      	b.n	800e7ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	f003 0320 	and.w	r3, r3, #32
 800e7a6:	2b20      	cmp	r3, #32
 800e7a8:	d0f0      	beq.n	800e78c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	00030d40 	.word	0x00030d40

0800e7bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4a11      	ldr	r2, [pc, #68]	; (800e818 <USB_FlushRxFifo+0x5c>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d901      	bls.n	800e7da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	e018      	b.n	800e80c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	691b      	ldr	r3, [r3, #16]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	daf2      	bge.n	800e7c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2210      	movs	r2, #16
 800e7ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4a08      	ldr	r2, [pc, #32]	; (800e818 <USB_FlushRxFifo+0x5c>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d901      	bls.n	800e7fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	e006      	b.n	800e80c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	f003 0310 	and.w	r3, r3, #16
 800e806:	2b10      	cmp	r3, #16
 800e808:	d0f0      	beq.n	800e7ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	00030d40 	.word	0x00030d40

0800e81c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	78fb      	ldrb	r3, [r7, #3]
 800e836:	68f9      	ldr	r1, [r7, #12]
 800e838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e83c:	4313      	orrs	r3, r2
 800e83e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e84e:	b480      	push	{r7}
 800e850:	b085      	sub	sp, #20
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e868:	f023 0303 	bic.w	r3, r3, #3
 800e86c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e87c:	f043 0302 	orr.w	r3, r3, #2
 800e880:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	695b      	ldr	r3, [r3, #20]
 800e89c:	f003 0301 	and.w	r3, r3, #1
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4a13      	ldr	r2, [pc, #76]	; (800e910 <USB_CoreReset+0x64>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d901      	bls.n	800e8ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	e01b      	b.n	800e902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	daf2      	bge.n	800e8b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	f043 0201 	orr.w	r2, r3, #1
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	4a09      	ldr	r2, [pc, #36]	; (800e910 <USB_CoreReset+0x64>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d901      	bls.n	800e8f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e006      	b.n	800e902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d0f0      	beq.n	800e8e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3714      	adds	r7, #20
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	00030d40 	.word	0x00030d40

0800e914 <__errno>:
 800e914:	4b01      	ldr	r3, [pc, #4]	; (800e91c <__errno+0x8>)
 800e916:	6818      	ldr	r0, [r3, #0]
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	2000000c 	.word	0x2000000c

0800e920 <__libc_init_array>:
 800e920:	b570      	push	{r4, r5, r6, lr}
 800e922:	4d0d      	ldr	r5, [pc, #52]	; (800e958 <__libc_init_array+0x38>)
 800e924:	2600      	movs	r6, #0
 800e926:	4c0d      	ldr	r4, [pc, #52]	; (800e95c <__libc_init_array+0x3c>)
 800e928:	1b64      	subs	r4, r4, r5
 800e92a:	10a4      	asrs	r4, r4, #2
 800e92c:	42a6      	cmp	r6, r4
 800e92e:	d109      	bne.n	800e944 <__libc_init_array+0x24>
 800e930:	4d0b      	ldr	r5, [pc, #44]	; (800e960 <__libc_init_array+0x40>)
 800e932:	2600      	movs	r6, #0
 800e934:	4c0b      	ldr	r4, [pc, #44]	; (800e964 <__libc_init_array+0x44>)
 800e936:	f000 fd1b 	bl	800f370 <_init>
 800e93a:	1b64      	subs	r4, r4, r5
 800e93c:	10a4      	asrs	r4, r4, #2
 800e93e:	42a6      	cmp	r6, r4
 800e940:	d105      	bne.n	800e94e <__libc_init_array+0x2e>
 800e942:	bd70      	pop	{r4, r5, r6, pc}
 800e944:	f855 3b04 	ldr.w	r3, [r5], #4
 800e948:	3601      	adds	r6, #1
 800e94a:	4798      	blx	r3
 800e94c:	e7ee      	b.n	800e92c <__libc_init_array+0xc>
 800e94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e952:	3601      	adds	r6, #1
 800e954:	4798      	blx	r3
 800e956:	e7f2      	b.n	800e93e <__libc_init_array+0x1e>
 800e958:	0800f504 	.word	0x0800f504
 800e95c:	0800f504 	.word	0x0800f504
 800e960:	0800f504 	.word	0x0800f504
 800e964:	0800f508 	.word	0x0800f508

0800e968 <memset>:
 800e968:	4402      	add	r2, r0
 800e96a:	4603      	mov	r3, r0
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d100      	bne.n	800e972 <memset+0xa>
 800e970:	4770      	bx	lr
 800e972:	f803 1b01 	strb.w	r1, [r3], #1
 800e976:	e7f9      	b.n	800e96c <memset+0x4>

0800e978 <_puts_r>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	460e      	mov	r6, r1
 800e97c:	4605      	mov	r5, r0
 800e97e:	b118      	cbz	r0, 800e988 <_puts_r+0x10>
 800e980:	6983      	ldr	r3, [r0, #24]
 800e982:	b90b      	cbnz	r3, 800e988 <_puts_r+0x10>
 800e984:	f000 fa46 	bl	800ee14 <__sinit>
 800e988:	69ab      	ldr	r3, [r5, #24]
 800e98a:	68ac      	ldr	r4, [r5, #8]
 800e98c:	b913      	cbnz	r3, 800e994 <_puts_r+0x1c>
 800e98e:	4628      	mov	r0, r5
 800e990:	f000 fa40 	bl	800ee14 <__sinit>
 800e994:	4b2c      	ldr	r3, [pc, #176]	; (800ea48 <_puts_r+0xd0>)
 800e996:	429c      	cmp	r4, r3
 800e998:	d120      	bne.n	800e9dc <_puts_r+0x64>
 800e99a:	686c      	ldr	r4, [r5, #4]
 800e99c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e99e:	07db      	lsls	r3, r3, #31
 800e9a0:	d405      	bmi.n	800e9ae <_puts_r+0x36>
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	0598      	lsls	r0, r3, #22
 800e9a6:	d402      	bmi.n	800e9ae <_puts_r+0x36>
 800e9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9aa:	f000 fad1 	bl	800ef50 <__retarget_lock_acquire_recursive>
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	0719      	lsls	r1, r3, #28
 800e9b2:	d51d      	bpl.n	800e9f0 <_puts_r+0x78>
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	b1db      	cbz	r3, 800e9f0 <_puts_r+0x78>
 800e9b8:	3e01      	subs	r6, #1
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	60a3      	str	r3, [r4, #8]
 800e9c4:	bb39      	cbnz	r1, 800ea16 <_puts_r+0x9e>
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da38      	bge.n	800ea3c <_puts_r+0xc4>
 800e9ca:	4622      	mov	r2, r4
 800e9cc:	210a      	movs	r1, #10
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f000 f848 	bl	800ea64 <__swbuf_r>
 800e9d4:	3001      	adds	r0, #1
 800e9d6:	d011      	beq.n	800e9fc <_puts_r+0x84>
 800e9d8:	250a      	movs	r5, #10
 800e9da:	e011      	b.n	800ea00 <_puts_r+0x88>
 800e9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ea4c <_puts_r+0xd4>)
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d101      	bne.n	800e9e6 <_puts_r+0x6e>
 800e9e2:	68ac      	ldr	r4, [r5, #8]
 800e9e4:	e7da      	b.n	800e99c <_puts_r+0x24>
 800e9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ea50 <_puts_r+0xd8>)
 800e9e8:	429c      	cmp	r4, r3
 800e9ea:	bf08      	it	eq
 800e9ec:	68ec      	ldreq	r4, [r5, #12]
 800e9ee:	e7d5      	b.n	800e99c <_puts_r+0x24>
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	f000 f888 	bl	800eb08 <__swsetup_r>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0dd      	beq.n	800e9b8 <_puts_r+0x40>
 800e9fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ea00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea02:	07da      	lsls	r2, r3, #31
 800ea04:	d405      	bmi.n	800ea12 <_puts_r+0x9a>
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	059b      	lsls	r3, r3, #22
 800ea0a:	d402      	bmi.n	800ea12 <_puts_r+0x9a>
 800ea0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea0e:	f000 faa0 	bl	800ef52 <__retarget_lock_release_recursive>
 800ea12:	4628      	mov	r0, r5
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da04      	bge.n	800ea24 <_puts_r+0xac>
 800ea1a:	69a2      	ldr	r2, [r4, #24]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	dc06      	bgt.n	800ea2e <_puts_r+0xb6>
 800ea20:	290a      	cmp	r1, #10
 800ea22:	d004      	beq.n	800ea2e <_puts_r+0xb6>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	6022      	str	r2, [r4, #0]
 800ea2a:	7019      	strb	r1, [r3, #0]
 800ea2c:	e7c5      	b.n	800e9ba <_puts_r+0x42>
 800ea2e:	4622      	mov	r2, r4
 800ea30:	4628      	mov	r0, r5
 800ea32:	f000 f817 	bl	800ea64 <__swbuf_r>
 800ea36:	3001      	adds	r0, #1
 800ea38:	d1bf      	bne.n	800e9ba <_puts_r+0x42>
 800ea3a:	e7df      	b.n	800e9fc <_puts_r+0x84>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	250a      	movs	r5, #10
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	6022      	str	r2, [r4, #0]
 800ea44:	701d      	strb	r5, [r3, #0]
 800ea46:	e7db      	b.n	800ea00 <_puts_r+0x88>
 800ea48:	0800f4bc 	.word	0x0800f4bc
 800ea4c:	0800f4dc 	.word	0x0800f4dc
 800ea50:	0800f49c 	.word	0x0800f49c

0800ea54 <puts>:
 800ea54:	4b02      	ldr	r3, [pc, #8]	; (800ea60 <puts+0xc>)
 800ea56:	4601      	mov	r1, r0
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	f7ff bf8d 	b.w	800e978 <_puts_r>
 800ea5e:	bf00      	nop
 800ea60:	2000000c 	.word	0x2000000c

0800ea64 <__swbuf_r>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	460e      	mov	r6, r1
 800ea68:	4614      	mov	r4, r2
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	b118      	cbz	r0, 800ea76 <__swbuf_r+0x12>
 800ea6e:	6983      	ldr	r3, [r0, #24]
 800ea70:	b90b      	cbnz	r3, 800ea76 <__swbuf_r+0x12>
 800ea72:	f000 f9cf 	bl	800ee14 <__sinit>
 800ea76:	4b21      	ldr	r3, [pc, #132]	; (800eafc <__swbuf_r+0x98>)
 800ea78:	429c      	cmp	r4, r3
 800ea7a:	d12b      	bne.n	800ead4 <__swbuf_r+0x70>
 800ea7c:	686c      	ldr	r4, [r5, #4]
 800ea7e:	69a3      	ldr	r3, [r4, #24]
 800ea80:	60a3      	str	r3, [r4, #8]
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	071a      	lsls	r2, r3, #28
 800ea86:	d52f      	bpl.n	800eae8 <__swbuf_r+0x84>
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	b36b      	cbz	r3, 800eae8 <__swbuf_r+0x84>
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	b2f6      	uxtb	r6, r6
 800ea90:	6820      	ldr	r0, [r4, #0]
 800ea92:	4637      	mov	r7, r6
 800ea94:	1ac0      	subs	r0, r0, r3
 800ea96:	6963      	ldr	r3, [r4, #20]
 800ea98:	4283      	cmp	r3, r0
 800ea9a:	dc04      	bgt.n	800eaa6 <__swbuf_r+0x42>
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 f924 	bl	800ecec <_fflush_r>
 800eaa4:	bb30      	cbnz	r0, 800eaf4 <__swbuf_r+0x90>
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	6022      	str	r2, [r4, #0]
 800eab4:	701e      	strb	r6, [r3, #0]
 800eab6:	6963      	ldr	r3, [r4, #20]
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d004      	beq.n	800eac6 <__swbuf_r+0x62>
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	07db      	lsls	r3, r3, #31
 800eac0:	d506      	bpl.n	800ead0 <__swbuf_r+0x6c>
 800eac2:	2e0a      	cmp	r6, #10
 800eac4:	d104      	bne.n	800ead0 <__swbuf_r+0x6c>
 800eac6:	4621      	mov	r1, r4
 800eac8:	4628      	mov	r0, r5
 800eaca:	f000 f90f 	bl	800ecec <_fflush_r>
 800eace:	b988      	cbnz	r0, 800eaf4 <__swbuf_r+0x90>
 800ead0:	4638      	mov	r0, r7
 800ead2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <__swbuf_r+0x9c>)
 800ead6:	429c      	cmp	r4, r3
 800ead8:	d101      	bne.n	800eade <__swbuf_r+0x7a>
 800eada:	68ac      	ldr	r4, [r5, #8]
 800eadc:	e7cf      	b.n	800ea7e <__swbuf_r+0x1a>
 800eade:	4b09      	ldr	r3, [pc, #36]	; (800eb04 <__swbuf_r+0xa0>)
 800eae0:	429c      	cmp	r4, r3
 800eae2:	bf08      	it	eq
 800eae4:	68ec      	ldreq	r4, [r5, #12]
 800eae6:	e7ca      	b.n	800ea7e <__swbuf_r+0x1a>
 800eae8:	4621      	mov	r1, r4
 800eaea:	4628      	mov	r0, r5
 800eaec:	f000 f80c 	bl	800eb08 <__swsetup_r>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d0cb      	beq.n	800ea8c <__swbuf_r+0x28>
 800eaf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eaf8:	e7ea      	b.n	800ead0 <__swbuf_r+0x6c>
 800eafa:	bf00      	nop
 800eafc:	0800f4bc 	.word	0x0800f4bc
 800eb00:	0800f4dc 	.word	0x0800f4dc
 800eb04:	0800f49c 	.word	0x0800f49c

0800eb08 <__swsetup_r>:
 800eb08:	4b32      	ldr	r3, [pc, #200]	; (800ebd4 <__swsetup_r+0xcc>)
 800eb0a:	b570      	push	{r4, r5, r6, lr}
 800eb0c:	681d      	ldr	r5, [r3, #0]
 800eb0e:	4606      	mov	r6, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	b125      	cbz	r5, 800eb1e <__swsetup_r+0x16>
 800eb14:	69ab      	ldr	r3, [r5, #24]
 800eb16:	b913      	cbnz	r3, 800eb1e <__swsetup_r+0x16>
 800eb18:	4628      	mov	r0, r5
 800eb1a:	f000 f97b 	bl	800ee14 <__sinit>
 800eb1e:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <__swsetup_r+0xd0>)
 800eb20:	429c      	cmp	r4, r3
 800eb22:	d10f      	bne.n	800eb44 <__swsetup_r+0x3c>
 800eb24:	686c      	ldr	r4, [r5, #4]
 800eb26:	89a3      	ldrh	r3, [r4, #12]
 800eb28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb2c:	0719      	lsls	r1, r3, #28
 800eb2e:	d42c      	bmi.n	800eb8a <__swsetup_r+0x82>
 800eb30:	06dd      	lsls	r5, r3, #27
 800eb32:	d411      	bmi.n	800eb58 <__swsetup_r+0x50>
 800eb34:	2309      	movs	r3, #9
 800eb36:	6033      	str	r3, [r6, #0]
 800eb38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb40:	81a3      	strh	r3, [r4, #12]
 800eb42:	e03e      	b.n	800ebc2 <__swsetup_r+0xba>
 800eb44:	4b25      	ldr	r3, [pc, #148]	; (800ebdc <__swsetup_r+0xd4>)
 800eb46:	429c      	cmp	r4, r3
 800eb48:	d101      	bne.n	800eb4e <__swsetup_r+0x46>
 800eb4a:	68ac      	ldr	r4, [r5, #8]
 800eb4c:	e7eb      	b.n	800eb26 <__swsetup_r+0x1e>
 800eb4e:	4b24      	ldr	r3, [pc, #144]	; (800ebe0 <__swsetup_r+0xd8>)
 800eb50:	429c      	cmp	r4, r3
 800eb52:	bf08      	it	eq
 800eb54:	68ec      	ldreq	r4, [r5, #12]
 800eb56:	e7e6      	b.n	800eb26 <__swsetup_r+0x1e>
 800eb58:	0758      	lsls	r0, r3, #29
 800eb5a:	d512      	bpl.n	800eb82 <__swsetup_r+0x7a>
 800eb5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb5e:	b141      	cbz	r1, 800eb72 <__swsetup_r+0x6a>
 800eb60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb64:	4299      	cmp	r1, r3
 800eb66:	d002      	beq.n	800eb6e <__swsetup_r+0x66>
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f000 fa59 	bl	800f020 <_free_r>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	6363      	str	r3, [r4, #52]	; 0x34
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb78:	81a3      	strh	r3, [r4, #12]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	6063      	str	r3, [r4, #4]
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	f043 0308 	orr.w	r3, r3, #8
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	b94b      	cbnz	r3, 800eba2 <__swsetup_r+0x9a>
 800eb8e:	89a3      	ldrh	r3, [r4, #12]
 800eb90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb98:	d003      	beq.n	800eba2 <__swsetup_r+0x9a>
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	f000 f9ff 	bl	800efa0 <__smakebuf_r>
 800eba2:	89a0      	ldrh	r0, [r4, #12]
 800eba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eba8:	f010 0301 	ands.w	r3, r0, #1
 800ebac:	d00a      	beq.n	800ebc4 <__swsetup_r+0xbc>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60a3      	str	r3, [r4, #8]
 800ebb2:	6963      	ldr	r3, [r4, #20]
 800ebb4:	425b      	negs	r3, r3
 800ebb6:	61a3      	str	r3, [r4, #24]
 800ebb8:	6923      	ldr	r3, [r4, #16]
 800ebba:	b943      	cbnz	r3, 800ebce <__swsetup_r+0xc6>
 800ebbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ebc0:	d1ba      	bne.n	800eb38 <__swsetup_r+0x30>
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	0781      	lsls	r1, r0, #30
 800ebc6:	bf58      	it	pl
 800ebc8:	6963      	ldrpl	r3, [r4, #20]
 800ebca:	60a3      	str	r3, [r4, #8]
 800ebcc:	e7f4      	b.n	800ebb8 <__swsetup_r+0xb0>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e7f7      	b.n	800ebc2 <__swsetup_r+0xba>
 800ebd2:	bf00      	nop
 800ebd4:	2000000c 	.word	0x2000000c
 800ebd8:	0800f4bc 	.word	0x0800f4bc
 800ebdc:	0800f4dc 	.word	0x0800f4dc
 800ebe0:	0800f49c 	.word	0x0800f49c

0800ebe4 <__sflush_r>:
 800ebe4:	898a      	ldrh	r2, [r1, #12]
 800ebe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebea:	4605      	mov	r5, r0
 800ebec:	0710      	lsls	r0, r2, #28
 800ebee:	460c      	mov	r4, r1
 800ebf0:	d458      	bmi.n	800eca4 <__sflush_r+0xc0>
 800ebf2:	684b      	ldr	r3, [r1, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dc05      	bgt.n	800ec04 <__sflush_r+0x20>
 800ebf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	dc02      	bgt.n	800ec04 <__sflush_r+0x20>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	d0f9      	beq.n	800ebfe <__sflush_r+0x1a>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec10:	682f      	ldr	r7, [r5, #0]
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	d032      	beq.n	800ec7c <__sflush_r+0x98>
 800ec16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec18:	89a3      	ldrh	r3, [r4, #12]
 800ec1a:	075a      	lsls	r2, r3, #29
 800ec1c:	d505      	bpl.n	800ec2a <__sflush_r+0x46>
 800ec1e:	6863      	ldr	r3, [r4, #4]
 800ec20:	1ac0      	subs	r0, r0, r3
 800ec22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec24:	b10b      	cbz	r3, 800ec2a <__sflush_r+0x46>
 800ec26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec28:	1ac0      	subs	r0, r0, r3
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec30:	4628      	mov	r0, r5
 800ec32:	6a21      	ldr	r1, [r4, #32]
 800ec34:	47b0      	blx	r6
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	d106      	bne.n	800ec4a <__sflush_r+0x66>
 800ec3c:	6829      	ldr	r1, [r5, #0]
 800ec3e:	291d      	cmp	r1, #29
 800ec40:	d82c      	bhi.n	800ec9c <__sflush_r+0xb8>
 800ec42:	4a29      	ldr	r2, [pc, #164]	; (800ece8 <__sflush_r+0x104>)
 800ec44:	40ca      	lsrs	r2, r1
 800ec46:	07d6      	lsls	r6, r2, #31
 800ec48:	d528      	bpl.n	800ec9c <__sflush_r+0xb8>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	04d9      	lsls	r1, r3, #19
 800ec4e:	6062      	str	r2, [r4, #4]
 800ec50:	6922      	ldr	r2, [r4, #16]
 800ec52:	6022      	str	r2, [r4, #0]
 800ec54:	d504      	bpl.n	800ec60 <__sflush_r+0x7c>
 800ec56:	1c42      	adds	r2, r0, #1
 800ec58:	d101      	bne.n	800ec5e <__sflush_r+0x7a>
 800ec5a:	682b      	ldr	r3, [r5, #0]
 800ec5c:	b903      	cbnz	r3, 800ec60 <__sflush_r+0x7c>
 800ec5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec62:	602f      	str	r7, [r5, #0]
 800ec64:	2900      	cmp	r1, #0
 800ec66:	d0ca      	beq.n	800ebfe <__sflush_r+0x1a>
 800ec68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	d002      	beq.n	800ec76 <__sflush_r+0x92>
 800ec70:	4628      	mov	r0, r5
 800ec72:	f000 f9d5 	bl	800f020 <_free_r>
 800ec76:	2000      	movs	r0, #0
 800ec78:	6360      	str	r0, [r4, #52]	; 0x34
 800ec7a:	e7c1      	b.n	800ec00 <__sflush_r+0x1c>
 800ec7c:	6a21      	ldr	r1, [r4, #32]
 800ec7e:	2301      	movs	r3, #1
 800ec80:	4628      	mov	r0, r5
 800ec82:	47b0      	blx	r6
 800ec84:	1c41      	adds	r1, r0, #1
 800ec86:	d1c7      	bne.n	800ec18 <__sflush_r+0x34>
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0c4      	beq.n	800ec18 <__sflush_r+0x34>
 800ec8e:	2b1d      	cmp	r3, #29
 800ec90:	d001      	beq.n	800ec96 <__sflush_r+0xb2>
 800ec92:	2b16      	cmp	r3, #22
 800ec94:	d101      	bne.n	800ec9a <__sflush_r+0xb6>
 800ec96:	602f      	str	r7, [r5, #0]
 800ec98:	e7b1      	b.n	800ebfe <__sflush_r+0x1a>
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	e7ad      	b.n	800ec00 <__sflush_r+0x1c>
 800eca4:	690f      	ldr	r7, [r1, #16]
 800eca6:	2f00      	cmp	r7, #0
 800eca8:	d0a9      	beq.n	800ebfe <__sflush_r+0x1a>
 800ecaa:	0793      	lsls	r3, r2, #30
 800ecac:	680e      	ldr	r6, [r1, #0]
 800ecae:	600f      	str	r7, [r1, #0]
 800ecb0:	bf0c      	ite	eq
 800ecb2:	694b      	ldreq	r3, [r1, #20]
 800ecb4:	2300      	movne	r3, #0
 800ecb6:	eba6 0807 	sub.w	r8, r6, r7
 800ecba:	608b      	str	r3, [r1, #8]
 800ecbc:	f1b8 0f00 	cmp.w	r8, #0
 800ecc0:	dd9d      	ble.n	800ebfe <__sflush_r+0x1a>
 800ecc2:	4643      	mov	r3, r8
 800ecc4:	463a      	mov	r2, r7
 800ecc6:	6a21      	ldr	r1, [r4, #32]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eccc:	47b0      	blx	r6
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	dc06      	bgt.n	800ece0 <__sflush_r+0xfc>
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecdc:	81a3      	strh	r3, [r4, #12]
 800ecde:	e78f      	b.n	800ec00 <__sflush_r+0x1c>
 800ece0:	4407      	add	r7, r0
 800ece2:	eba8 0800 	sub.w	r8, r8, r0
 800ece6:	e7e9      	b.n	800ecbc <__sflush_r+0xd8>
 800ece8:	20400001 	.word	0x20400001

0800ecec <_fflush_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	690b      	ldr	r3, [r1, #16]
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	460c      	mov	r4, r1
 800ecf4:	b913      	cbnz	r3, 800ecfc <_fflush_r+0x10>
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}
 800ecfc:	b118      	cbz	r0, 800ed06 <_fflush_r+0x1a>
 800ecfe:	6983      	ldr	r3, [r0, #24]
 800ed00:	b90b      	cbnz	r3, 800ed06 <_fflush_r+0x1a>
 800ed02:	f000 f887 	bl	800ee14 <__sinit>
 800ed06:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <_fflush_r+0x6c>)
 800ed08:	429c      	cmp	r4, r3
 800ed0a:	d11b      	bne.n	800ed44 <_fflush_r+0x58>
 800ed0c:	686c      	ldr	r4, [r5, #4]
 800ed0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d0ef      	beq.n	800ecf6 <_fflush_r+0xa>
 800ed16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed18:	07d0      	lsls	r0, r2, #31
 800ed1a:	d404      	bmi.n	800ed26 <_fflush_r+0x3a>
 800ed1c:	0599      	lsls	r1, r3, #22
 800ed1e:	d402      	bmi.n	800ed26 <_fflush_r+0x3a>
 800ed20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed22:	f000 f915 	bl	800ef50 <__retarget_lock_acquire_recursive>
 800ed26:	4628      	mov	r0, r5
 800ed28:	4621      	mov	r1, r4
 800ed2a:	f7ff ff5b 	bl	800ebe4 <__sflush_r>
 800ed2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed30:	4605      	mov	r5, r0
 800ed32:	07da      	lsls	r2, r3, #31
 800ed34:	d4e0      	bmi.n	800ecf8 <_fflush_r+0xc>
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	059b      	lsls	r3, r3, #22
 800ed3a:	d4dd      	bmi.n	800ecf8 <_fflush_r+0xc>
 800ed3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed3e:	f000 f908 	bl	800ef52 <__retarget_lock_release_recursive>
 800ed42:	e7d9      	b.n	800ecf8 <_fflush_r+0xc>
 800ed44:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <_fflush_r+0x70>)
 800ed46:	429c      	cmp	r4, r3
 800ed48:	d101      	bne.n	800ed4e <_fflush_r+0x62>
 800ed4a:	68ac      	ldr	r4, [r5, #8]
 800ed4c:	e7df      	b.n	800ed0e <_fflush_r+0x22>
 800ed4e:	4b04      	ldr	r3, [pc, #16]	; (800ed60 <_fflush_r+0x74>)
 800ed50:	429c      	cmp	r4, r3
 800ed52:	bf08      	it	eq
 800ed54:	68ec      	ldreq	r4, [r5, #12]
 800ed56:	e7da      	b.n	800ed0e <_fflush_r+0x22>
 800ed58:	0800f4bc 	.word	0x0800f4bc
 800ed5c:	0800f4dc 	.word	0x0800f4dc
 800ed60:	0800f49c 	.word	0x0800f49c

0800ed64 <std>:
 800ed64:	2300      	movs	r3, #0
 800ed66:	b510      	push	{r4, lr}
 800ed68:	4604      	mov	r4, r0
 800ed6a:	6083      	str	r3, [r0, #8]
 800ed6c:	8181      	strh	r1, [r0, #12]
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6643      	str	r3, [r0, #100]	; 0x64
 800ed72:	81c2      	strh	r2, [r0, #14]
 800ed74:	2208      	movs	r2, #8
 800ed76:	6183      	str	r3, [r0, #24]
 800ed78:	e9c0 3300 	strd	r3, r3, [r0]
 800ed7c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed80:	305c      	adds	r0, #92	; 0x5c
 800ed82:	f7ff fdf1 	bl	800e968 <memset>
 800ed86:	4b05      	ldr	r3, [pc, #20]	; (800ed9c <std+0x38>)
 800ed88:	6224      	str	r4, [r4, #32]
 800ed8a:	6263      	str	r3, [r4, #36]	; 0x24
 800ed8c:	4b04      	ldr	r3, [pc, #16]	; (800eda0 <std+0x3c>)
 800ed8e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed90:	4b04      	ldr	r3, [pc, #16]	; (800eda4 <std+0x40>)
 800ed92:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed94:	4b04      	ldr	r3, [pc, #16]	; (800eda8 <std+0x44>)
 800ed96:	6323      	str	r3, [r4, #48]	; 0x30
 800ed98:	bd10      	pop	{r4, pc}
 800ed9a:	bf00      	nop
 800ed9c:	0800f201 	.word	0x0800f201
 800eda0:	0800f223 	.word	0x0800f223
 800eda4:	0800f25b 	.word	0x0800f25b
 800eda8:	0800f27f 	.word	0x0800f27f

0800edac <_cleanup_r>:
 800edac:	4901      	ldr	r1, [pc, #4]	; (800edb4 <_cleanup_r+0x8>)
 800edae:	f000 b8af 	b.w	800ef10 <_fwalk_reent>
 800edb2:	bf00      	nop
 800edb4:	0800eced 	.word	0x0800eced

0800edb8 <__sfmoreglue>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	2268      	movs	r2, #104	; 0x68
 800edbc:	1e4d      	subs	r5, r1, #1
 800edbe:	460e      	mov	r6, r1
 800edc0:	4355      	muls	r5, r2
 800edc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edc6:	f000 f997 	bl	800f0f8 <_malloc_r>
 800edca:	4604      	mov	r4, r0
 800edcc:	b140      	cbz	r0, 800ede0 <__sfmoreglue+0x28>
 800edce:	2100      	movs	r1, #0
 800edd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800edd4:	e9c0 1600 	strd	r1, r6, [r0]
 800edd8:	300c      	adds	r0, #12
 800edda:	60a0      	str	r0, [r4, #8]
 800eddc:	f7ff fdc4 	bl	800e968 <memset>
 800ede0:	4620      	mov	r0, r4
 800ede2:	bd70      	pop	{r4, r5, r6, pc}

0800ede4 <__sfp_lock_acquire>:
 800ede4:	4801      	ldr	r0, [pc, #4]	; (800edec <__sfp_lock_acquire+0x8>)
 800ede6:	f000 b8b3 	b.w	800ef50 <__retarget_lock_acquire_recursive>
 800edea:	bf00      	nop
 800edec:	2000112d 	.word	0x2000112d

0800edf0 <__sfp_lock_release>:
 800edf0:	4801      	ldr	r0, [pc, #4]	; (800edf8 <__sfp_lock_release+0x8>)
 800edf2:	f000 b8ae 	b.w	800ef52 <__retarget_lock_release_recursive>
 800edf6:	bf00      	nop
 800edf8:	2000112d 	.word	0x2000112d

0800edfc <__sinit_lock_acquire>:
 800edfc:	4801      	ldr	r0, [pc, #4]	; (800ee04 <__sinit_lock_acquire+0x8>)
 800edfe:	f000 b8a7 	b.w	800ef50 <__retarget_lock_acquire_recursive>
 800ee02:	bf00      	nop
 800ee04:	2000112e 	.word	0x2000112e

0800ee08 <__sinit_lock_release>:
 800ee08:	4801      	ldr	r0, [pc, #4]	; (800ee10 <__sinit_lock_release+0x8>)
 800ee0a:	f000 b8a2 	b.w	800ef52 <__retarget_lock_release_recursive>
 800ee0e:	bf00      	nop
 800ee10:	2000112e 	.word	0x2000112e

0800ee14 <__sinit>:
 800ee14:	b510      	push	{r4, lr}
 800ee16:	4604      	mov	r4, r0
 800ee18:	f7ff fff0 	bl	800edfc <__sinit_lock_acquire>
 800ee1c:	69a3      	ldr	r3, [r4, #24]
 800ee1e:	b11b      	cbz	r3, 800ee28 <__sinit+0x14>
 800ee20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee24:	f7ff bff0 	b.w	800ee08 <__sinit_lock_release>
 800ee28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ee2e:	4620      	mov	r0, r4
 800ee30:	4b12      	ldr	r3, [pc, #72]	; (800ee7c <__sinit+0x68>)
 800ee32:	4a13      	ldr	r2, [pc, #76]	; (800ee80 <__sinit+0x6c>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	bf04      	itt	eq
 800ee3c:	2301      	moveq	r3, #1
 800ee3e:	61a3      	streq	r3, [r4, #24]
 800ee40:	f000 f820 	bl	800ee84 <__sfp>
 800ee44:	6060      	str	r0, [r4, #4]
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 f81c 	bl	800ee84 <__sfp>
 800ee4c:	60a0      	str	r0, [r4, #8]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	f000 f818 	bl	800ee84 <__sfp>
 800ee54:	2200      	movs	r2, #0
 800ee56:	2104      	movs	r1, #4
 800ee58:	60e0      	str	r0, [r4, #12]
 800ee5a:	6860      	ldr	r0, [r4, #4]
 800ee5c:	f7ff ff82 	bl	800ed64 <std>
 800ee60:	2201      	movs	r2, #1
 800ee62:	2109      	movs	r1, #9
 800ee64:	68a0      	ldr	r0, [r4, #8]
 800ee66:	f7ff ff7d 	bl	800ed64 <std>
 800ee6a:	2202      	movs	r2, #2
 800ee6c:	2112      	movs	r1, #18
 800ee6e:	68e0      	ldr	r0, [r4, #12]
 800ee70:	f7ff ff78 	bl	800ed64 <std>
 800ee74:	2301      	movs	r3, #1
 800ee76:	61a3      	str	r3, [r4, #24]
 800ee78:	e7d2      	b.n	800ee20 <__sinit+0xc>
 800ee7a:	bf00      	nop
 800ee7c:	0800f498 	.word	0x0800f498
 800ee80:	0800edad 	.word	0x0800edad

0800ee84 <__sfp>:
 800ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee86:	4607      	mov	r7, r0
 800ee88:	f7ff ffac 	bl	800ede4 <__sfp_lock_acquire>
 800ee8c:	4b1e      	ldr	r3, [pc, #120]	; (800ef08 <__sfp+0x84>)
 800ee8e:	681e      	ldr	r6, [r3, #0]
 800ee90:	69b3      	ldr	r3, [r6, #24]
 800ee92:	b913      	cbnz	r3, 800ee9a <__sfp+0x16>
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7ff ffbd 	bl	800ee14 <__sinit>
 800ee9a:	3648      	adds	r6, #72	; 0x48
 800ee9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eea0:	3b01      	subs	r3, #1
 800eea2:	d503      	bpl.n	800eeac <__sfp+0x28>
 800eea4:	6833      	ldr	r3, [r6, #0]
 800eea6:	b30b      	cbz	r3, 800eeec <__sfp+0x68>
 800eea8:	6836      	ldr	r6, [r6, #0]
 800eeaa:	e7f7      	b.n	800ee9c <__sfp+0x18>
 800eeac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eeb0:	b9d5      	cbnz	r5, 800eee8 <__sfp+0x64>
 800eeb2:	4b16      	ldr	r3, [pc, #88]	; (800ef0c <__sfp+0x88>)
 800eeb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eeb8:	6665      	str	r5, [r4, #100]	; 0x64
 800eeba:	60e3      	str	r3, [r4, #12]
 800eebc:	f000 f847 	bl	800ef4e <__retarget_lock_init_recursive>
 800eec0:	f7ff ff96 	bl	800edf0 <__sfp_lock_release>
 800eec4:	2208      	movs	r2, #8
 800eec6:	4629      	mov	r1, r5
 800eec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eecc:	6025      	str	r5, [r4, #0]
 800eece:	61a5      	str	r5, [r4, #24]
 800eed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eed8:	f7ff fd46 	bl	800e968 <memset>
 800eedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eee4:	4620      	mov	r0, r4
 800eee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee8:	3468      	adds	r4, #104	; 0x68
 800eeea:	e7d9      	b.n	800eea0 <__sfp+0x1c>
 800eeec:	2104      	movs	r1, #4
 800eeee:	4638      	mov	r0, r7
 800eef0:	f7ff ff62 	bl	800edb8 <__sfmoreglue>
 800eef4:	4604      	mov	r4, r0
 800eef6:	6030      	str	r0, [r6, #0]
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d1d5      	bne.n	800eea8 <__sfp+0x24>
 800eefc:	f7ff ff78 	bl	800edf0 <__sfp_lock_release>
 800ef00:	230c      	movs	r3, #12
 800ef02:	603b      	str	r3, [r7, #0]
 800ef04:	e7ee      	b.n	800eee4 <__sfp+0x60>
 800ef06:	bf00      	nop
 800ef08:	0800f498 	.word	0x0800f498
 800ef0c:	ffff0001 	.word	0xffff0001

0800ef10 <_fwalk_reent>:
 800ef10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4606      	mov	r6, r0
 800ef16:	4688      	mov	r8, r1
 800ef18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef1c:	2700      	movs	r7, #0
 800ef1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef22:	f1b9 0901 	subs.w	r9, r9, #1
 800ef26:	d505      	bpl.n	800ef34 <_fwalk_reent+0x24>
 800ef28:	6824      	ldr	r4, [r4, #0]
 800ef2a:	2c00      	cmp	r4, #0
 800ef2c:	d1f7      	bne.n	800ef1e <_fwalk_reent+0xe>
 800ef2e:	4638      	mov	r0, r7
 800ef30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef34:	89ab      	ldrh	r3, [r5, #12]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d907      	bls.n	800ef4a <_fwalk_reent+0x3a>
 800ef3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef3e:	3301      	adds	r3, #1
 800ef40:	d003      	beq.n	800ef4a <_fwalk_reent+0x3a>
 800ef42:	4629      	mov	r1, r5
 800ef44:	4630      	mov	r0, r6
 800ef46:	47c0      	blx	r8
 800ef48:	4307      	orrs	r7, r0
 800ef4a:	3568      	adds	r5, #104	; 0x68
 800ef4c:	e7e9      	b.n	800ef22 <_fwalk_reent+0x12>

0800ef4e <__retarget_lock_init_recursive>:
 800ef4e:	4770      	bx	lr

0800ef50 <__retarget_lock_acquire_recursive>:
 800ef50:	4770      	bx	lr

0800ef52 <__retarget_lock_release_recursive>:
 800ef52:	4770      	bx	lr

0800ef54 <__swhatbuf_r>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	460e      	mov	r6, r1
 800ef58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef5c:	b096      	sub	sp, #88	; 0x58
 800ef5e:	4614      	mov	r4, r2
 800ef60:	2900      	cmp	r1, #0
 800ef62:	461d      	mov	r5, r3
 800ef64:	da08      	bge.n	800ef78 <__swhatbuf_r+0x24>
 800ef66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	602a      	str	r2, [r5, #0]
 800ef6e:	061a      	lsls	r2, r3, #24
 800ef70:	d410      	bmi.n	800ef94 <__swhatbuf_r+0x40>
 800ef72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef76:	e00e      	b.n	800ef96 <__swhatbuf_r+0x42>
 800ef78:	466a      	mov	r2, sp
 800ef7a:	f000 f9a7 	bl	800f2cc <_fstat_r>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	dbf1      	blt.n	800ef66 <__swhatbuf_r+0x12>
 800ef82:	9a01      	ldr	r2, [sp, #4]
 800ef84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef8c:	425a      	negs	r2, r3
 800ef8e:	415a      	adcs	r2, r3
 800ef90:	602a      	str	r2, [r5, #0]
 800ef92:	e7ee      	b.n	800ef72 <__swhatbuf_r+0x1e>
 800ef94:	2340      	movs	r3, #64	; 0x40
 800ef96:	2000      	movs	r0, #0
 800ef98:	6023      	str	r3, [r4, #0]
 800ef9a:	b016      	add	sp, #88	; 0x58
 800ef9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efa0 <__smakebuf_r>:
 800efa0:	898b      	ldrh	r3, [r1, #12]
 800efa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efa4:	079d      	lsls	r5, r3, #30
 800efa6:	4606      	mov	r6, r0
 800efa8:	460c      	mov	r4, r1
 800efaa:	d507      	bpl.n	800efbc <__smakebuf_r+0x1c>
 800efac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	6123      	str	r3, [r4, #16]
 800efb4:	2301      	movs	r3, #1
 800efb6:	6163      	str	r3, [r4, #20]
 800efb8:	b002      	add	sp, #8
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	ab01      	add	r3, sp, #4
 800efbe:	466a      	mov	r2, sp
 800efc0:	f7ff ffc8 	bl	800ef54 <__swhatbuf_r>
 800efc4:	9900      	ldr	r1, [sp, #0]
 800efc6:	4605      	mov	r5, r0
 800efc8:	4630      	mov	r0, r6
 800efca:	f000 f895 	bl	800f0f8 <_malloc_r>
 800efce:	b948      	cbnz	r0, 800efe4 <__smakebuf_r+0x44>
 800efd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd4:	059a      	lsls	r2, r3, #22
 800efd6:	d4ef      	bmi.n	800efb8 <__smakebuf_r+0x18>
 800efd8:	f023 0303 	bic.w	r3, r3, #3
 800efdc:	f043 0302 	orr.w	r3, r3, #2
 800efe0:	81a3      	strh	r3, [r4, #12]
 800efe2:	e7e3      	b.n	800efac <__smakebuf_r+0xc>
 800efe4:	4b0d      	ldr	r3, [pc, #52]	; (800f01c <__smakebuf_r+0x7c>)
 800efe6:	62b3      	str	r3, [r6, #40]	; 0x28
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	6020      	str	r0, [r4, #0]
 800efec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eff0:	6120      	str	r0, [r4, #16]
 800eff2:	81a3      	strh	r3, [r4, #12]
 800eff4:	9b00      	ldr	r3, [sp, #0]
 800eff6:	6163      	str	r3, [r4, #20]
 800eff8:	9b01      	ldr	r3, [sp, #4]
 800effa:	b15b      	cbz	r3, 800f014 <__smakebuf_r+0x74>
 800effc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f000:	4630      	mov	r0, r6
 800f002:	f000 f975 	bl	800f2f0 <_isatty_r>
 800f006:	b128      	cbz	r0, 800f014 <__smakebuf_r+0x74>
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	f023 0303 	bic.w	r3, r3, #3
 800f00e:	f043 0301 	orr.w	r3, r3, #1
 800f012:	81a3      	strh	r3, [r4, #12]
 800f014:	89a0      	ldrh	r0, [r4, #12]
 800f016:	4305      	orrs	r5, r0
 800f018:	81a5      	strh	r5, [r4, #12]
 800f01a:	e7cd      	b.n	800efb8 <__smakebuf_r+0x18>
 800f01c:	0800edad 	.word	0x0800edad

0800f020 <_free_r>:
 800f020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f022:	2900      	cmp	r1, #0
 800f024:	d043      	beq.n	800f0ae <_free_r+0x8e>
 800f026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f02a:	1f0c      	subs	r4, r1, #4
 800f02c:	9001      	str	r0, [sp, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	bfb8      	it	lt
 800f032:	18e4      	addlt	r4, r4, r3
 800f034:	f000 f97e 	bl	800f334 <__malloc_lock>
 800f038:	4a1e      	ldr	r2, [pc, #120]	; (800f0b4 <_free_r+0x94>)
 800f03a:	9801      	ldr	r0, [sp, #4]
 800f03c:	6813      	ldr	r3, [r2, #0]
 800f03e:	b933      	cbnz	r3, 800f04e <_free_r+0x2e>
 800f040:	6063      	str	r3, [r4, #4]
 800f042:	6014      	str	r4, [r2, #0]
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f04a:	f000 b979 	b.w	800f340 <__malloc_unlock>
 800f04e:	42a3      	cmp	r3, r4
 800f050:	d908      	bls.n	800f064 <_free_r+0x44>
 800f052:	6825      	ldr	r5, [r4, #0]
 800f054:	1961      	adds	r1, r4, r5
 800f056:	428b      	cmp	r3, r1
 800f058:	bf01      	itttt	eq
 800f05a:	6819      	ldreq	r1, [r3, #0]
 800f05c:	685b      	ldreq	r3, [r3, #4]
 800f05e:	1949      	addeq	r1, r1, r5
 800f060:	6021      	streq	r1, [r4, #0]
 800f062:	e7ed      	b.n	800f040 <_free_r+0x20>
 800f064:	461a      	mov	r2, r3
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	b10b      	cbz	r3, 800f06e <_free_r+0x4e>
 800f06a:	42a3      	cmp	r3, r4
 800f06c:	d9fa      	bls.n	800f064 <_free_r+0x44>
 800f06e:	6811      	ldr	r1, [r2, #0]
 800f070:	1855      	adds	r5, r2, r1
 800f072:	42a5      	cmp	r5, r4
 800f074:	d10b      	bne.n	800f08e <_free_r+0x6e>
 800f076:	6824      	ldr	r4, [r4, #0]
 800f078:	4421      	add	r1, r4
 800f07a:	1854      	adds	r4, r2, r1
 800f07c:	6011      	str	r1, [r2, #0]
 800f07e:	42a3      	cmp	r3, r4
 800f080:	d1e0      	bne.n	800f044 <_free_r+0x24>
 800f082:	681c      	ldr	r4, [r3, #0]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	4421      	add	r1, r4
 800f088:	6053      	str	r3, [r2, #4]
 800f08a:	6011      	str	r1, [r2, #0]
 800f08c:	e7da      	b.n	800f044 <_free_r+0x24>
 800f08e:	d902      	bls.n	800f096 <_free_r+0x76>
 800f090:	230c      	movs	r3, #12
 800f092:	6003      	str	r3, [r0, #0]
 800f094:	e7d6      	b.n	800f044 <_free_r+0x24>
 800f096:	6825      	ldr	r5, [r4, #0]
 800f098:	1961      	adds	r1, r4, r5
 800f09a:	428b      	cmp	r3, r1
 800f09c:	bf02      	ittt	eq
 800f09e:	6819      	ldreq	r1, [r3, #0]
 800f0a0:	685b      	ldreq	r3, [r3, #4]
 800f0a2:	1949      	addeq	r1, r1, r5
 800f0a4:	6063      	str	r3, [r4, #4]
 800f0a6:	bf08      	it	eq
 800f0a8:	6021      	streq	r1, [r4, #0]
 800f0aa:	6054      	str	r4, [r2, #4]
 800f0ac:	e7ca      	b.n	800f044 <_free_r+0x24>
 800f0ae:	b003      	add	sp, #12
 800f0b0:	bd30      	pop	{r4, r5, pc}
 800f0b2:	bf00      	nop
 800f0b4:	20001130 	.word	0x20001130

0800f0b8 <sbrk_aligned>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	4e0e      	ldr	r6, [pc, #56]	; (800f0f4 <sbrk_aligned+0x3c>)
 800f0bc:	460c      	mov	r4, r1
 800f0be:	4605      	mov	r5, r0
 800f0c0:	6831      	ldr	r1, [r6, #0]
 800f0c2:	b911      	cbnz	r1, 800f0ca <sbrk_aligned+0x12>
 800f0c4:	f000 f88c 	bl	800f1e0 <_sbrk_r>
 800f0c8:	6030      	str	r0, [r6, #0]
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f000 f887 	bl	800f1e0 <_sbrk_r>
 800f0d2:	1c43      	adds	r3, r0, #1
 800f0d4:	d00a      	beq.n	800f0ec <sbrk_aligned+0x34>
 800f0d6:	1cc4      	adds	r4, r0, #3
 800f0d8:	f024 0403 	bic.w	r4, r4, #3
 800f0dc:	42a0      	cmp	r0, r4
 800f0de:	d007      	beq.n	800f0f0 <sbrk_aligned+0x38>
 800f0e0:	1a21      	subs	r1, r4, r0
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f000 f87c 	bl	800f1e0 <_sbrk_r>
 800f0e8:	3001      	adds	r0, #1
 800f0ea:	d101      	bne.n	800f0f0 <sbrk_aligned+0x38>
 800f0ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	bd70      	pop	{r4, r5, r6, pc}
 800f0f4:	20001134 	.word	0x20001134

0800f0f8 <_malloc_r>:
 800f0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fc:	1ccd      	adds	r5, r1, #3
 800f0fe:	4607      	mov	r7, r0
 800f100:	f025 0503 	bic.w	r5, r5, #3
 800f104:	3508      	adds	r5, #8
 800f106:	2d0c      	cmp	r5, #12
 800f108:	bf38      	it	cc
 800f10a:	250c      	movcc	r5, #12
 800f10c:	2d00      	cmp	r5, #0
 800f10e:	db01      	blt.n	800f114 <_malloc_r+0x1c>
 800f110:	42a9      	cmp	r1, r5
 800f112:	d905      	bls.n	800f120 <_malloc_r+0x28>
 800f114:	230c      	movs	r3, #12
 800f116:	2600      	movs	r6, #0
 800f118:	603b      	str	r3, [r7, #0]
 800f11a:	4630      	mov	r0, r6
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	4e2e      	ldr	r6, [pc, #184]	; (800f1dc <_malloc_r+0xe4>)
 800f122:	f000 f907 	bl	800f334 <__malloc_lock>
 800f126:	6833      	ldr	r3, [r6, #0]
 800f128:	461c      	mov	r4, r3
 800f12a:	bb34      	cbnz	r4, 800f17a <_malloc_r+0x82>
 800f12c:	4629      	mov	r1, r5
 800f12e:	4638      	mov	r0, r7
 800f130:	f7ff ffc2 	bl	800f0b8 <sbrk_aligned>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	4604      	mov	r4, r0
 800f138:	d14d      	bne.n	800f1d6 <_malloc_r+0xde>
 800f13a:	6834      	ldr	r4, [r6, #0]
 800f13c:	4626      	mov	r6, r4
 800f13e:	2e00      	cmp	r6, #0
 800f140:	d140      	bne.n	800f1c4 <_malloc_r+0xcc>
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	4631      	mov	r1, r6
 800f146:	4638      	mov	r0, r7
 800f148:	eb04 0803 	add.w	r8, r4, r3
 800f14c:	f000 f848 	bl	800f1e0 <_sbrk_r>
 800f150:	4580      	cmp	r8, r0
 800f152:	d13a      	bne.n	800f1ca <_malloc_r+0xd2>
 800f154:	6821      	ldr	r1, [r4, #0]
 800f156:	3503      	adds	r5, #3
 800f158:	4638      	mov	r0, r7
 800f15a:	1a6d      	subs	r5, r5, r1
 800f15c:	f025 0503 	bic.w	r5, r5, #3
 800f160:	3508      	adds	r5, #8
 800f162:	2d0c      	cmp	r5, #12
 800f164:	bf38      	it	cc
 800f166:	250c      	movcc	r5, #12
 800f168:	4629      	mov	r1, r5
 800f16a:	f7ff ffa5 	bl	800f0b8 <sbrk_aligned>
 800f16e:	3001      	adds	r0, #1
 800f170:	d02b      	beq.n	800f1ca <_malloc_r+0xd2>
 800f172:	6823      	ldr	r3, [r4, #0]
 800f174:	442b      	add	r3, r5
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	e00e      	b.n	800f198 <_malloc_r+0xa0>
 800f17a:	6822      	ldr	r2, [r4, #0]
 800f17c:	1b52      	subs	r2, r2, r5
 800f17e:	d41e      	bmi.n	800f1be <_malloc_r+0xc6>
 800f180:	2a0b      	cmp	r2, #11
 800f182:	d916      	bls.n	800f1b2 <_malloc_r+0xba>
 800f184:	1961      	adds	r1, r4, r5
 800f186:	42a3      	cmp	r3, r4
 800f188:	6025      	str	r5, [r4, #0]
 800f18a:	bf18      	it	ne
 800f18c:	6059      	strne	r1, [r3, #4]
 800f18e:	6863      	ldr	r3, [r4, #4]
 800f190:	bf08      	it	eq
 800f192:	6031      	streq	r1, [r6, #0]
 800f194:	5162      	str	r2, [r4, r5]
 800f196:	604b      	str	r3, [r1, #4]
 800f198:	f104 060b 	add.w	r6, r4, #11
 800f19c:	4638      	mov	r0, r7
 800f19e:	f000 f8cf 	bl	800f340 <__malloc_unlock>
 800f1a2:	1d23      	adds	r3, r4, #4
 800f1a4:	f026 0607 	bic.w	r6, r6, #7
 800f1a8:	1af2      	subs	r2, r6, r3
 800f1aa:	d0b6      	beq.n	800f11a <_malloc_r+0x22>
 800f1ac:	1b9b      	subs	r3, r3, r6
 800f1ae:	50a3      	str	r3, [r4, r2]
 800f1b0:	e7b3      	b.n	800f11a <_malloc_r+0x22>
 800f1b2:	6862      	ldr	r2, [r4, #4]
 800f1b4:	42a3      	cmp	r3, r4
 800f1b6:	bf0c      	ite	eq
 800f1b8:	6032      	streq	r2, [r6, #0]
 800f1ba:	605a      	strne	r2, [r3, #4]
 800f1bc:	e7ec      	b.n	800f198 <_malloc_r+0xa0>
 800f1be:	4623      	mov	r3, r4
 800f1c0:	6864      	ldr	r4, [r4, #4]
 800f1c2:	e7b2      	b.n	800f12a <_malloc_r+0x32>
 800f1c4:	4634      	mov	r4, r6
 800f1c6:	6876      	ldr	r6, [r6, #4]
 800f1c8:	e7b9      	b.n	800f13e <_malloc_r+0x46>
 800f1ca:	230c      	movs	r3, #12
 800f1cc:	4638      	mov	r0, r7
 800f1ce:	603b      	str	r3, [r7, #0]
 800f1d0:	f000 f8b6 	bl	800f340 <__malloc_unlock>
 800f1d4:	e7a1      	b.n	800f11a <_malloc_r+0x22>
 800f1d6:	6025      	str	r5, [r4, #0]
 800f1d8:	e7de      	b.n	800f198 <_malloc_r+0xa0>
 800f1da:	bf00      	nop
 800f1dc:	20001130 	.word	0x20001130

0800f1e0 <_sbrk_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	4d05      	ldr	r5, [pc, #20]	; (800f1fc <_sbrk_r+0x1c>)
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f3 fe66 	bl	8002ebc <_sbrk>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_sbrk_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_sbrk_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	20001138 	.word	0x20001138

0800f200 <__sread>:
 800f200:	b510      	push	{r4, lr}
 800f202:	460c      	mov	r4, r1
 800f204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f208:	f000 f8a0 	bl	800f34c <_read_r>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	bfab      	itete	ge
 800f210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f212:	89a3      	ldrhlt	r3, [r4, #12]
 800f214:	181b      	addge	r3, r3, r0
 800f216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f21a:	bfac      	ite	ge
 800f21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f21e:	81a3      	strhlt	r3, [r4, #12]
 800f220:	bd10      	pop	{r4, pc}

0800f222 <__swrite>:
 800f222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f226:	461f      	mov	r7, r3
 800f228:	898b      	ldrh	r3, [r1, #12]
 800f22a:	4605      	mov	r5, r0
 800f22c:	460c      	mov	r4, r1
 800f22e:	05db      	lsls	r3, r3, #23
 800f230:	4616      	mov	r6, r2
 800f232:	d505      	bpl.n	800f240 <__swrite+0x1e>
 800f234:	2302      	movs	r3, #2
 800f236:	2200      	movs	r2, #0
 800f238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23c:	f000 f868 	bl	800f310 <_lseek_r>
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	4632      	mov	r2, r6
 800f244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f248:	4628      	mov	r0, r5
 800f24a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f24e:	81a3      	strh	r3, [r4, #12]
 800f250:	463b      	mov	r3, r7
 800f252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f256:	f000 b817 	b.w	800f288 <_write_r>

0800f25a <__sseek>:
 800f25a:	b510      	push	{r4, lr}
 800f25c:	460c      	mov	r4, r1
 800f25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f262:	f000 f855 	bl	800f310 <_lseek_r>
 800f266:	1c43      	adds	r3, r0, #1
 800f268:	89a3      	ldrh	r3, [r4, #12]
 800f26a:	bf15      	itete	ne
 800f26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f276:	81a3      	strheq	r3, [r4, #12]
 800f278:	bf18      	it	ne
 800f27a:	81a3      	strhne	r3, [r4, #12]
 800f27c:	bd10      	pop	{r4, pc}

0800f27e <__sclose>:
 800f27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f282:	f000 b813 	b.w	800f2ac <_close_r>
	...

0800f288 <_write_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4604      	mov	r4, r0
 800f28c:	4d06      	ldr	r5, [pc, #24]	; (800f2a8 <_write_r+0x20>)
 800f28e:	4608      	mov	r0, r1
 800f290:	4611      	mov	r1, r2
 800f292:	2200      	movs	r2, #0
 800f294:	602a      	str	r2, [r5, #0]
 800f296:	461a      	mov	r2, r3
 800f298:	f7f3 fdbf 	bl	8002e1a <_write>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_write_r+0x1e>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_write_r+0x1e>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	20001138 	.word	0x20001138

0800f2ac <_close_r>:
 800f2ac:	b538      	push	{r3, r4, r5, lr}
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	4d05      	ldr	r5, [pc, #20]	; (800f2c8 <_close_r+0x1c>)
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	4608      	mov	r0, r1
 800f2b6:	602b      	str	r3, [r5, #0]
 800f2b8:	f7f3 fdcb 	bl	8002e52 <_close>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d102      	bne.n	800f2c6 <_close_r+0x1a>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	b103      	cbz	r3, 800f2c6 <_close_r+0x1a>
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	20001138 	.word	0x20001138

0800f2cc <_fstat_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4d06      	ldr	r5, [pc, #24]	; (800f2ec <_fstat_r+0x20>)
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	4611      	mov	r1, r2
 800f2d8:	602b      	str	r3, [r5, #0]
 800f2da:	f7f3 fdc6 	bl	8002e6a <_fstat>
 800f2de:	1c43      	adds	r3, r0, #1
 800f2e0:	d102      	bne.n	800f2e8 <_fstat_r+0x1c>
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	b103      	cbz	r3, 800f2e8 <_fstat_r+0x1c>
 800f2e6:	6023      	str	r3, [r4, #0]
 800f2e8:	bd38      	pop	{r3, r4, r5, pc}
 800f2ea:	bf00      	nop
 800f2ec:	20001138 	.word	0x20001138

0800f2f0 <_isatty_r>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	4d05      	ldr	r5, [pc, #20]	; (800f30c <_isatty_r+0x1c>)
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	4608      	mov	r0, r1
 800f2fa:	602b      	str	r3, [r5, #0]
 800f2fc:	f7f3 fdc5 	bl	8002e8a <_isatty>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_isatty_r+0x1a>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_isatty_r+0x1a>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20001138 	.word	0x20001138

0800f310 <_lseek_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4604      	mov	r4, r0
 800f314:	4d06      	ldr	r5, [pc, #24]	; (800f330 <_lseek_r+0x20>)
 800f316:	4608      	mov	r0, r1
 800f318:	4611      	mov	r1, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	602a      	str	r2, [r5, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	f7f3 fdbe 	bl	8002ea0 <_lseek>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_lseek_r+0x1e>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_lseek_r+0x1e>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20001138 	.word	0x20001138

0800f334 <__malloc_lock>:
 800f334:	4801      	ldr	r0, [pc, #4]	; (800f33c <__malloc_lock+0x8>)
 800f336:	f7ff be0b 	b.w	800ef50 <__retarget_lock_acquire_recursive>
 800f33a:	bf00      	nop
 800f33c:	2000112c 	.word	0x2000112c

0800f340 <__malloc_unlock>:
 800f340:	4801      	ldr	r0, [pc, #4]	; (800f348 <__malloc_unlock+0x8>)
 800f342:	f7ff be06 	b.w	800ef52 <__retarget_lock_release_recursive>
 800f346:	bf00      	nop
 800f348:	2000112c 	.word	0x2000112c

0800f34c <_read_r>:
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	4604      	mov	r4, r0
 800f350:	4d06      	ldr	r5, [pc, #24]	; (800f36c <_read_r+0x20>)
 800f352:	4608      	mov	r0, r1
 800f354:	4611      	mov	r1, r2
 800f356:	2200      	movs	r2, #0
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	f7f3 fd40 	bl	8002de0 <_read>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d102      	bne.n	800f36a <_read_r+0x1e>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b103      	cbz	r3, 800f36a <_read_r+0x1e>
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	20001138 	.word	0x20001138

0800f370 <_init>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	bf00      	nop
 800f374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f376:	bc08      	pop	{r3}
 800f378:	469e      	mov	lr, r3
 800f37a:	4770      	bx	lr

0800f37c <_fini>:
 800f37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f37e:	bf00      	nop
 800f380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f382:	bc08      	pop	{r3}
 800f384:	469e      	mov	lr, r3
 800f386:	4770      	bx	lr
